![](/images/2017-08-30-syncing-my-dotfiles/github-dotfiles.jpg)
_[My dotfiles repository on GitHub](https://github.com/kevinjalbert/dotfiles)_


I strive to [share my bag of tricks](/share-your-bag-of-tricks/). By sharing [my dotfiles on GitHub](https://github.com/kevinjalbert/dotfiles) is one way I can share the tricks and tips I've picked up over time. By hosting them in the public I can easily replicate my development environment on another machine if needed.

There are some techinical challengaes I've overcome in sharing my dotfiles in the public. My dotfiles is a living repository, it is constantly changing as I tweak my environemnt. I recently got into a situation where I have two physical machines that I will use for development. I want a simple and comprehensive solution for syncing my dotfiles between both machines.

# What are dotfiles?

Jump right to the next section if you are already familiar with the _dotfiles_ concept. The basic principle is that someone's _dotfiles_ is a set of the configurations (usually consisting of many _\<dot\>files_, for example `.zshrc`).

As a developer we have many tools at our disposal, and in many cases they are essential to our day-to-day. The main reason to care about your own dotfiles is to ensure that you can replicate your working environment again. That alone is huge if you ever have to move to a new machine. It is a common pattern to push up your dotfiles to the cloud for back up purposes. I have put mine on GitHub. The following points, answers [why you would want your dotfiles on GitHub](https://dotfiles.github.io/):

> * Backup, restore, and sync the prefs and settings for your toolbox. Your dotfiles might be the most important files on your machine.
> * Learn from the community. Discover new tools for your toolbox and new tricks for the ones you already use.
> * Share what youâ€™ve learned with the rest of us.

# My dotfiles

Since the beginning I have hosted my dotfiles on GitHub. For the most part I've only had one machine for development, and so I would slowly my tweaks to my dotfiles repository.

I've built up a [Rakefile](https://github.com/kevinjalbert/dotfiles/blob/6585c9a7e1ae1926fcaf2210d48be23a2e988bdb/Rakefile) that orchestrates installation, updating, backup, and uninstall operations of my dotfiles.

My dotfiles are specific for the MacOS, and takes advantage of [homebrew](https://brew.sh/) to bootstrap the system. In addition, I also use [homebrew cask](https://caskroom.github.io/) and [`mas`](https://github.com/mas-cli/mas) to install system applications.

As previously mentioned my dotfiles is a living repository, so it will continue to evolve and change. I make no guarantee that it'll still operator or use the same solution at the time this article was written. The `README.md` in the repository should always reflect the state of my dotfiles (although admiditlly they are lacking as I write this).

## Mackup + Dropbox Synchronization

I stumbled upon [mackup](https://github.com/lra/mackup), a solution to keep application settings in sync for MacOS/Linux. The concept is pretty simple as per the [What does it do](https://github.com/lra/mackup#what-does-it-do) section says in the README:

> * Back ups your application settings in a safe directory (e.g. Dropbox)
> * Syncs your application settings among all your workstations
> * Restores your configuration on any fresh install in one command line

It has a list of [support applications](https://github.com/lra/mackup/tree/master/mackup/applications), although it also supports [custom file/directory/application](https://github.com/lra/mackup/tree/master/doc#add-support-for-an-application-or-any-file-or-directory).

Using mackup I can take advantage of:

* Backing up configurations of support applications. This alone is awesome, as there were many application settings that I never bother to backup.
* More battle-tested process for backing up and restoring symlinks.
* Approach for adding new symlinks of supported configurations.
* Exposed the idea of syncing configurations in Dropbox (real-time synchronization).

In adopting mackup there were some fundemental changes and considerations between the new and old systems I had.

### Synchronization

Before mackup I was using a `git pull` and `git push` to synchronize _deliberate_ configuration changes. I would have to manually add files I wanted to synchronize to the dotfile repository, along with the initial symlink. On another machine, I would `git pull` and _reinstall_ to apply the changes.

I was fortunate in that I didn't whole-heartly use this approach with multiple machines at the same time. I suspect there could be conflicts, or lost configurations using this approach.

With mackup and the idea of using dropbox for synchronization, configurations are reflected in near-realtime. This technically still possible without mackup. I moved my dotfile repository in dropbox, and let mackup handle the backup/restore of symlinks.

As mackup provides a host of support applications, I was able to synchronize much more between environments.

### Public Sharing

One of my main goals was to keep my dotfiles [focused and organized](https://github.com/kevinjalbert/dotfiles/tree/6585c9a7e1ae1926fcaf2210d48be23a2e988bdb) from a directory strucutre perspective. This is simplify the navigation for anyone looking at my dotfiles. Each directory contains a specific set of configurations, and through the orchestration system they get applied to the system.

When adopting mackup, I decided to shed this and simply adopt the _the root is my home directory_ that mackup uses. This isn't a pretty, but it removes the _mapping_ of where the file would reside on the system.

I define my own [custom applications](https://github.com/kevinjalbert/dotfiles/tree/5acf8672973e31dace420ad8e8303675094ed4e5/.mackup) so I can share/synchronize what I desire.

As mentioned mackup is capabile of synchronizing a bunch of supported applications. I didn't exactly want to put all those up in my repository for sharing. If I don't actictly manage the configuration then I don't want to share it. For example, configurations for [Doxie](https://github.com/lra/mackup/blob/719efd0a630fc3c6326aab5c84ac12b8509bbbf9/mackup/applications/doxie.cfg) aren't important, while my vim/zsh configurations are highly curated.

To make sure my repository only has the _curated_ configurations that I want to publicly share I use [whitelisting in the `.gitignore`](https://github.com/kevinjalbert/dotfiles/blob/5acf8672973e31dace420ad8e8303675094ed4e5/.gitignore).

<!--This approach allows me to take full advantage of synchronizing all configurations between environments, while publically sharing selected configurations in my repository.-->

## The Flow?

Describe what this gives me

How do I add new files

How do I apply to new machine
