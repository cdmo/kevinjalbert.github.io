<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kevin Jalbert</title>
  <link href="https://kevinjalbert.com"/>
  <updated>2017-11-14T18:53:20-05:00</updated>
  <author>
    <name>Kevin Jalbert</name>
  </author>
  <id>https://kevinjalbert.com</id>
  <entry>
    <title>GitHub: Tell Me When It Closes Extension</title>
    <link rel="alternate" href="https://kevinjalbert.com/github-tell-me-when-it-closes-extension/"/>
    <id>https://kevinjalbert.com/github-tell-me-when-it-closes-extension/</id>
    <updated>2017-11-22T23:23:12-05:00</updated>
    <published>2017-11-14T18:53:20-05:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">My first foray into making and publishing a browser extension. Let me showcase a quick extension which adds a button on GitHub's pull request and issue pages that links to tellmewhenitcloses.com populated with data.</description>
    <content type="html">&lt;p&gt;&lt;img width="1000" height="890" src="/images/2017-11-14-github-tell-me-when-it-closes-extension/screenshot.jpg" /&gt;
&lt;em&gt;&lt;a href="https://github.com/kevinjalbert/github-tell-me-when-it-closes-extension"&gt;Screenshot of GitHub: Tell Me When It Closes Extension&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://tellmewhenitcloses.com/"&gt;Tell Me When It Closes&lt;/a&gt; is an amazing service by &lt;a href="https://thoughtbot.com/"&gt;thoughtbot&lt;/a&gt;. Often I&amp;rsquo;ll find an issue or pull request on GitHub for a tool I use and I just want to know &lt;em&gt;when&lt;/em&gt; it closes what the result was. I don&amp;rsquo;t care for the back-and-forth conversations between people when if I were to subscribe, so Tell Me When It Closes is the perfect service for me.&lt;/p&gt;

&lt;p&gt;The issue I ran into was the limited ways to integrate this into my workflow. Looking at the ways you can &lt;a href="https://tellmewhenitcloses.com/subscribing"&gt;subscribe to issues and pull requests&lt;/a&gt;, it&amp;rsquo;s a bookmarklet that runs JavaScript. I don&amp;rsquo;t use the bookmark bar in my chrome browser (or browser bookmarks), so that solution wasn&amp;rsquo;t ideal.&lt;/p&gt;

&lt;p&gt;My old workflow for subscribing to an issue on Tell Me When It Closes was:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Cmd + L (move keyboard cursor to address bar)&lt;/li&gt;
&lt;li&gt;Cmd + C (copy URL)&lt;/li&gt;
&lt;li&gt;Cmd + T (open new tab)&lt;/li&gt;
&lt;li&gt;Type tellmewhenitcloses.com (autocompletes after a few characters)&lt;/li&gt;
&lt;li&gt;Enter (opens tellmewhenitcloses.com)&lt;/li&gt;
&lt;li&gt;Cmd + V (paste in issue URL)&lt;/li&gt;
&lt;li&gt;Enter (subscribe to issue)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To many manual steps for me.&lt;/p&gt;

&lt;h1&gt;Simplify and Extend&lt;/h1&gt;

&lt;p&gt;I want a way to simplify the steps to subscribe to an issue. I figured I could manipulate the webpage with JavaScript and add a button which, when, clicked would navigate to the subscription page with the URL filled in.&lt;/p&gt;

&lt;p&gt;I looked into making a browser extension, originally for Google Chrome. Upon further investigation, I found that I could target more browsers without much extra effort. I decided to use &lt;a href="https://github.com/EmailThis/extension-boilerplate"&gt;EmailThis/extension-boilerplate&lt;/a&gt; so that I could build an extension for Chrome, Opera &amp;amp; Firefox.&lt;/p&gt;

&lt;p&gt;The end result is a button which appears in the &lt;em&gt;notifications&lt;/em&gt; section of an issue or pull request page. When you click the button, it&amp;rsquo;ll open the tellmewhenitcloses.com with the appropriate URL pre-filled.&lt;/p&gt;

&lt;p&gt;&lt;img width="400" height="315" src="/images/2017-11-14-github-tell-me-when-it-closes-extension/button.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;Now my workflow for subscribing to an issue on Tell Me When It Closes is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click &lt;em&gt;Tell Me When It Closes&lt;/em&gt; button (using trackpad or &lt;a href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb"&gt;Vimium&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Enter (subscribe to issue)&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;Links&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kevinjalbert/github-tell-me-when-it-closes-extension"&gt;GitHub Repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/github-tell-me-when-it-cl/mfaeeelmjfbblmkbalffbhfpkhhnjalp"&gt;Chrome Extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://addons.mozilla.org/en-US/firefox/addon/github-tell-me-when-it-closes/"&gt;Firefox Add-on&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://addons.opera.com/en/extensions/details/github-tell-me-when-it-closes"&gt;Opera Add-on&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Share Highlighted Articles</title>
    <link rel="alternate" href="https://kevinjalbert.com/share-highlighted-articles/"/>
    <id>https://kevinjalbert.com/share-highlighted-articles/</id>
    <updated>2017-11-22T23:23:12-05:00</updated>
    <published>2017-10-31T19:53:20-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">We are ever consuming articles on the web. In most cases, the articles that interest me are highly technical and informative. Just like a book, you would highlight the important passages for future recollection. In this post, I present my use of the Highly highlighting service to record, retrieve, and share highlights.</description>
    <content type="html">&lt;p&gt;&lt;img width="1024" height="683" src="/images/2017-10-31-share-highlighted-articles/book-highlighter.jpg" /&gt;
&lt;em&gt;&lt;a title="IB English" href="https://flickr.com/photos/quinnanya/3242150010"&gt;IB English&lt;/a&gt; by &lt;a href="https://flickr.com/people/quinnanya"&gt;quinn.anya&lt;/a&gt; is licensed under &lt;a href="https://creativecommons.org/licenses/by-sa/2.0/"&gt;CC BY-SA&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here is yet another post on the topic of sharing knowledge to accompany my previous posts: &lt;em&gt;&lt;a href="/share-your-bag-of-tricks/"&gt;Share Your Bag of Tricks&lt;/a&gt;&lt;/em&gt; and &lt;em&gt;&lt;a href="/knowledge-and-screencast-culture/"&gt;Knowledge and Screencast Culture&lt;/a&gt;&lt;/em&gt;. I&amp;rsquo;ve recently made another change to my day-to-day workflow that accommodates sharing knowledge &amp;ndash; highlighting articles.&lt;/p&gt;

&lt;h1&gt;Information Recollection&lt;/h1&gt;

&lt;p&gt;In the software development world, I&amp;rsquo;m consuming a decent amount of articles from various sources. This is in a way how I keep up with the new changes in the landscape, which in its self could be an interesting short article on its own. I heavily use &lt;a href="https://getpocket.com"&gt;Pocket&lt;/a&gt; to stash articles I find throughout the day and I then slowly consume them at my own leisure. I had it such that if I &lt;em&gt;favourite&lt;/em&gt; an article in Pocket then, through &lt;a href="https://zapier.com"&gt;Zapier&lt;/a&gt; it will be saved in &lt;a href="https://evernote.com"&gt;Evernote&lt;/a&gt;. Evernote is my go-to note-taking and information recollection solution.&lt;/p&gt;

&lt;p&gt;This approach works well, although I want to &lt;em&gt;distil&lt;/em&gt; and &lt;em&gt;reinforce&lt;/em&gt; the materials I&amp;rsquo;m consuming. My hypothesis is that I&amp;rsquo;ll have more succinct notes within Evernote and thus able to take advantage of more narrow focus search efforts. I have settled on using a highlighting service to accomplish for marking important passages that end up being searchable in Evernote.&lt;/p&gt;

&lt;h1&gt;Highlighting Services&lt;/h1&gt;

&lt;p&gt;I reviewed four highlighting services to find the best one that fits my needs. I quickly passed over &lt;a href="https://diigo.com"&gt;Diigo&lt;/a&gt; and &lt;a href="https://www.lumioapp.com"&gt;Lumio&lt;/a&gt;, as they just didn&amp;rsquo;t appeal to me. These next two were my serious contenders that I evaluated.&lt;/p&gt;

&lt;h2&gt;&lt;a href="https://getliner.com"&gt;Liner&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Liner is a solid option for highlighting. The chrome extension works very well and is boiled down to the fundamentals: highlighting and comments. It offers a Pocket integration, which is nice, although not really needed. The ability to export highlights to Evernote is excellent, and as an off the shelf solution does what I need. The iOS application also is well done and works as expected. The sharing feature provides a link which renders the full article with highlightings in it, simple and effective &amp;ndash; &lt;a href="http://lnr.li/PbYky"&gt;example Liner shared link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Even though there is a subscription at $5/month or $50/year, it is not really necessary. You get folder support along with, more colours and advance search. The colours I couldn&amp;rsquo;t really care for, and the search will be covered by Evernote. Folders are also unimportant to me. Overall this means I don&amp;rsquo;t have to pay for this service.&lt;/p&gt;

&lt;p&gt;I really like Liner, and it almost made my pick. It satisfies all my needs, although it became my second choice as the next service Highly has a very neat &lt;em&gt;social&lt;/em&gt; feature.&lt;/p&gt;

&lt;h2&gt;&lt;a href="https://www.highly.co"&gt;Highly&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Highly is very similar to Liner in terms of highlighting. It is, even more, streamline as it only offers highlights and drops comments. The main benefit I noticed with Highly is the &lt;a href="https://medium.com/highlight-to-share/the-highlight-layer-45b9a8e86476"&gt;Highlight Layer&lt;/a&gt;, which when you browse articles provides a social aspect to highlighting. This is pretty awesome as I can see a summary of new articles assuming someone has marked it up before me. In addition, the interface of the extension I would argue is slightly better than Liner. Highly also offers a Pocket integration like Liner. The iOS application for highlighting is also quite nice and offers a great user experience.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Highlight Layer" width="427" height="194" src="/images/2017-10-31-share-highlighted-articles/highlight-layer.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;I was pleasantly surprised with the highlighting experience, considering I didn&amp;rsquo;t think you could improve much with highlighting. As you&amp;rsquo;ll see, the highlighting will automatically expand to fill the words in case you didn&amp;rsquo;t select them from the beginning or end:&lt;/p&gt;

&lt;p&gt;&lt;img alt="Smart Highlighting by Highly" width="577" height="147" src="/images/2017-10-31-share-highlighted-articles/highly-smart-highlighting.gif" /&gt;&lt;/p&gt;

&lt;p&gt;In contrast to how Liner displays the whole page with highlights when you share a link, Highly provides a summary page &amp;ndash; &lt;a href="https://www.highly.co/hl/FJrJO5TzhZt7d3"&gt;example Highly shared link&lt;/a&gt;. You can always drop into the context of the whole page, but this only works if you have the extension installed otherwise you get a prompt to install it.&lt;/p&gt;

&lt;p&gt;Highly does offer a subscription as well for $2/month or $20/year, but all you get is private highlights. To me, that doesn&amp;rsquo;t matter since I want everything to be public, and out in the open for others to benefit from.&lt;/p&gt;

&lt;p&gt;The Evernote storage is non-existent in Highly&amp;hellip; although I did counter this with a hacked together Zapier integration. That I&amp;rsquo;ll cover in the next section.&lt;/p&gt;

&lt;p&gt;Highly&amp;rsquo;s excellent highlighting experience along with the social aspect sold me on it. Liner is a great contender and I am going to keep my eyes on it to see what they come up with in the future. Even though Highly didn&amp;rsquo;t offer an Evernote solution, I was able to hack a more favourable one using Zapier.&lt;/p&gt;

&lt;h1&gt;Evernote Notes with Highly and Zapier&lt;/h1&gt;

&lt;p&gt;As mentioned I want Evernote integration with the highlighting service I use, and with Highly it wasn&amp;rsquo;t there. I was pleased with the rest of Highly that I was willing to make it work.&lt;/p&gt;

&lt;p&gt;First thing I was looking at was the RSS feed that Highly provides, figuring I could tie this with Zapier. Turns out that there already existed a &lt;a href="https://ifttt.com/applets/iTCzjXUP-highly-highlights-in-evernote"&gt;Highly highlights in Evernote on IFTTT&lt;/a&gt; already. The main issue is that the RSS feed has one item for each highlight. So you cannot aggregate all the highlights for a completed articled into one note. This wasn&amp;rsquo;t going to do it for me.&lt;/p&gt;

&lt;p&gt;You can email a Highly link, so I was going to just email them into Evernote. While this worked, there were a couple of issues:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Evernote&amp;rsquo;s free account only allows 5 emails per month. I was not a paying customer and wasn&amp;rsquo;t planning on taking the additional cost at the moment.&lt;/li&gt;
&lt;li&gt;The email is heavily branded with Highly, as it is meant to be a link sent to someone other than yourself.&lt;/li&gt;
&lt;li&gt;The title of the email was generic and uninformative &amp;ndash; &lt;em&gt;kevinjalbert sent you a highlight.&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img alt="Highly Share Email To Evernote" width="425" height="745" src="/images/2017-10-31-share-highlighted-articles/email-to-evernote.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;Fortunately, with Zapier, you can chain multiple actions together (limit of 3 with a free account). Zapier allows for some powerful workflows, especially since you can use JavaScript or Python to manipulate data within the flow.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Zapier Highly To Evernote Flow" width="380" height="495" src="/images/2017-10-31-share-highlighted-articles/zapier-highly-flow.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;I use a Zapier inbound email trigger, that triggers when I email the share link from Highly. I then feed the HTML formatted email into a JavaScript function where I can clean up the &lt;code&gt;inputData.rawBody&lt;/code&gt; and &lt;code&gt;inputData.htmlBody&lt;/code&gt; and return an object for the next step.&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;titleRegex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/kevinjalbert's highlights&lt;/span&gt;&lt;span class="se"&gt;\s&lt;/span&gt;&lt;span class="sr"&gt;+&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;.*&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;linkRegex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;https:&lt;/span&gt;&lt;span class="se"&gt;\/\/&lt;/span&gt;&lt;span class="sr"&gt;www.highly.co&lt;/span&gt;&lt;span class="se"&gt;\/&lt;/span&gt;&lt;span class="sr"&gt;hl&lt;/span&gt;&lt;span class="se"&gt;\/&lt;/span&gt;&lt;span class="sr"&gt;.*&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;timeRegex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;.* Summary • .* Story&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;htmlBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;inputData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;htmlBody&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Remove html, head, and body&lt;/span&gt;
&lt;span class="nx"&gt;htmlBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;htmlBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;htmlBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;body"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;htmlBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;htmlBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;htmlBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastIndexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;/body&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;// Remove profile and divider&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;before&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;htmlBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;htmlBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;div class="main"&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;after&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;htmlBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;htmlBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;div class="article-meta'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;htmlBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;before&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;after&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Remove redundant text&lt;/span&gt;
&lt;span class="nx"&gt;htmlBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;htmlBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"kevinjalbert's highlights"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Remove footer&lt;/span&gt;
&lt;span class="nx"&gt;htmlBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;htmlBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;htmlBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastIndexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;div class="footer"'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;// Add wrapping div&lt;/span&gt;
&lt;span class="nx"&gt;htmlBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;div"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;htmlBody&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;/div&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Clean up nbsp&lt;/span&gt;
&lt;span class="nx"&gt;htmlBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;htmlBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&amp;lt;div class="split-15" height="15" style="font-size:15px;line-height:15px;height:15px;overflow:hidden;background:transparent"&amp;gt;&amp;amp;nbsp;&amp;lt;&lt;/span&gt;&lt;span class="se"&gt;\/&lt;/span&gt;&lt;span class="sr"&gt;div&amp;gt;/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;div class="split-5" height="5" style="font-size:5px;line-height:5px;height:5px;overflow:hidden;background:transparent"&amp;gt;&amp;lt;br /&amp;gt;&amp;lt;\/div&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;articleTitle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;titleRegex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inputData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rawBody&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;highlyLink&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;linkRegex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inputData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rawBody&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;timeSummary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;timeRegex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inputData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rawBody&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;evernoteFormattedBody&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;htmlBody&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cleaning up the HTML body was an interesting task to make it conform to Evernote&amp;rsquo;s &lt;a href="https://dev.evernote.com/doc/articles/enml.php"&gt;ENML&lt;/a&gt; format. The code is a hack and brittle, but it works. I also extract the title so that I can ensure that the note&amp;rsquo;s title is properly reflecting in Evernote. The final step is to put all this together into the Evernote action template.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Zapier Create Evernote Note Template" width="760" height="560" src="/images/2017-10-31-share-highlighted-articles/zapier-create-evernote-note.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;With the Zapier flow, I now get a succinct note with the highlightings for an article. It triggers instantly when I send the email from Highly.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Zapier Formatted Email To Evernote" width="425" height="500" src="/images/2017-10-31-share-highlighted-articles/zapier-formatted-to-evernote.jpg" /&gt;&lt;/p&gt;

&lt;h1&gt;Highlighting Workflow&lt;/h1&gt;

&lt;p&gt;Now armed with my highlighter I can mark the good parts that I feel are most important when consuming articles online. With the ability to share summary links, I can better ensure that the take aways from the article surfaces easier. Finally, with my Evernote Zapier integration, I know that my highlighted information is always a few keystrokes away.&lt;/p&gt;

&lt;p&gt;My goal is to highlight every article that lands in my Pocket. With Highly&amp;rsquo;s social aspects I hope that my highlights help future readers. In a similar fashion, I am always pleased when I see that someone else has already highlighted an article for the key points.&lt;/p&gt;

&lt;p&gt;Make sure to check out my highlights and &lt;a href="https://www.highly.co/by/kevinjalbert"&gt;follow me on Highly&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Synchronizing my dotfiles</title>
    <link rel="alternate" href="https://kevinjalbert.com/synchronizing-my-dotfiles/"/>
    <id>https://kevinjalbert.com/synchronizing-my-dotfiles/</id>
    <updated>2017-11-22T23:23:12-05:00</updated>
    <published>2017-09-28T19:53:20-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">Overtime, you accumulate a set of configurations and dotfiles. To ensure a consistent environments across machines you want to have access to the same dotfiles. I share my synchronization approach along with how to keep the private and public information separate.</description>
    <content type="html">&lt;p&gt;&lt;img width="1362" height="887" src="/images/2017-09-28-synchronizing-my-dotfiles/github-dotfiles.jpg" /&gt;
&lt;em&gt;&lt;a href="https://github.com/kevinjalbert/dotfiles"&gt;My dotfiles repository on GitHub&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I always strive to &lt;a href="/share-your-bag-of-tricks/"&gt;share my bag of tricks&lt;/a&gt;. Hosting &lt;a href="https://github.com/kevinjalbert/dotfiles"&gt;my dotfiles on GitHub&lt;/a&gt; is one way I can share the tricks and tips I&amp;rsquo;ve picked up over time. In addition, this makes it easy to replicate my development environment on another machine if needed.&lt;/p&gt;

&lt;p&gt;There are some technical challenges I&amp;rsquo;ve had to overcome in open-sourcing my dotfiles. My dotfiles is a living repository, it is constantly changing as I tweak my environment. I recently encountered a situation where I have two physical machines to use for development. I want a simple and comprehensive solution for synchronizing my dotfiles, both the private and public content, between both machines.&lt;/p&gt;

&lt;h1&gt;What are dotfiles?&lt;/h1&gt;

&lt;p&gt;Jump right to the next section if you are already familiar with the dotfiles concept. The basic principle is that someone&amp;rsquo;s dotfiles are a set of the files that represent the configurations of applications and utilities (usually consisting of many &lt;em&gt;&amp;lt;dot&amp;gt;files&lt;/em&gt;, for example &lt;code&gt;.zshrc&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;As a developer, we have many tools at our disposal, and in many cases they are essential to our day-to-day work. The main reason to care about your own dotfiles is to ensure that you can replicate your working environment again. That alone is huge if you ever have to move to a new machine. It is a common pattern to push up your dotfiles to the cloud for back up purposes. I have most of mine on GitHub. The following points answer &lt;a href="https://dotfiles.github.io/"&gt;why you would want your dotfiles on GitHub&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Backup, restore, and sync the prefs and settings for your toolbox. Your dotfiles might be the most important files on your machine.&lt;/li&gt;
&lt;li&gt;Learn from the community. Discover new tools for your toolbox and new tricks for the ones you already use.&lt;/li&gt;
&lt;li&gt;Share what you’ve learned with the rest of us.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h1&gt;My dotfiles&lt;/h1&gt;

&lt;p&gt;Since the beginning, I have hosted my dotfiles on GitHub. For the most part, I&amp;rsquo;ve only had one machine for development, and so I would slowly push my tweaks to my dotfiles repository.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve built up a &lt;a href="https://github.com/kevinjalbert/dotfiles/blob/6585c9a7e1ae1926fcaf2210d48be23a2e988bdb/Rakefile"&gt;Rakefile&lt;/a&gt; that orchestrates the install/update/backup/uninstall operations of my dotfiles.&lt;/p&gt;

&lt;p&gt;My dotfiles are specific for MacOS and take advantage of &lt;a href="https://brew.sh/"&gt;homebrew&lt;/a&gt; to bootstrap the system. In addition, I also use &lt;a href="https://caskroom.github.io/"&gt;homebrew cask&lt;/a&gt; and &lt;a href="https://github.com/mas-cli/mas"&gt;mas&lt;/a&gt; to install system applications.&lt;/p&gt;

&lt;p&gt;As previously mentioned, my dotfiles is a living repository &amp;ndash; it will continue to evolve and change. I make no guarantee that it&amp;rsquo;ll still operate or use the same solution at the time this article was written. The &lt;code&gt;README.md&lt;/code&gt; in the repository should always reflect the state of my dotfiles (although admittedly they are lacking as I write this).&lt;/p&gt;

&lt;h2&gt;Mackup + Dropbox Synchronization&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve recently stumbled upon &lt;a href="https://github.com/lra/mackup"&gt;Mackup&lt;/a&gt;, a solution to keep application settings in sync for MacOS/Linux. The concept is pretty simple as per the &lt;a href="https://github.com/lra/mackup#what-does-it-do"&gt;What does it do&lt;/a&gt; section says in the README:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Back ups your application settings in a safe directory (e.g. Dropbox)&lt;/li&gt;
&lt;li&gt;Syncs your application settings among all your workstations&lt;/li&gt;
&lt;li&gt;Restores your configuration on any fresh install in one command line&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;It has a list of &lt;a href="https://github.com/lra/mackup/tree/master/mackup/applications"&gt;support applications&lt;/a&gt;, although it also supports &lt;a href="https://github.com/lra/mackup/tree/master/doc#add-support-for-an-application-or-any-file-or-directory"&gt;custom file/directory/application&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Using Mackup, I can take advantage of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Backing up configurations of supported applications. This alone is awesome, as there were many application settings that I never bothered to backup.&lt;/li&gt;
&lt;li&gt;Ability to create custom application configurations defining their symlink-able dotfiles.&lt;/li&gt;
&lt;li&gt;More battle-tested process for backing up and restoring symlinks.&lt;/li&gt;
&lt;li&gt;Real-time synchronization of configurations in Dropbox.&lt;/li&gt;
&lt;li&gt;Private dotfile synchronization in Dropbox.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Synchronization&lt;/h3&gt;

&lt;p&gt;Before Mackup, I was using &lt;code&gt;git pull&lt;/code&gt; and &lt;code&gt;git push&lt;/code&gt; to synchronize &lt;em&gt;deliberate&lt;/em&gt; configuration changes. I would have to manually add files I wanted to synchronize to the dotfile repository, along with the initial symlink. On another machine, I would &lt;code&gt;git pull&lt;/code&gt; and &lt;em&gt;reinstall&lt;/em&gt; to apply the changes.&lt;/p&gt;

&lt;p&gt;I was fortunate in that I didn&amp;rsquo;t whole-heartedly use this approach with multiple machines at the same time. I suspect there could be conflicts, or lost configurations using this approach.&lt;/p&gt;

&lt;p&gt;With Mackup and the idea of using dropbox for synchronization, configurations are reflected in near real-time (although applications might have to be restarted on the other machine). To better accommodate the real-time synchronization features, I moved my dotfile repository to dropbox. I also let Mackup handle the backup/restore of symlinks as it has that feature built into it.&lt;/p&gt;

&lt;p&gt;As Mackup provides a host of support applications, I was able to synchronize much more between environments. As it also has the support for custom application configurations I was able to better declare what I wanted to synchronize.&lt;/p&gt;

&lt;h3&gt;Public Sharing&lt;/h3&gt;

&lt;p&gt;One of my main goals was to keep my dotfiles &lt;a href="https://github.com/kevinjalbert/dotfiles/tree/6585c9a7e1ae1926fcaf2210d48be23a2e988bdb"&gt;focused and organized&lt;/a&gt; from a directory structure perspective. This simplifies the navigation and discoverability for anyone looking at my dotfiles. Each directory contains a specific set of configurations, and through the orchestration system, they get applied to the environment.&lt;/p&gt;

&lt;p&gt;When adopting Mackup, I decided to shed this and simply adopt the &lt;em&gt;root is my home directory&lt;/em&gt; that Mackup uses by default. This isn&amp;rsquo;t pretty, but it removes the &lt;em&gt;mapping&lt;/em&gt; of where the file would reside in the system. In retrospect, it actually better reflects where someone would expect to find certain configurations.&lt;/p&gt;

&lt;p&gt;I define my own &lt;a href="https://github.com/kevinjalbert/dotfiles/tree/5acf8672973e31dace420ad8e8303675094ed4e5/.mackup"&gt;custom applications&lt;/a&gt; so I can share/synchronize what I desire.&lt;/p&gt;

&lt;p&gt;As mentioned, Mackup is capabile of synchronizing a bunch of supported applications. I didn&amp;rsquo;t exactly want to put all those up in my repository for sharing. If I don&amp;rsquo;t actively manage the configuration then I don&amp;rsquo;t want to share it. For example, my configurations for &lt;a href="https://github.com/lra/mackup/blob/719efd0a630fc3c6326aab5c84ac12b8509bbbf9/mackup/applications/doxie.cfg"&gt;Doxie&lt;/a&gt; aren&amp;rsquo;t important, while my vim/zsh configurations are highly curated.&lt;/p&gt;

&lt;p&gt;To make sure my repository only has the &lt;em&gt;curated&lt;/em&gt; configurations that I want to publicly share I use &lt;a href="https://github.com/kevinjalbert/dotfiles/blob/5acf8672973e31dace420ad8e8303675094ed4e5/.gitignore"&gt;whitelisting in the &lt;code&gt;.gitignore&lt;/code&gt;&lt;/a&gt; to selectively publish dotfiles.&lt;/p&gt;

&lt;p&gt;This approach allows me to take full advantage of synchronizing all configurations between environments, while publically sharing selected configurations in my repository.&lt;/p&gt;

&lt;h2&gt;The Flow&lt;/h2&gt;

&lt;h3&gt;Adding files to synchronize&lt;/h3&gt;

&lt;p&gt;When I use &lt;code&gt;mackup --dry-run backup&lt;/code&gt;, I get a list of configurations that have not yet been backed up. This will pick up new applications, as well as new custom configurations I&amp;rsquo;ve added.&lt;/p&gt;

&lt;p&gt;If I have something custom to backup I will create a new configuration.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cat ~/.mackup/tips.cfg
[application]
name = My tips

[configuration_files]
.tips
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I can run &lt;code&gt;mackup backup&lt;/code&gt; and backup the new additions to my dropbox.&lt;/p&gt;

&lt;p&gt;If I&amp;rsquo;m considering publically sharing this in my dotfiles repository, I&amp;rsquo;ll add the appropriate changes in the &lt;code&gt;.gitignore&lt;/code&gt; whitelist.&lt;/p&gt;

&lt;h3&gt;Restoring files on different environment&lt;/h3&gt;

&lt;p&gt;Similar to the backup command, I can use &lt;code&gt;mackup --dry-run restore&lt;/code&gt; to see a list of configurations that have yet to be restored. This will add new symlinks on the current machine based on the configurations in dropbox.&lt;/p&gt;

&lt;p&gt;After that, the symlinks will take care of the synchronization of data between the multiple systems in real-time.&lt;/p&gt;

&lt;h3&gt;Gotchas&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Some dotfiles of applications are always changing or overwriting the symlinks. These are hard to handle, and might not even be worth synchronizing between systems. With dropbox, I kept getting notifications of changes to files (i.e., Screenhero did this for me).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can synchronize whole directories with a symlink. This is great as any new files that appear within it will be handled automatically. The only issue I&amp;rsquo;ve hit with this is when you want to change the scope of the symlinking (i.e., replace the directory with just individual files within it, or vice versa). Just be careful, as in my experience Mackup might not do the backup/restore correctly if you are changing the scope of the symlink.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Concerns with sensitive private keys (GPG/SSH private keys, secret API keys, etc&amp;hellip;), as you are putting them in Dropbox (in the cloud). Some people/organizations will not like this, and you have to be aware of what you are synchronizing.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can always override an existing Mackup application configuration with a custom one. For example, I wanted to add some additional files for my &lt;a href="https://github.com/kevinjalbert/dotfiles/blob/1c6c2b03169a57708b4487c4af0d52168f9957ef/.mackup/zsh.cfg"&gt;ZSH configuration&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;TL;DR&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;The concept of dotfiles is awesome, especially if you have multiple environments you want to synchronize configurations between.&lt;/li&gt;
&lt;li&gt;GitHub is a great place to host/explore public dotfiles.&lt;/li&gt;
&lt;li&gt;Mackup provides a comprehensive synchronization solution for application configurations and files.&lt;/li&gt;
&lt;li&gt;Using Dropbox as Mackup&amp;rsquo;s storage option provides near real-time synchronization of dotfiles.&lt;/li&gt;
&lt;li&gt;Make use of &lt;code&gt;.gitignore&lt;/code&gt;&amp;rsquo;s whitelisting feature to selectivly share your public dotfiles while staying within Mackup&amp;rsquo;s solution.&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Self-Improvement, Accountability and Transparancy</title>
    <link rel="alternate" href="https://kevinjalbert.com/self-improvement-accountability-and-transparency/"/>
    <id>https://kevinjalbert.com/self-improvement-accountability-and-transparency/</id>
    <updated>2017-11-22T23:23:12-05:00</updated>
    <published>2017-08-31T19:53:20-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">I outline changes that I want to implement for my website that will help push forward with: Self-Improvement, Accountability and Transparency. I'll be using ideas like a Now page, AMA, and Progress Posts.</description>
    <content type="html">&lt;p&gt;&lt;img width="2048" height="1152" src="/images/2017-08-31-self-improvement-accountability-and-transparancy/leaf.jpg" /&gt;
&lt;em&gt;&lt;a title="Raindrops on Nasturtiums, Whiskers on Gerbils" href="https://flickr.com/photos/uncoolbob/14342874746"&gt;Raindrops on Nasturtiums, Whiskers on Gerbils&lt;/a&gt; by &lt;a href="https://flickr.com/people/uncoolbob"&gt;uncoolbob&lt;/a&gt; is licensed under &lt;a href="https://creativecommons.org/licenses/by-nc/2.0/"&gt;CC BY-NC&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This will be a quick blog post, but one that will mark a new page in my writings.&lt;/p&gt;

&lt;p&gt;As the title suggests I want to be more &lt;em&gt;accountable&lt;/em&gt; and &lt;em&gt;transparent&lt;/em&gt; with what I am doing. Just by having a website that I blog in monthly does this a little. For example I am transparent that I want to blog once a month, and I&amp;rsquo;m held accountable as it is public. This maybe isn&amp;rsquo;t the greatest example, but hopefully you get the point.&lt;/p&gt;

&lt;p&gt;Moving forward, these are processes and constructs I want to start and/or continue doing.&lt;/p&gt;

&lt;h1&gt;Ask me anything!&lt;/h1&gt;

&lt;p&gt;I recently came back from &lt;a href="http://www.reactrally.com/"&gt;ReactRally 2017&lt;/a&gt; (which was awesome). In Sean Larkin&amp;rsquo;s presentation, he mentioned that he has an &lt;a href="https://github.com/TheLarkInn/ama"&gt;AMA&lt;/a&gt;. I took at look at it, and I thought it was an awesome idea. In the vein transparency, I decided to create one and link to it on my website.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t have high hopes for many questions coming in, but at least it is there.&lt;/p&gt;

&lt;h1&gt;Progress Posts&lt;/h1&gt;

&lt;p&gt;In addition to the monthly blog posts, I want to publish a new series of progress posts. I&amp;rsquo;m still not 100% sure what they will entail, but I have seen other blogs do something similar. Right now these are some ideas I&amp;rsquo;m playing with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Updates on progress in any side projects&lt;/li&gt;
&lt;li&gt;Blog analytics&lt;/li&gt;
&lt;li&gt;Productivity (i.e., RescueTime, pomodoros)&lt;/li&gt;
&lt;li&gt;Fitness/Activity&lt;/li&gt;
&lt;li&gt;Knowledge consumption (i.e., videos, articles, books, podcasts, courses)&lt;/li&gt;
&lt;li&gt;GitHub stats&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This would be a living experiement. I&amp;rsquo;m not too sure I&amp;rsquo;ll keep going with it, or what I&amp;rsquo;ll be tracking progress on. I&amp;rsquo;ll likely make adjustments to what I&amp;rsquo;m tracking and writing about, as well as the frequency of updates. I&amp;rsquo;m going to start with monthly updates, although we&amp;rsquo;ll see how that plays out.&lt;/p&gt;

&lt;p&gt;Ideally I want to do this so that I am more transparent in what I&amp;rsquo;m doing (on a finer-level), but also accountable in what I&amp;rsquo;m setting out for myself. A side bonus is having an archive of data (although probably not in an ideal format &amp;ndash; maybe I&amp;rsquo;ll make some kind of JSON as the raw data for each update haha).&lt;/p&gt;

&lt;p&gt;It would be sick to pull something like &lt;a href="http://blog.stephenwolfram.com/2012/03/the-personal-analytics-of-my-life/"&gt;Stephen Wolfram&amp;rsquo;s Personal Analytics&lt;/a&gt;, although that seems like quite a system he had put together.&lt;/p&gt;

&lt;h1&gt;Now Page&lt;/h1&gt;

&lt;p&gt;I already have a &lt;a href="https://nownownow.com/about"&gt;now page&lt;/a&gt; (link points to where I got the idea from) located in the top navigation of this website. The contents of that page detail &lt;em&gt;what I&amp;rsquo;m doing now&lt;/em&gt;. I haven&amp;rsquo;t been that regular in updating it, but it is something I want to work on.&lt;/p&gt;

&lt;p&gt;In a way the Now page could also act as a holding ground for my progress posts, with the next set of goals.&lt;/p&gt;

&lt;h1&gt;The Goal&lt;/h1&gt;

&lt;p&gt;With the accountability aspect, I&amp;rsquo;m hoping that I can push myself for deliberate self-improvement. Not only in software development, leadership, but in all aspects of my life. The progress posts and the now page should will hopefully be the catalyst in starting this trend.&lt;/p&gt;

&lt;p&gt;I still have to give this article, &lt;a href="https://medium.com/@lissalauren/design-your-personal-growth-831582b8524d"&gt;Design your personal growth&lt;/a&gt;, a read. It offers a plan for self-improvement, and hopefully I can incorporate something like that in these new changes I&amp;rsquo;m implementing.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Knowledge and Screencast Culture</title>
    <link rel="alternate" href="https://kevinjalbert.com/knowledge-and-screencast-culture/"/>
    <id>https://kevinjalbert.com/knowledge-and-screencast-culture/</id>
    <updated>2017-11-22T23:23:12-05:00</updated>
    <published>2017-07-30T19:53:20-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">As a developer, I routinely share my knowledge and experiences, however I find that I repeat myself with different individuals. To overcome this, I present a knowledge repository using screencasts for persisted and asynchronous knowledge transfer.</description>
    <content type="html">&lt;p&gt;&lt;img width="2048" height="1139" src="/images/2017-07-30-knowledge-and-screencast-culture/movie-camera.jpg" /&gt;
&lt;em&gt;&lt;a href="https://flic.kr/p/jxJiU9"&gt;Vintage Filmo Auto Master 8mm Movie Camera&lt;/a&gt; by &lt;a href="https://www.flickr.com/photos/51764518@N02/"&gt;Joe Haupt&lt;/a&gt;, on Flickr&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;Leaking Knowledge&lt;/h1&gt;

&lt;p&gt;I try my best to teach and impart knowledge to my peers. This is actually one reason why I blog &amp;ndash; to record and teach others from my experiences. While working at theScore, I attempt to &lt;a href="/share-your-bag-of-tricks/"&gt;share my bag of tricks&lt;/a&gt; to the best of my ability. I found during my tenure that my colleagues would occasionally:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ask what application/tool I just used&lt;/li&gt;
&lt;li&gt;ask what hotkey/shortcut I just pressed&lt;/li&gt;
&lt;li&gt;ask me how something works&lt;/li&gt;
&lt;li&gt;ask me to explain a subject in deeper depth&lt;/li&gt;
&lt;li&gt;comment on something they just learned from me&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I like to share information, tips and tricks. I came up with a rather simple idea and recently put it into practice at theScore. The whole point of this is to not just &lt;em&gt;leak&lt;/em&gt; knowledge but to directly share it.&lt;/p&gt;

&lt;h1&gt;Sharing and Don&amp;rsquo;t Repeat Yourself&lt;/h1&gt;

&lt;p&gt;There are those moments when a colleague of mine got value out of something I showed and/or explained to them. I like to capitalize on these moments, as I figured there are other people who would gain similar value if they were also there. Unfortunately, it&amp;rsquo;s not often that I am surrounded by &lt;em&gt;everyone&lt;/em&gt; when these moments happen (we&amp;rsquo;re all busy doing our own things).&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve noticed that I would be sharing similar tips when I pair or talk with another coworker. In retrospect, I&amp;rsquo;m repeating myself while slowly spreading enlightenment. As a developer I can see the pattern I&amp;rsquo;m following, and by my nature I want to automate or DRY (Don&amp;rsquo;t Repeat Yourself) things up. To overcome this hurdle I decided to come up with a more direct and permanent solution to disseminate my experience across the organization.&lt;/p&gt;

&lt;h1&gt;Knowledge Repository&lt;/h1&gt;

&lt;p&gt;I approach most things from a developer&amp;rsquo;s mindset. I love using GitHub and that is the platform theScore uses for its day to day operations on the engineering side. I created a &lt;em&gt;knowledge&lt;/em&gt; repository with the following in its README:&lt;/p&gt;

&lt;blockquote&gt;
&lt;h2&gt;Knowledge&lt;/h2&gt;

&lt;p&gt;We are always learning new things to help us work more efficiently and effectively. To help share this knowledge, we informally tell our team, or certain individuals. Eventually, we might have a presentation to a wider audience, which often is still a subset of our engineering department. In many cases, the information shared using these deliver mechanisms are not reviewable, and might not reach everyone who may benefit from it.&lt;/p&gt;

&lt;p&gt;Doing formal presentation can be nerve racking for the presenter, and time consuming for everyone. The idea for this repository is to make everything as informal and async as possible. The goal is to take advantage of screenrecording/screencasting technologies for delivery and storage of information along with GitHub&amp;rsquo;s pull requests to facilitate discussion.&lt;/p&gt;

&lt;h2&gt;What can be shared?&lt;/h2&gt;

&lt;p&gt;Anything! This repository helps promote individuals to share even the smallest tidbit of knowledge that they feel is worth sharing. It could be even a 30 seconds editor trick. Without having any restrictions, the hope is that the friction to share something to a wider audience is minimal, also to help encourage sharing what one might not feel is important enough to have a formal presentation for.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My idea was have a communal place to share and consume knowledge in an asynchronous environment. The README is treated as a living document and will adjust and improve over time.&lt;/p&gt;

&lt;p&gt;I am continuously learning new things, and others have plenty to teach. This approach will create an environment for learning for not only myself, but for everyone.&lt;/p&gt;

&lt;h1&gt;Screencast All the Things&lt;/h1&gt;

&lt;p&gt;As you might have read in the README snippet, the preferred medium to use is screenrecording/screencasting technologies for delivery and storage. So in essence, you would create a screencast for anything that could provide value to someone and that you don&amp;rsquo;t want to repeat. There are broad criteria of what to screencast, but in that respect I think it&amp;rsquo;ll work out quite well in the long run.&lt;/p&gt;

&lt;p&gt;There is quite an art to doing screencasts well, and I am just getting my feet wet. I&amp;rsquo;m still working on my presentation delivery as I generally don&amp;rsquo;t do much preparation before recording. As for tools I&amp;rsquo;m currently using:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://monosnap.com"&gt;Monosnap&lt;/a&gt; for the screenrecording software (for MacOS and Windows)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/keycastr/keycastr"&gt;KeyCastr&lt;/a&gt; for visualizing my keystrokes (for MacOS)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At theScore I download the recorded video and upload it to our internal Google Drive and link that in the GitHub Pull Request. I am tempted to just leave them on Monosnap&amp;rsquo;s built-in hosting service if there is no sensitive information within the video. To demonstrate my setup I&amp;rsquo;ve recorded a &lt;a href="https://monosnap.com/file/y53Rg1cvLJpT214tHz7erWDM9HgOik"&gt;quick screencast&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Screencast Culture&lt;/h1&gt;

&lt;p&gt;The &lt;em&gt;knowledge&lt;/em&gt; repository is still a new concept at theScore, although I have high hopes for it. The more that people contribute to it, the more useful it&amp;rsquo;ll become. With a wide range of topics and data within it, there are bound to be new learning materials for each individual. The challenge is getting people to be aware of it as well as contribute to it. I&amp;rsquo;m still working out how best to approach this challenge.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Make the most of your Chat Channels</title>
    <link rel="alternate" href="https://kevinjalbert.com/make-the-most-of-your-chat-channels/"/>
    <id>https://kevinjalbert.com/make-the-most-of-your-chat-channels/</id>
    <updated>2017-11-22T23:23:12-05:00</updated>
    <published>2017-06-30T19:53:20-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">Persisted chat channels communication platform, which by its nature, has little guidance in how you organize channels. To ensure that everyone is making the most of channels, I'll provided some tips and suggestions based on my experiences.</description>
    <content type="html">&lt;p&gt;&lt;img width="2048" height="1371" src="/images/2017-06-30-make-the-most-of-your-chat-channels/communication-tower.jpg" /&gt;
&lt;em&gt;&lt;a href="https://flic.kr/p/finMno"&gt;Communication Tower&lt;/a&gt; by &lt;a href="https://www.flickr.com/photos/95876508@N02/"&gt;Cocoy Pusung&lt;/a&gt;, on Flickr&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Organizations tend to use some instant messaging platform in addition to email. Ideally, the chosen platform permeates throughout the ranks of the organization instead of having fractured communication between members. The real-time and group collaborative nature of these messaging platforms are quite appealing.&lt;/p&gt;

&lt;p&gt;I have personally used a couple of messaging platform so far (i.e., Hipchat, Gitter, Discord, Slack). Overall, they all offer the concept of channels. Channels are simply persisted chat &lt;em&gt;rooms&lt;/em&gt; in which members can communicate asynchronously. Topics and names of channels are left up to the members who use them.&lt;/p&gt;

&lt;p&gt;My goal is to outline some steps to better foster an effective use of channels in your messaging platform of choice. I am currently using Slack at theScore, and so the context of this post will be within Slack.&lt;/p&gt;

&lt;h1&gt;The Cleanse&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Macaitis recommends that if no one has used a channel for sixty days, it’s best to archive it. &amp;ndash; &lt;a href="https://expand.openviewpartners.com/former-slack-cmo-bill-macaitis-on-how-slack-uses-slack-868ffb495b71"&gt;Former Slack CMO, Bill Macaitis, on How Slack Uses Slack&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;An organization that uses chat channels for communication will accrue an abundance of such. Some of these channels are used more frequently than others. To keep things slightly under control, you should routinely clean the channels. As to &lt;em&gt;who&lt;/em&gt; should be doing this, I would say everyone should try to keep their communication platform clean. There are a few benefits to this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Keeps a more narrow focus within the organization&lt;/li&gt;
&lt;li&gt;Easier for users to keep a handle on their channels&lt;/li&gt;
&lt;li&gt;Newcomers feel less overwhelmed at the number of channels&lt;/li&gt;
&lt;li&gt;Less ambiguity on where conversations/information should be put&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Archiving channels doesn&amp;rsquo;t have to be perfect, although there will be clear choices. If the need of the channel arises again, it can be recreated/unarchived as needed.&lt;/p&gt;

&lt;h1&gt;Types of Channels&lt;/h1&gt;

&lt;p&gt;Channels tend to fall under specific categories that define their behaviour or purpose. For example, &lt;a href="https://slack.global.ssl.fastly.net/5ccb/pdfs/admins_guide.pdf"&gt;Slack provides a guideline&lt;/a&gt; on what these channel types are:&lt;/p&gt;

&lt;h2&gt;Global&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;i.e., #general, #announcements, #everyone&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A global channel is one that &lt;em&gt;everyone&lt;/em&gt; is apart of. Normally this would be a general channel, however productivity can be limited depending on the number of members &amp;ndash; it&amp;rsquo;s more of a social channel. A common use case for using a global channel is for organizational announcements.&lt;/p&gt;

&lt;h2&gt;Location&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;i.e., #toronto, #ontario, #canada&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;An organization might be spread across many locations. These channels offer a way to group conversations that pertain to specific locations. How to name these channels depends on how your organization is structured geographically &amp;ndash; it might be based on cities, regions, or even offices within a city.&lt;/p&gt;

&lt;h2&gt;Team&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;i.e., #engineering, #engineering-ios, #sales, #designers&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These channels are rather important in facilitating communication within teams. Realistically you would have high-level groups such as &lt;em&gt;#engineering&lt;/em&gt; that all your engineers are apart of. It would also be ideal to create &lt;em&gt;sub-teams&lt;/em&gt; to accommodate specializations such as &lt;em&gt;#engineering-android&lt;/em&gt; and &lt;em&gt;#engineering-web&lt;/em&gt;. By following this naming convention for teams and sub-teams, the channels are &lt;em&gt;grouped&lt;/em&gt; and sorted through the naming convention.&lt;/p&gt;

&lt;h2&gt;Project&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;i.e., #sports-app, #chat-bot, #squadup&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Often projects are underway. To help communication within that project, which might include individuals across different teams, a project channel is useful. As projects come and go, it might be worth archiving channels for projects that are no longer current.&lt;/p&gt;

&lt;h2&gt;Topical&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;i.e., #soccer, #javascript, #anime&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To me, these are the interesting channels! The previously mentioned channels types were more geared towards business communication, and generally are easily formed around the business needs. Topical channels could be on anything that interests a group of people. Generally, these channels are organically formed within an organization.&lt;/p&gt;

&lt;h2&gt;Temporary&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;i.e., #xmas-party, #offsite-retreat, #brainstorm-session&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These channels are short-lived and generally used for time-sensitive events. They have a specific purpose, and rarely offer much value after that purpose is completed. These channels could be deleted or archived when they are no longer needed. Channels are &lt;em&gt;cheap&lt;/em&gt; to create, and so people shouldn&amp;rsquo;t be worried about making one-off channels to help them accomplish specific tasks.&lt;/p&gt;

&lt;h1&gt;Organizing Channels&lt;/h1&gt;

&lt;p&gt;As we saw there are many categories of channels. To help with the organization of the multiple channels, a naming convention could be used.&lt;/p&gt;

&lt;p&gt;One suggestion is to prefix all team channels with &lt;code&gt;team-&lt;/code&gt; (i.e., &lt;em&gt;#team-engineering&lt;/em&gt;). The same could be done with project channels using &lt;code&gt;project-&lt;/code&gt; (i.e., &lt;em&gt;#project-esports&lt;/em&gt;). The actual prefix doesn&amp;rsquo;t matter as long as it is unique (enough) and consistent. A benefit is that channels are ordered alphanumerically, making it easier to browse active teams/projects. If you wanted, you could even take the same approach with topics (i.e., &lt;em&gt;#topic-soccer&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Another idea is to have a &lt;em&gt;#meta&lt;/em&gt; channel where you can talk about improving the use of the platform itself. For example, new topic channels can be posted there, same with renames and such. Ensure everyone is a part of the channel so information travels. If there is support for it, you could also pin/sticky some guidelines on the platform (i.e., link to this article).&lt;/p&gt;

&lt;h1&gt;Topical Channels (at theScore)&lt;/h1&gt;

&lt;p&gt;As previously mentioned, topical channels are the interesting channels that I want to touch on more here. I&amp;rsquo;ll just say that this is coming from an software organization&amp;rsquo;s perspective, as I am a part of theScore engineering team.&lt;/p&gt;

&lt;p&gt;Here are a few of our topical channels:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;#ping-pong&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;#overwatch&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;#pokemon-go&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;#podcasts&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;#board-games&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;#food&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While these channels do provide topical information on their specific topics, we didn&amp;rsquo;t really have engineering topic channels.&lt;/p&gt;

&lt;h2&gt;Birth of Engineering Topical Channels&lt;/h2&gt;

&lt;p&gt;We were doing some recent work with &lt;a href="https://facebook.github.io/react/"&gt;React&lt;/a&gt; and &lt;a href="http://graphql.org/"&gt;GraphQL&lt;/a&gt;, and we saw the birth of two engineering topical channels:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;#graphql&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;#react&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before this work, we did not &lt;em&gt;really&lt;/em&gt; have engineering topical channels. This caused slight inefficiencies in the flow of knowledge through our engineering team. We made these new channels known at the engineering level, and also invited people who are actively working in the areas. This approach injected people who cared about the topic into the channel. As we go about our day and we find something interesting related to one of these topics, it becomes easy to drop that information into the channel. In addition, more specific questions can be asked in these channels as their topic is fairly narrow.&lt;/p&gt;

&lt;p&gt;Eventually, you end up seeing people who are not &lt;em&gt;directly&lt;/em&gt; working in that topic area, but are still in the channel. To me this suggests people have an interest.&lt;/p&gt;

&lt;h2&gt;Educational Value of Topical Communication&lt;/h2&gt;

&lt;p&gt;These specific topical channels on programming languages/frameworks/concepts are extremely beneficial to individuals, and the organization.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Provides a place for focused conversations to take place. For example, if someone had a general GraphQL question where do you go to ask it? Possibly in one our engineering channels, or maybe a specific team that is using it? In this case, having a dedicated topical channel for &lt;em&gt;#graphql&lt;/em&gt; would be beneficial.&lt;/li&gt;
&lt;li&gt;Promotes people to widen their interests, as they can simply join a channel and &lt;em&gt;slowly&lt;/em&gt; absorb information. For example, if I was interested in &lt;em&gt;#machine-learning&lt;/em&gt;, I could join the channel and occasionally I&amp;rsquo;ll see people post links to articles, conference talks, and just general conversation on the topic.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is great educational value in these channels, especially in larger organizations where there are many teams and projects. These channels offer a place to share findings and communication to prevent knowledge silos.&lt;/p&gt;

&lt;h2&gt;Effective Slack Plan&lt;/h2&gt;

&lt;p&gt;Now at theScore, this is our plan in improving our usage of Slack channels:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Archive channels with no activity in the last 60 days&lt;/li&gt;
&lt;li&gt;Rename team channels with the &lt;code&gt;team-&lt;/code&gt; prefix&lt;/li&gt;
&lt;li&gt;Rename project channels with the &lt;code&gt;proj-&lt;/code&gt; prefix&lt;/li&gt;
&lt;li&gt;Create a 2-level hierarchy for teams (i.e., &lt;em&gt;#eng&lt;/em&gt;, #eng-ios)&lt;/li&gt;
&lt;li&gt;Create engineering topical channels (i.e., &lt;em&gt;#rails&lt;/em&gt;, &lt;em&gt;#android&lt;/em&gt;, &lt;em&gt;#swift&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Create a &lt;em&gt;#meta&lt;/em&gt; channel (along with a note to some channel conventions)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With routine maintenance, we will keep our Slack channels focused and organized. Hopefully we will see the benefit to education/knowledge sharing with the increased organization of our chat channels.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Create your own Pronto Runner</title>
    <link rel="alternate" href="https://kevinjalbert.com/create-your-own-pronto-runner/"/>
    <id>https://kevinjalbert.com/create-your-own-pronto-runner/</id>
    <updated>2017-11-22T23:23:12-05:00</updated>
    <published>2017-05-30T19:53:20-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">Pronto runners provides an automatic mechanism to find offenses in code reviews. Learn the essentials of pronto runners so that you can build your own.</description>
    <content type="html">&lt;p&gt;&lt;img width="1280" height="857" src="/images/2017-05-30-create-your-own-pronto-runner/robot.jpg" /&gt;
&lt;em&gt;By Vanillase (Own work) &lt;a href="http://creativecommons.org/licenses/by-sa/3.0"&gt;CC BY-SA 3.0&lt;/a&gt;, via &lt;a href="https://commons.wikimedia.org/wiki/File:ASIMO_Conducting_Pose_on_4.14.2008.jpg"&gt;Wikimedia Commons&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;What is Pronto?&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://github.com/prontolabs/pronto"&gt;Pronto&lt;/a&gt; is a tool that provides an automated code review over new changes in a git branch. It is typically used in continuous integration as a way to provide feedback on a pull/merge request. It is configurable in how it provides feedback, through the use of &lt;em&gt;formatters&lt;/em&gt;. For example, pronto on GitHub could &lt;a href="https://github.com/prontolabs/pronto/blob/master/lib/pronto/formatter/github_pull_request_formatter.rb"&gt;comment directly on the offending line&lt;/a&gt;, use &lt;a href="https://github.com/prontolabs/pronto/blob/master/lib/pronto/formatter/github_status_formatter.rb"&gt;pull request status checks&lt;/a&gt;, or even the recent &lt;a href="https://github.com/prontolabs/pronto/blob/master/lib/pronto/formatter/github_pull_request_review_formatter.rb"&gt;pull request review&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Pronto uses the concept of &lt;em&gt;runners&lt;/em&gt; to indicate what pronto will use to look for offenses during a code review. Generally, runners act as wrappers around existing tools. There are a number of &lt;a href="https://github.com/prontolabs/pronto#runners"&gt;open source runners&lt;/a&gt; available, and for the most part they will provide what you need. In some cases you&amp;rsquo;ll want something different, which does not &lt;em&gt;yet&lt;/em&gt; exist as a runner. This is where you can create a new runner to fill the gap.&lt;/p&gt;

&lt;h1&gt;What is a Runner&amp;rsquo;s Job?&lt;/h1&gt;

&lt;p&gt;Pronto runners are responsible for parsing out offenses and matching them with lines from a git patch. These offenses normally are the result of a tool that the runner is using (i.e., a linter). The end goal is that the runner sends messages containing the patch line change and the offense to pronto. There are two methods that I&amp;rsquo;ve seen when approaching a pronto runner, and are dictated by the following constraints:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The tool can be run on individual files.&lt;/li&gt;
&lt;li&gt;The tool needs be run with the context of the whole code base.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The second option could be used regardless, although when the size of your codebase increases the number of files that have to be processed would grow as well. Ideally, you would want the runner to be as quick as possible, so running the tool over the least amount of files would help accomplish that. In addition, there would be less error noise produced from non-changed files.&lt;/p&gt;

&lt;p&gt;In my experience, when creating &lt;a href="https://github.com/kevinjalbert/pronto-stylelint"&gt;pronto-stylelint&lt;/a&gt; and &lt;a href="https://github.com/kevinjalbert/pronto-flow"&gt;pronto-flow&lt;/a&gt;, I used existing pronto runners as my base. I would recommend the same when starting a new runner. Pick one as your base (which follows the approach you need) and modify as necessary. Again, most pronto runners are fairly straight forward, and usually consist of one file.&lt;/p&gt;

&lt;h1&gt;Examining a Runner&lt;/h1&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at &lt;a href="https://github.com/prontolabs/pronto-rubocop/blob/v0.8.1/lib/pronto/rubocop.rb"&gt;pronto-rubocop&lt;/a&gt; and make a few notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The class inherits from &lt;code&gt;Pronto::Runner&lt;/code&gt;, which provides the patch information along with &lt;a href="https://github.com/prontolabs/pronto/blob/v0.8.2/lib/pronto/runner.rb"&gt;other methods&lt;/a&gt; that you can use within your runner.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#initialize&lt;/code&gt; is setting up any custom configurations, as well as creating the &lt;code&gt;Rubocop::Runner&lt;/code&gt; instance.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#run&lt;/code&gt; is the &lt;a href="https://github.com/prontolabs/pronto/blob/v0.8.2/lib/pronto/runners.rb#L20"&gt;entry point of the runner&lt;/a&gt; &amp;ndash; this is where all your logic can start to come into play.&lt;/li&gt;
&lt;li&gt;In pronto-rubocop, &lt;code&gt;#run&lt;/code&gt; is selecting all the patch information that pronto provides it, and only processing (i.e., run rubocop and send messages) those which are valid (i.e., ruby file that has a change).&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;#inspect&lt;/code&gt; method processes each patch with rubocop. The reported offenses from rubocop get matched up with the patch file/line. When a match is found then &lt;code&gt;#new_message&lt;/code&gt; is called.&lt;/li&gt;
&lt;li&gt;The output of a pronto runner is to create instances of &lt;code&gt;Pronto::Message&lt;/code&gt;, which requires &lt;a href="https://github.com/prontolabs/pronto/blob/master/lib/pronto/message.rb#L7-L19"&gt;specific data inputs&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following is a stripped down and commented version of pronto-rubocop:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'pronto'&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'rubocop'&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Pronto&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Rubocop&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Runner&lt;/span&gt;
    &lt;span class="sr"&gt;//&lt;/span&gt; &lt;span class="no"&gt;Required&lt;/span&gt; &lt;span class="sb"&gt;`#run`&lt;/span&gt; &lt;span class="nb"&gt;method&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="vi"&gt;@patches&lt;/span&gt;

      &lt;span class="sr"&gt;//&lt;/span&gt; &lt;span class="no"&gt;Loop&lt;/span&gt; &lt;span class="n"&gt;over&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;patches&lt;/span&gt; &lt;span class="n"&gt;passed&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;pronto&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="nb"&gt;select&lt;/span&gt; &lt;span class="n"&gt;valid&lt;/span&gt; &lt;span class="n"&gt;ones&lt;/span&gt;
      &lt;span class="sr"&gt;//&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;inspect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;possibly&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
      &lt;span class="vi"&gt;@patches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;valid_patch?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;inspect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;compact&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;valid_patch?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;additions&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

      &lt;span class="sr"&gt;//&lt;/span&gt; &lt;span class="no"&gt;Return&lt;/span&gt; &lt;span class="n"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;determine&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;valid&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;runner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
      &lt;span class="nf"&gt;/&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;,&lt;/span&gt; &lt;span class="n"&gt;whether&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;included&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;runner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="nf"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inspect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="sr"&gt;//&lt;/span&gt; &lt;span class="no"&gt;Process&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;acquire&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;generated&lt;/span&gt; &lt;span class="n"&gt;offenses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
      &lt;span class="nf"&gt;processed_source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;processed_source_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;offences&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@inspector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:inspect_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;processed_source&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;first&lt;/span&gt;

      &lt;span class="sr"&gt;//&lt;/span&gt; &lt;span class="no"&gt;Filter&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;offenses&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;those&lt;/span&gt; &lt;span class="n"&gt;which&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt;
      &lt;span class="sr"&gt;//&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="no"&gt;If&lt;/span&gt; &lt;span class="n"&gt;so&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;said&lt;/span&gt; &lt;span class="n"&gt;information&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
      &lt;span class="nf"&gt;offences&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="ss"&gt;:disabled?&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;offence&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;added_lines&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new_lineno&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;offence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;line&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;new_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;offence&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;new_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;offence&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new_file&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:path&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="n"&gt;level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;offence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;severity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="sr"&gt;//&lt;/span&gt; &lt;span class="no"&gt;Symbol&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;offence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

      &lt;span class="nf"&gt;/&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="no"&gt;Required&lt;/span&gt; &lt;span class="n"&gt;construct&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;pronto&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
      &lt;span class="nf"&gt;/&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="no"&gt;The&lt;/span&gt; &lt;span class="sb"&gt;`line`&lt;/span&gt; &lt;span class="n"&gt;here&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="n"&gt;extracted&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="vi"&gt;@patch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
      &lt;span class="no"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;offence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;processed_source_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="sr"&gt;//&lt;/span&gt; &lt;span class="no"&gt;Rubocop&lt;/span&gt; &lt;span class="n"&gt;processing&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="nf"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;Building a Runner&lt;/h1&gt;

&lt;p&gt;As previously mentioned, most pronto runners are simply wrappers for an existing tool and the whole runner itself is quite small. Given that you inherit from &lt;code&gt;Pronto::Runner&lt;/code&gt;, the only method you need to implement is &lt;code&gt;#run&lt;/code&gt;. There is a lot of flexibility in what your runner can do.&lt;/p&gt;

&lt;p&gt;Together let&amp;rsquo;s build a runner that flags lines that contain one of the &lt;a href="https://en.wikipedia.org/wiki/Seven_dirty_words"&gt;seven dirty words&lt;/a&gt;. I decided to use &lt;a href="https://github.com/kevinjalbert/pronto-stylelint"&gt;pronto-stylelint&lt;/a&gt; as my base, which I then pulled out everything except the essentials:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'pronto'&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'shellwords'&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Pronto&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DirtyWords&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Runner&lt;/span&gt;
    &lt;span class="no"&gt;DIRTY_WORDS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'shit'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'piss'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'fuck'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'cunt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'cocksucker'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'motherfucker'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'tits'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="vi"&gt;@patches&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="vi"&gt;@patches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;zero?&lt;/span&gt;

      &lt;span class="vi"&gt;@patches&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;additions&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;inspect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;compact&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="kp"&gt;private&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;git_repo_path&lt;/span&gt;
      &lt;span class="vi"&gt;@git_repo_path&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="no"&gt;Rugged&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Repository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;discover&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;expand_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Dir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;pwd&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;workdir&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inspect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;offending_line_numbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="n"&gt;patch&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;added_lines&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new_lineno&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;line_number&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;new_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Avoid using one of the seven dirty words'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;new_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;offence&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new_file&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:path&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="n"&gt;level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:warning&lt;/span&gt;

      &lt;span class="no"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;offence&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;offending_line_numbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;line_numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

      &lt;span class="no"&gt;Dir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;git_repo_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="n"&gt;escaped_file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Shellwords&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;escape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new_file_full_path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;escaped_file_path&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;with_index&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_num&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
          &lt;span class="n"&gt;line_numbers&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;line_num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="no"&gt;DIRTY_WORDS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;any?&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;downcase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;

        &lt;span class="n"&gt;line_numbers&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;#offending_line_numbers&lt;/code&gt; methods is where the check for a &lt;em&gt;dirty word&lt;/em&gt; occurs. When an offending line is found, we flag the line number for that file to be used in &lt;code&gt;#new_message&lt;/code&gt;. Overall, it is not that hard to put together a simple pronto runner. To look at the end result of this pronto runner, it is open sourced at &lt;a href="https://github.com/kevinjalbert/pronto-dirty_words"&gt;pronto-dirty_words&lt;/a&gt;. Never forget it is always possible to add configuration files and external tools to a runner.&lt;/p&gt;

&lt;h1&gt;Pronto all the things&lt;/h1&gt;

&lt;p&gt;To this date, I have created two useful pronto runners (&lt;em&gt;dirty words&lt;/em&gt; was more of a demo for this post). I have personally been using pronto for several years, and I will continue to use it. The ecosystem of runners continues to grow. I hope that this post helps others in creating new runners that will benefit everyone. Keep an eye out for tools that could be wrapped in a pronto runner &amp;ndash; maybe you can help add to the set of runners!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Bluetooth Connection/Battery Script for macOS</title>
    <link rel="alternate" href="https://kevinjalbert.com/bluetooth-connection-battery-script-for-macos/"/>
    <id>https://kevinjalbert.com/bluetooth-connection-battery-script-for-macos/</id>
    <updated>2017-11-22T23:23:12-05:00</updated>
    <published>2017-04-08T19:53:20-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">Using AppleScript to simplify connecting bluetooth earphones to macOS.</description>
    <content type="html">&lt;p&gt;&lt;img width="4032" height="3024" src="/images/2017-04-09-bluetooth-connection-battery-script-for-macos/beatsx.jpg" /&gt;
&lt;em&gt;My BeatsX Earphones&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I recently purchased a pair of &lt;a href="http://www.apple.com/ca/shop/product/MLYE2LL/A/beatsx-earphones-black"&gt;BeatsX Earphones&lt;/a&gt; as I wanted to stop dealing with wired earbuds. For some reason, the wired connections always stopped working properly after a number of months. I supect it is just the stress on the wire while in my pocket during my commute.&lt;/p&gt;

&lt;p&gt;When arriving at work, or really anytime I am transitioning from iPhone to MacBook Pro, I have to manually connect my BeatsX to the MacBook Pro. I wanted to automate this process, down to a simple command. If the BeatsX are in range and on they would initiate the connection process to my machine. In addition, it would be nice to have a way to monitor the battery level using a similar process.&lt;/p&gt;

&lt;p&gt;Looking around, I couldn&amp;rsquo;t find any way through a command-line interface to do what I wanted. I eventually figured out that I could use macOS&amp;rsquo;s &lt;a href="https://en.wikipedia.org/wiki/AppleScript"&gt;AppleScript&lt;/a&gt; to automate the menu navigation.&lt;/p&gt;

&lt;p&gt;The following script will attempt to connect to the desired device (i.e., BeatsX by name). If it is already connected then it will retrieve the battery level.&lt;/p&gt;
&lt;pre class="highlight applescript"&gt;&lt;code&gt;&lt;span class="nb"&gt;activate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"SystemUIServer"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;deviceName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Kevin Jalbert's BeatsX"&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;tell&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"System Events"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="k"&gt;tell&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;process&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"SystemUIServer"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;bluetoothMenu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;menu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;bar&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;item&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;menu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;bar&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;whose&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;description&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;contains&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"bluetooth"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="k"&gt;tell&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;bluetoothMenu&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nv"&gt;click&lt;/span&gt;&lt;span class="w"&gt;

      &lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;deviceMenuItem&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;menu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;item&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;deviceName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;menu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="k"&gt;tell&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;deviceMenuItem&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nv"&gt;click&lt;/span&gt;&lt;span class="w"&gt;

        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;exists&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;menu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;item&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Connect"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;menu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nv"&gt;click&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;menu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;item&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Connect"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;menu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Connecting..."&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;batteryLevelMenuItem&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;menu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;item&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;menu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="k"&gt;tell&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;batteryLevelMenuItem&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;batteryLevelText&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;batteryLevelMenuItem&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;tell&lt;/span&gt;&lt;span class="w"&gt;

          &lt;/span&gt;&lt;span class="na"&gt;key code&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;-- esc key&lt;/span&gt;&lt;span class="w"&gt;

          &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;batteryLevelText&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;tell&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;tell&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;tell&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;tell&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This on its own is a nice win and works as desired. Now, I&amp;rsquo;m a heavy user of &lt;a href="https://www.alfredapp.com/"&gt;Alfred&lt;/a&gt; and I quickly threw together a workflow that uses this script. I now get a notification during connection, and repeated invokations will display the battery level.&lt;/p&gt;

&lt;p&gt;&lt;img width="2104" height="632" src="/images/2017-04-09-bluetooth-connection-battery-script-for-macos/alfred-workflow.gif" /&gt;
&lt;em&gt;My BeatsX Alfred workflow&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Cut Code Review Noise on GitHub</title>
    <link rel="alternate" href="https://kevinjalbert.com/cut-code-review-noise-on-github/"/>
    <id>https://kevinjalbert.com/cut-code-review-noise-on-github/</id>
    <updated>2017-11-22T23:23:12-05:00</updated>
    <published>2017-03-28T19:53:20-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">Code reviews on GitHub can be noisy and contain a lot of unnecessary chatter. We explore how to effectively coordinate code reviewing a pull request using GitHub's reactions and request review features.</description>
    <content type="html">&lt;p&gt;&lt;img width="1024" height="682" src="/images/2017-03-28-cut-code-review-noise-on-github/scissors.jpg" /&gt;
&lt;em&gt;&lt;a href="https://www.flickr.com/photos/9918311@N02/4268582634/in/photostream/"&gt;Painting scissors with light 4 by Zechariah  Judy, on Flickr&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For this post I&amp;rsquo;m not going to detail my preferred approach for working through a source code change using GitHub&amp;rsquo;s pull requests &amp;ndash; another post will likely contain this. I&amp;rsquo;m instead going to touch on GitHub&amp;rsquo;s review requests feature, and present an effective and efficient way to handle code reviews with GitHub&amp;rsquo;s interface.&lt;/p&gt;

&lt;h1&gt;GitHub Review Requests and Reactions&lt;/h1&gt;

&lt;p&gt;GitHub, in late 2016, introduced &lt;a href="https://github.com/blog/2291-introducing-review-requests"&gt;review requests&lt;/a&gt; to their platform. This was a welcome addition to code reviewing pull requests. It exposed a mechanism to request reviews without using &lt;em&gt;@mention&lt;/em&gt; or chat to get people&amp;rsquo;s attention.&lt;/p&gt;

&lt;p&gt;GitHub made it easier to identify pull requests that require your attention by &lt;a href="https://github.com/blog/2306-filter-pull-request-reviews-and-review-requests"&gt;filtering review requests&lt;/a&gt;. Additionally, GitHub also allowed review requests to integrate with their &lt;a href="https://github.com/blog/2051-protected-branches-and-required-status-checks"&gt;protected branches&lt;/a&gt; feature. It became possible to prevent merging a pull request until at least one reviewer approved that pull request.&lt;/p&gt;

&lt;p&gt;Last year GitHub released &lt;a href="https://github.com/blog/2119-add-reactions-to-pull-requests-issues-and-comments"&gt;reactions&lt;/a&gt; to simply reduce noise in large issues and pull requests. With this now you can simply add an emoji reaction instead of a new comment.&lt;/p&gt;

&lt;p&gt;Overall, these are all incremental steps in the right direction towards the goal of a collaborative environment within GitHub. More and more, I find myself using review requests to communicate with other developers. Requesting a review now sends the appropriate notification to the individual. In the past, I would have pasted a link to the pull request in our chat room, or made an &lt;em&gt;@mention&lt;/em&gt; comment. By moving away from the old style of getting reviews, I find there is less &lt;em&gt;chatter&lt;/em&gt; and &lt;em&gt;noise&lt;/em&gt; for coordinating code reviews.&lt;/p&gt;

&lt;h1&gt;Committed Reviewers&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;m going to introduce the concept of &lt;em&gt;committed reviewers&lt;/em&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A &lt;em&gt;reviewer&lt;/em&gt; who is &lt;em&gt;committed&lt;/em&gt; to the overall quality and correctness of the pull request.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This implies that committed reviewers are individuals who give the final &lt;em&gt;approval&lt;/em&gt; for the pull request before merging.&lt;/p&gt;

&lt;p&gt;This concept might not be applicable for various projects or organizations. I do recommend it, however, as it tends to promote higher quality code ending up in your codebase.&lt;/p&gt;

&lt;p&gt;With GitHub&amp;rsquo;s request reviewers feature, this means that if you are requested, you are now a committed reviewer. The pull request cannot be merged until all committed reviewers approve it. This prevents a scenario where a reviewer could still be working through a pull request when it&amp;rsquo;s merged, wasting time and potentially missing issues. I have seen this happen when authors request numerous reviewers just to expedite the process.&lt;/p&gt;

&lt;h1&gt;Coordinating Code Reviews&lt;/h1&gt;

&lt;p&gt;Imagine we&amp;rsquo;re on a team of 4 people. You just created a pull request in GitHub. Now you want some eyes on the new changes you are proposing to put into the codebase.&lt;/p&gt;

&lt;p&gt;You recall the old ways of using an &lt;em&gt;@mention&lt;/em&gt; just to get reviewers, same with pasting the link in our chat. You don&amp;rsquo;t want to disturb the team with unnecessary noise. Instead, it is time to use the new request reviewers interface in GitHub.&lt;/p&gt;

&lt;p&gt;&lt;img width="280" height="190" src="/images/2017-03-28-cut-code-review-noise-on-github/reviewers-state-1.png" /&gt;&lt;/p&gt;

&lt;p&gt;You decide to directly request reviews from Jane and Bob, as you know they are familiar with this part of the system. You decided to request only two reviews as we have an informal rule of requiring two approvals before merging in any pull request.&lt;/p&gt;

&lt;p&gt;&lt;img width="280" height="190" src="/images/2017-03-28-cut-code-review-noise-on-github/reviewers-state-2.png" /&gt;&lt;/p&gt;

&lt;p&gt;Bob leaves a request for changes inquiring on one aspect of your code. In one of his comments he indicates that Mary had encountered a similar problem and her solution was slightly different from yours.&lt;/p&gt;

&lt;p&gt;&lt;img width="280" height="190" src="/images/2017-03-28-cut-code-review-noise-on-github/reviewers-state-3.png" /&gt;&lt;/p&gt;

&lt;p&gt;You read over the requested changes from Bob and make the corrections.&lt;/p&gt;

&lt;p&gt;Mary chimes in regarding that comment and leaves some insight there for you. You read it over and leave a GitHub Reaction to express your thanks, which indicates that you acknowledged her comment.&lt;/p&gt;

&lt;p&gt;&lt;img width="280" height="190" src="/images/2017-03-28-cut-code-review-noise-on-github/reviewers-state-4.png" /&gt;&lt;/p&gt;

&lt;p&gt;You now need to signal to Bob that you addressed his concerns so he can look at the new changes you added. Instead of getting his attention via chat or a &lt;em&gt;@mention&lt;/em&gt; comment, you can remove and request him again for a review.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Unfortunately, GitHub does not provide a one button click to request a review again from someone who is already a reviewer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Bob receives a notification that he has been requested for a review and looks over the changes, finally approving it.&lt;/p&gt;

&lt;p&gt;Jane gets back and also approves your pull request.&lt;/p&gt;

&lt;p&gt;&lt;img width="280" height="190" src="/images/2017-03-28-cut-code-review-noise-on-github/reviewers-state-5.png" /&gt;&lt;/p&gt;

&lt;p&gt;At this specific point you have the two approvals that we as a team decided is required before merging a pull requests. Mary&amp;rsquo;s in a &lt;em&gt;comment&lt;/em&gt; state, which is fine as it indicates that she is not a &lt;em&gt;committed reviewer&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;You finally get around to merging in your pull request when you notice that Mary has added herself as a reviewer. She decided to give your pull request a complete review now as a committed reviewer. The intent was communicated through the request review.&lt;/p&gt;

&lt;p&gt;&lt;img width="280" height="190" src="/images/2017-03-28-cut-code-review-noise-on-github/reviewers-state-6.png" /&gt;&lt;/p&gt;

&lt;p&gt;Even though you got two approvals, you know that Mary is committed to reviewing your pull requests. At this point you wait for her results as to not waste her time, or to potentially miss any issues she might raise.&lt;/p&gt;

&lt;p&gt;&lt;img width="280" height="190" src="/images/2017-03-28-cut-code-review-noise-on-github/reviewers-state-7.png" /&gt;&lt;/p&gt;

&lt;p&gt;Everything looks great. You have approvals across the board, so hit that merge button!&lt;/p&gt;

&lt;h2&gt;Less Noise and Wasted Time&lt;/h2&gt;

&lt;p&gt;A couple of things you might have noticed as we ran through that code review scenario:&lt;/p&gt;

&lt;p&gt;No unnecessary commenting on the pull request to indicate that an individual has acknowledged something. GitHub Reactions provide an unobtrusive way for an individual to express themselves. Often reactions are replacing low-value comments (i.e,. &lt;em&gt;+1&lt;/em&gt;, &lt;em&gt;LGTM&lt;/em&gt;, &lt;em&gt;awesome!&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;No unnecessary &lt;em&gt;@mention&lt;/em&gt; comments to indicate that someone should review the pull request. In the past, we would have &lt;em&gt;@mention&lt;/em&gt; possible reviewers in the description or as comments in the pull request. The reviewers are now clearly indicated in the reviewers section of the pull request.&lt;/p&gt;

&lt;p&gt;No unnecessary &lt;em&gt;@mention&lt;/em&gt; is needed to indicate a reviewer&amp;rsquo;s request for change has been addressed. Previously, it was common to &lt;em&gt;@mention&lt;/em&gt; a reviewer when their concerns were addressed, thus causing noise with comments.&lt;/p&gt;

&lt;p&gt;With the above points on &lt;em&gt;@mention&lt;/em&gt; you could also factor in that this communication could have been in chat (public channels or privately).&lt;/p&gt;

&lt;p&gt;Another scenario that we have encountered in the past is that the reviewer would come back preemptively to review the pull request as they noticed new commits. The problem is that sometimes new changes are still being worked on and pushed up incrementally. This can potentially waste the reviewer&amp;rsquo;s time as they have to look over more changes soon after.&lt;/p&gt;

&lt;p&gt;As a reviewer, you know that you will receive a notification via GitHub when your attention is needed for a pull request. It also becomes easier to scan pull requests for where your action is required.&lt;/p&gt;

&lt;h1&gt;Dealing with Notifications&lt;/h1&gt;

&lt;p&gt;There are a couple of options when dealing with notifications surrounding GitHub:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Built-in web notification&lt;/li&gt;
&lt;li&gt;Email notifications&lt;/li&gt;
&lt;li&gt;Third-party application (depends on operating system)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I personally never got much benefit from the web notification, however, this could just be how I consume information. Without an actual notification appearing in my notification center (macOS), information doesn&amp;rsquo;t reach me well.&lt;/p&gt;

&lt;p&gt;Email notifications are currently my preferred approach, as I can receive request review notifications via email. In addition, with email you can get fancy with filters to further reduce notification to only what you want.&lt;/p&gt;

&lt;p&gt;I use &lt;a href="https://ptsochantaris.github.io/trailer/"&gt;Trailer.app&lt;/a&gt; in addition to email. With Trailer I am able to target specific repositories for native notification. Prior to review requests, this would have been my ideal approach for dealing with notifications at my work machine. There is active development to support the recent addition of GitHub review requests and reactions.&lt;/p&gt;

&lt;p&gt;Regardless of delivery mechanism, take some time to figure how to deal with notifications. Each user will have different needs. For my case, I&amp;rsquo;m really only interested in emails about &lt;em&gt;Comments on Issues and Pull Requests&lt;/em&gt; and &lt;em&gt;Pull Request reviews&lt;/em&gt; on my &lt;em&gt;Participated Conversations&lt;/em&gt; (configured via &lt;a href="https://github.com/settings/notifications"&gt;GitHub&amp;rsquo;s Notifications&lt;/a&gt;).&lt;/p&gt;

&lt;h1&gt;Keeping it all in GitHub&lt;/h1&gt;

&lt;p&gt;Going back to the above scenario, no use of direct form of communication was used to facilitate the code review, everything was kept within GitHub. Of course, deeper discussions should use those mediums, but the key is that the coordination of the code review was kept entirely in the GitHub platform. This reduces chatter and noise that we receive throughout the day, and keeps the GitHub pull request succinct.&lt;/p&gt;

&lt;p&gt;Using review requests clearly states the next action for the reviewer and author. With both parties actively using the provided utilities in GitHub, code review collaboration becomes much more manageable.&lt;/p&gt;

&lt;hr&gt;

&lt;h1&gt;TL;DR&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;The idea is to reduce the unnecessary noise within a pull request using GitHub&amp;rsquo;s features.&lt;/li&gt;
&lt;li&gt;GitHub review requests keep state of each reviewer during the code review process.&lt;/li&gt;
&lt;li&gt;Make use of re-requesting a review when you have addressed a reviewer&amp;rsquo;s concerns.&lt;/li&gt;
&lt;li&gt;Make use of reactions to acknowledge a comment if possible.&lt;/li&gt;
&lt;li&gt;Be aware of committed reviewers and ensure everyone knows of their roles.&lt;/li&gt;
&lt;li&gt;Ensure that all committed reviewers have approved the pull request before merging.&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Find and Bury Dead Code</title>
    <link rel="alternate" href="https://kevinjalbert.com/find-and-bury-dead-code/"/>
    <id>https://kevinjalbert.com/find-and-bury-dead-code/</id>
    <updated>2017-11-22T23:23:12-05:00</updated>
    <published>2017-02-26T18:53:20-05:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">Dead code has no reason to be in a project. Dead code wastes a developer’s time and energy. Going from this it makes sense to remove the dead code and put it rest with a delete keystroke. The main problem is how to identify dead code in a living project?</description>
    <content type="html">&lt;p&gt;Dead code has no reason to be in a project. When you know it’s there, it simply nags at you to be removed. Sometimes you aren’t even sure that you have dead code. It might just be the case that every line of your codebase is being executed, which if true is great! The other scenario is that there is some dead code wasting developers’ time as they maintain it and work with it.
Going from this it makes sense to remove the dead code and put it rest with a delete keystroke. The main problem is how to identify dead code in a living project?&lt;/p&gt;

&lt;h1&gt;Finding Dead Code&lt;/h1&gt;

&lt;p&gt;In smaller projects, it’s possible to simply see and know what is dead code just from the usage and familiarity you might have with the project. Within larger projects, identifying dead code is not as straight forward. Luckily, we have tools and systems that can aid us. For the most part, we will be looking at this problem from a dynamic language perspective, primarily Ruby.&lt;/p&gt;

&lt;h2&gt;Static Analysis Tools&lt;/h2&gt;

&lt;p&gt;Static analysis tools do not run the application and only examine the source code itself. A general property of these tools is the speed and ease of use, although they come at a price of precision (i.e., missing and incorrect results). I’ll will first present a Ruby specific tool called &lt;strong&gt;&lt;em&gt;debride&lt;/em&gt;&lt;/strong&gt; and then a language agnostic tool called &lt;strong&gt;&lt;em&gt;unused&lt;/em&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/seattlerb/debride"&gt;&lt;strong&gt;&lt;em&gt;debride&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; &amp;ndash; This tool analyzes your Ruby source code and detects uncalled or dead methods. It knows of Ruby on Rails method definitions, as they are not defined in your codebase. In addition, you can provide a whitelist of methods that you know should not be flagged by the tool. This is a specific tool that is tailored to work on Ruby and Rails projects.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/joshuaclayton/unused"&gt;&lt;strong&gt;&lt;em&gt;unused&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; &amp;ndash; This tool is language agnostic. It first requires a &lt;a href="http://ctags.sourceforge.net/"&gt;&lt;em&gt;ctags&lt;/em&gt;&lt;/a&gt; file for your project, containing all the project class/method definitions and their locations. With this, &lt;em&gt;unused&lt;/em&gt; is able to scan through your project using &lt;a href="https://github.com/ggreer/the_silver_searcher"&gt;&lt;em&gt;ag&lt;/em&gt;&lt;/a&gt; for statements calling these definitions. Throughout the search, if no usage of the class/method definition is found, then that code is probably unused. In addition, there is a configuration file for further customization to reduce false positives.&lt;/p&gt;

&lt;p&gt;With both of these static analysis tools, there is a precision issue of whether or not the detected code is actually used during the execution of your project. This does not strum up immediate confidence in the results and often requires deeper investigation. Another large concern when dealing with dynamic language is class/method defined at runtime or methods that are invoked via meta programming.&lt;/p&gt;

&lt;h2&gt;Dynamic Analysis Tools&lt;/h2&gt;

&lt;p&gt;Dynamic analysis tools, unlike their static counterparts, actually need to run the source code. A general property of these tools is that they provide richer and more accurate results, although at the cost of performance (i.e., slower due to measuring at runtime). I’ll present first a Ruby specific tool called &lt;strong&gt;&lt;em&gt;coverband&lt;/em&gt;&lt;/strong&gt; and then a language agnostic tool called &lt;strong&gt;&lt;em&gt;scythe&lt;/em&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/danmayer/coverband"&gt;&lt;strong&gt;&lt;em&gt;coverband&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; &amp;ndash; The approach that &lt;em&gt;coverband&lt;/em&gt; uses could be applied to other languages, although it is a Ruby specific implementation. This tool borrows the results format of test suite coverage (i.e., how much code is exercised by your test suite), however it measures code coverage during the runtime of your application. A nice use case that &lt;em&gt;coverband&lt;/em&gt; accounts for is multiple instances of your application, it uses a &lt;em&gt;redis&lt;/em&gt; instance to hold the coverage results. There is some performance cost for using &lt;em&gt;coverband&lt;/em&gt;, as it records each line executed. If you are measuring a web application, the tool allows you to instrument a percentage of your requests. The coverage information keeps tracks of the number of times each line is hit, and this can indicate hot spots in your application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/michaelfeathers/scythe"&gt;&lt;strong&gt;&lt;em&gt;scythe&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; — The approach that &lt;em&gt;scythe&lt;/em&gt; uses is language agnostic. The basic idea is to place probes within your source code that when triggered, record the date and time to a file matching the probe’s  name. At its heart, &lt;em&gt;scythe&lt;/em&gt; is a command-line utility that reports on these files, giving you an indication of how long since the probe was last called. Currently, there are probe implementations for Java, Python and Ruby. Due to the simple contract (files which are updated when probes are triggered), it is not difficult to make &lt;em&gt;scythe&lt;/em&gt; work for other languages. The overhead using the probes is minimal and can be placed anywhere in your source code. Unfortunately, we have to use a manual process in placing and inspecting the probes.&lt;/p&gt;

&lt;p&gt;Both of the above tools took different approaches for dead code identification. In either case, the underlying source code must be executed, and usually there is setup required for the tool to work in conjunction with the running application.&lt;/p&gt;

&lt;h1&gt;Burying the Dead&lt;/h1&gt;

&lt;p&gt;Now that we know that there is a class of tools for detecting dead code, the next set of questions revolve around removing the dead code.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The tool indicates this code is dead. Can we remove it?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Recall that static vs. dynamic analysis can inspire different levels of confidence. Tools like &lt;em&gt;scythe&lt;/em&gt; or &lt;em&gt;coverband&lt;/em&gt; actually determine whether the source code in question was executed in a real environment. The problem is whether or not the tool collected enough data during execution to ensure the code in question could have been ran. It is hard to know whether or not flagged dead code is just code that is rarely ran, but still alive.&lt;/p&gt;

&lt;p&gt;With sufficient time, it should be possible to make the decision to remove the dead code. As with any change, be observant to any signals that could indicate that the removal was of live code. Given the complex scope of usage, it can be difficult to detect dead code if there are third parties using your codebase. A side bonus of removing dead code, is that any associated tests can be removed &amp;ndash; effectively speeding up your test suite.&lt;/p&gt;

&lt;h1&gt;Moving on&lt;/h1&gt;

&lt;p&gt;By removing dead code the scale of the source code shrinks ever so slightly. There is little to no point in having extra code in your project if it does not add value. There is possible arguments that if it works, there is no need to change it. I would counter that by saying that keeping dead code around is lugging around a mental burden that developers have to deal with. Dead code wastes a developer’s time and energy. Imagine having to upgrade a dependency and making changes in dead code &amp;ndash; what a waste.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Dead code wastes a developer’s time and energy.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Do be aware that there is some initial time investment in getting a system in place and learning how to identify dead code in your specific projects. In the long run, however, it is bound to save headaches in a long running project.&lt;/p&gt;

&lt;hr&gt;

&lt;h1&gt;TL;DR&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Dead code is code that is never exercised during the execution of the application.&lt;/li&gt;
&lt;li&gt;Two types of tools exist for finding dead code: Static and Dynamic analysis tools

&lt;ul&gt;
&lt;li&gt;Dead code static analysis tools observe the source code and attempt to deduce methods that are never used.&lt;/li&gt;
&lt;li&gt;Dead code dynamic analysis tools instrument the running state of the source code and record what is executed.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Only remove dead code when you are confident that it is no longer used (deeper investigation and/or let dynamic analysis tools run for longer).&lt;/li&gt;
&lt;li&gt;Less code relieves mental burden, and reduces time wasted while working in a codebase.&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Simplify the Styles, Drop the Distractions</title>
    <link rel="alternate" href="https://kevinjalbert.com/simplify-the-styles-drop-the-distractions/"/>
    <id>https://kevinjalbert.com/simplify-the-styles-drop-the-distractions/</id>
    <updated>2017-11-22T23:23:12-05:00</updated>
    <published>2017-01-31T18:53:20-05:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">During development, everyone has a preference of coding style. For the most part these preferences have no effect on the functionality of the application. It is possible that they can become a large time sink, especially in larger teams and projects. In this article we will determine how minor style differences cause negative effects, and how we can mitigate them.</description>
    <content type="html">&lt;p&gt;Everyone has preferences in how code should be structured from an aesthetic standpoint. Having creative freedom in finding your own style is a powerful and rewarding feeling. Seeing that new class/file completely written in your style can put a smile on your face. The problem is we&amp;rsquo;re often not the only developer on a project. In a team or open-source environment, it is unlikely that &lt;em&gt;everyone&lt;/em&gt; is on board with the exact coding style. It is not uncommon to see different styles in a project just because everyone has their own.&lt;/p&gt;

&lt;h1&gt;Why Care?&lt;/h1&gt;

&lt;p&gt;You might be asking &lt;em&gt;&amp;ldquo;Why Care?&amp;rdquo;&lt;/em&gt; about styles. As developers, we want to enjoy working in our codebase. If we&amp;rsquo;re constantly dealing with inconsistent styles, it becomes a mental burden. Also, during code reviews everyone might be imposing their own styles on the reviewed code. After all is said and done, it really comes down to dropping the distractions in a codebase. With a consistent style there are no stylistic arguments in code reviews, and readability increases as the taxing effort of dealing with multiple styles in the same file disappears.&lt;/p&gt;

&lt;p&gt;The following is an extreme case of stylistic inconsistencies with two functionally identical code snippets &amp;ndash; one follows a styleguide while the other does not.&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="cm"&gt;=begin
This method checks if the two args are equal
it then returns the combined value
=end&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;method_one&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;first_arg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;second_arg&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Executing method_one"&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;first_arg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;eql?&lt;/span&gt; &lt;span class="n"&gt;second_arg&lt;/span&gt;
          &lt;span class="nb"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'first_arg is the same as second_arg'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_arg&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;second_arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# This method checks if the two args are equal&lt;/span&gt;
&lt;span class="c1"&gt;# it then returns the combined value&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;method_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_arg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;second_arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'Executing method_one'&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;first_arg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;eql?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;second_arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'first_arg is the same as second_arg'&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;first_arg&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;second_arg&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hopefully, you found the second snippet more pleasant and easier to read. The second one follows a styleguide while the first one had a mis-match of style.&lt;/p&gt;

&lt;h1&gt;Starting with Styles&lt;/h1&gt;

&lt;p&gt;&lt;img alt="Mixing tabs and spaces" width="717" height="325" src="/images/2017-01-31-simplify-the-styles-drop-the-distractions/tabs-spaces-both.png" /&gt;
&lt;em&gt;[Image from the &lt;a href="http://www.emacswiki.org/emacs/TabsSpacesBoth"&gt;EmacsWiki&lt;/a&gt;, original comic by &lt;a href="http://www.duelinganalogs.com/comic/2007/04/02/hello-im-linux/"&gt;Steve Napierski&lt;/a&gt;]&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Many basic style decisions are made early when a project is started. One of two things happen:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Styles are &lt;strong&gt;implicitly determined&lt;/strong&gt; by the creator&lt;/li&gt;
&lt;li&gt;Styles are &lt;strong&gt;explicitly established&lt;/strong&gt; upfront by the creator or collaborators&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Even if the project starts with an implicit determined style, the end goal is to make it explicit. The more people that contribute to a project, the more chance their coding styles will conflict. Also, your personal coding style evolves over time and it is likely that styles within a project will &lt;em&gt;drift&lt;/em&gt;, even with a single contributor.&lt;/p&gt;

&lt;p&gt;To reduce wasted time dealing with style issues, just explicitly set a style for your project.&lt;/p&gt;

&lt;h2&gt;Picking an Explicit Style&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m willing to bet that all languages have community styleguides (if not, then that&amp;rsquo;s a great opportunity to start one!). The following are some example styleguides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;Python - PEP8 Styleguide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bbatsov/ruby-style-guide"&gt;Ruby - Community Styleguide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/airbnb/javascript"&gt;Javascript - Airbnb Styleguide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://google.github.io/styleguide/jsguide.html"&gt;Javascript - Google Styleguide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When picking a type of style, I recommend to just pick one of the already established styleguides. You might be tempted to start completely fresh and make your own styleguide individually or with other contributors. The problem with creating a fresh styleguide is that eventually there will be the discussion, &lt;em&gt;&amp;ldquo;I want the style to look like this&amp;rdquo;&lt;/em&gt;, and there will be time wasted trying to make everyone happy (which possibly will never happen). When new developers get started in a codebase they might say, &lt;em&gt;&amp;ldquo;Why do we have the style like this?&amp;rdquo;&lt;/em&gt;. This leads to a discussion regarding whether or not the styleguide should be revised, which again is a potential waste of time.&lt;/p&gt;

&lt;p&gt;You can deflect all styleguide questions if you just select a community styleguide to begin with. These styleguides have already gone through rigorous discussions within the community. One more bonus of using a popular styleguide is that it is likely that other open-source projects are using the same styleguide.&lt;/p&gt;

&lt;h2&gt;Using Linters&lt;/h2&gt;

&lt;p&gt;Linters are styleguide checkers that often provide a command line interface and editor integrations. Like previously mentioned with styleguides, there is probably one for each language (if not, what a great opportunity!). The following are some example linters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://batsov.com/rubocop/"&gt;Ruby - Rubocop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://eslint.org/"&gt;Javascript - ESLint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stylelint.io/"&gt;CSS/SCSS/LESS - Stylelint&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A styleguide and linter work hand-in-hand. Together they ensure that code that violates the styleguide is flagged before it is committed to the codebase. There really is no downside to using a linter, and in most cases the benefits far outweigh the effort to set up in your editor. I highly recommend that everyone takes advantage of linters within your editor.&lt;/p&gt;

&lt;h2&gt;Deviating from the Styleguides&lt;/h2&gt;

&lt;p&gt;If your team is completely set on having customized styles that differ from a popular styleguide, I would still encourage using one as a base. In an ideal scenario it is possible to use inheritance, where you can then inherit the rules from your choice of popular styleguide. If this isn&amp;rsquo;t possible, then the next best option is to simply copy the whole guide and use that as your base and make modifications to it.&lt;/p&gt;

&lt;p&gt;Each styleguide/linter has their own implementation and handling of their configurations. You will have to explore each and see how to deal with the inheritance. For example, &lt;a href="http://eslint.org/docs/user-guide/configuring#extending-configuration-files"&gt;ESLint&lt;/a&gt; and &lt;a href="http://rubocop.readthedocs.io/en/latest/configuration/#inheritance"&gt;Rubocop&lt;/a&gt; define how to extend/inherit from other styleguides.&lt;/p&gt;

&lt;h2&gt;Reduce the Distractions&lt;/h2&gt;

&lt;p&gt;Using a styleguide and linter, it becomes easy to identify and cut off the distractions of inconsistent styles early. If you can fix stylistic changes as you modify the underlying code, then the future you or your teammates won&amp;rsquo;t have to deal with it later. In addition, during code reviews everyone knows that all stylistic changes &lt;em&gt;should&lt;/em&gt; be taken care of, thus reducing the mental burden.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Just use a styleguide!" width="1480" height="517" src="/images/2017-01-31-simplify-the-styles-drop-the-distractions/xkcd-code-quality.png" /&gt;
&lt;em&gt;[Image from &lt;a href="https://xkcd.com/1513/"&gt;xkcd&lt;/a&gt;]&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;Applying to an Existing Project&lt;/h1&gt;

&lt;p&gt;It&amp;rsquo;s great that you want to get a consistent style in an existing project. Now comes an important decision, &lt;em&gt;&amp;ldquo;Do we apply all the style fixes immediately, or as we encounter them?&amp;rdquo;&lt;/em&gt; The answer is situational and many factors can influence what works best for your project and team.&lt;/p&gt;

&lt;p&gt;With a sweeping change, a lot of code might be modified, although nothing should be functionally different, as we are just dealing with stylistic edits. This can impact the effectiveness of &lt;code&gt;git blame&lt;/code&gt; as the latest commit might simply be &lt;em&gt;&amp;ldquo;Sweeping Style Changes&amp;rdquo;&lt;/em&gt;, and not the actual commit you were hoping for. Fortunately, there are ways to look deeper into the &lt;code&gt;git log&lt;/code&gt; and find the actual content you are looking for (i.e., &lt;a href="/git-evolution-how-did-we-get-here/"&gt;Git Evolution&lt;/a&gt;). With a sweeping change of style fixes, the project afterwards would be in a consistent state of styles.&lt;/p&gt;

&lt;p&gt;By fixing style issues as you encounter them, it leaves a lot to interpretation by team members. &lt;em&gt;&amp;ldquo;Do I fix the whole file when I touch a line within it?&amp;rdquo;&lt;/em&gt;, &lt;em&gt;&amp;ldquo;Do I only fix styles for the lines I touch?&amp;rdquo;&lt;/em&gt;. In either case the commits will contain two concepts now going forward: feature/bug changes and style changes. Not only does this muddy the usefulness of looking back in the commit history, but code reviews now also contain the style element that everyone has to look at. Overall, the distractions of incrementally dealing with style changes never stop. Even while editing or reading the codebase you will subconsciously see the inconsistent style changes which leads to more distractions.&lt;/p&gt;

&lt;p&gt;In my personal opinion, rip the band-aid off and just make a sweeping change of style fixes to put your project in a pristine state. In a legacy system, it might make sense to simply do the incremental approach as it would not be often that one would make changes in the battle-tested system.&lt;/p&gt;

&lt;h1&gt;TL;DR&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Use a styleguide and linter for any software project to help reduce distractions on styles:

&lt;ul&gt;
&lt;li&gt;If possible pick a popular styleguide to avoid arguments/discussions on styles.&lt;/li&gt;
&lt;li&gt;Use a linter in your editor to cut off stylistic distractions early (i.e., before code reviews).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The sooner a project completely adheres to the styleguide:

&lt;ul&gt;
&lt;li&gt;The less stylistic distractions are encountered while reading through the codebase, and&lt;/li&gt;
&lt;li&gt;The less work in keeping up the proper styles.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;If possible, use a sweeping approach to applying style fixes:

&lt;ul&gt;
&lt;li&gt;The minimal impact on &lt;code&gt;git blame&lt;/code&gt; can be resolved with proper tools.&lt;/li&gt;
&lt;li&gt;Opposed to using the incremental style of fixes, the distractions are reduced within code reviews and edits.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>
