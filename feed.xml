<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kevin Jalbert</title>
  <link href="https://kevinjalbert.com"/>
  <updated>2018-02-26T18:53:20-05:00</updated>
  <author>
    <name>Kevin Jalbert</name>
  </author>
  <id>https://kevinjalbert.com</id>
  <entry>
    <title>Rails ActiveStorage Configuration for Minio</title>
    <link rel="alternate" href="https://kevinjalbert.com/rails-activestorage-configuration-for-minio/"/>
    <id>https://kevinjalbert.com/rails-activestorage-configuration-for-minio/</id>
    <updated>2018-02-26T21:28:39-05:00</updated>
    <published>2018-02-26T18:53:20-05:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">Trying to configure Rails ActiveStorage for Minio as your storage provider? The default configuration does not work out of the box, so read on to see what configuration options you are missing.</description>
    <content type="html">&lt;p&gt;&lt;img width="1024" height="768" src="/images/2018-02-26-rails-activestorage-configuration-for-minio/birdy-boxcar.jpg" /&gt;
&lt;em&gt;&lt;a title="birdy boxcar" href="https://flickr.com/photos/agent_ladybug/661200957"&gt;birdy boxcar&lt;/a&gt; by &lt;a href="https://flickr.com/people/agent_ladybug"&gt;b.ug&lt;/a&gt; is licensed under &lt;a href="https://creativecommons.org/licenses/by-nc/2.0/"&gt;CC BY-NC&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You are looking at Rails 5.2 and its shiny new &lt;a href="https://github.com/rails/rails/tree/master/activestorage"&gt;ActiveStorage&lt;/a&gt; &amp;ndash; a built-in abstraction/mechanism to handle file storage. You decide to give it a try and remove a dependency you normally use (i.e., &lt;a href="https://github.com/carrierwaveuploader/carrierwave"&gt;CarrierWave&lt;/a&gt; or &lt;a href="https://github.com/thoughtbot/paperclip"&gt;Paperclip&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;For some reason, you decide to use &lt;a href="https://minio.io/"&gt;Minio&lt;/a&gt; &amp;ndash; an Amazon S3 compatible open source project.&lt;/p&gt;

&lt;p&gt;Looking through the ActiveStorage &lt;a href="http://edgeguides.rubyonrails.org/active_storage_overview.html"&gt;documentation&lt;/a&gt; and &lt;a href="https://github.com/rails/rails/tree/master/activestorage"&gt;repository&amp;rsquo;s readme&lt;/a&gt;, you figure out how to get everything working locally using ActiveStorage&amp;rsquo;s &lt;code&gt;local&lt;/code&gt; service.&lt;/p&gt;

&lt;p&gt;Now it is time to try running everything, but with Minio as your file storage. Looking at your &lt;code&gt;config/storage.yml&lt;/code&gt; you&amp;rsquo;ll see the template for Amazon&amp;rsquo;s S3:&lt;/p&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt; &lt;span class="s"&gt;amazon&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
   &lt;span class="s"&gt;service&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;S3&lt;/span&gt;
   &lt;span class="s"&gt;access_key_id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;%= Rails.application.credentials.dig(:aws, :access_key_id) %&amp;gt;&lt;/span&gt;
   &lt;span class="s"&gt;secret_access_key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;%= Rails.application.credentials.dig(:aws, :secret_access_key) %&amp;gt;&lt;/span&gt;
   &lt;span class="s"&gt;region&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;us-east-1&lt;/span&gt;
   &lt;span class="s"&gt;bucket&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;your_own_bucket&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;Configuration Options&lt;/h1&gt;

&lt;p&gt;Now it&amp;rsquo;s time to figure out how to use the S3 service in conjunction with your Minio server&amp;hellip;&lt;/p&gt;

&lt;h2&gt;Region&lt;/h2&gt;

&lt;p&gt;Your Minio server doesn&amp;rsquo;t really support regions like Amazon&amp;rsquo;s S3. Just keep it as &lt;code&gt;us-east-1&lt;/code&gt; or your closest S3 region (although it really could be any string). From what I&amp;rsquo;ve seen, this is just used at the Amazon S3-level, and for your hosted Minio server it does not matter.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;region&lt;/code&gt; value is simply used to satisfy ActiveStorage and the &lt;code&gt;aws-sdk-s3&lt;/code&gt; gem. If you omit the &lt;code&gt;region&lt;/code&gt; option you get the following exception &lt;code&gt;missing keyword: region (ArgumentError)&lt;/code&gt;. If you use an empty string for &lt;code&gt;region&lt;/code&gt; you will see &lt;code&gt;missing region; use :region option or export region name to ENV[&amp;#39;AWS_REGION&amp;#39;] (Aws::Errors::MissingRegionError)&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Endpoint&lt;/h2&gt;

&lt;p&gt;Your Minio server is hosted at some URL (i.e., https://minio123.com), so you&amp;rsquo;ll need to inform ActiveStorage&amp;rsquo;s S3 service about this &lt;em&gt;endpoint&lt;/em&gt;. Luckily, it is just a matter of adding the URL endpoint to your configuration:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  endpoint: "https://minio123.com" # Points to your Minio server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also use ports on the endpoint (i.e., &amp;ldquo;http://localhost:9000&amp;rdquo;).&lt;/p&gt;

&lt;h2&gt;Force Path Style&lt;/h2&gt;

&lt;p&gt;So you have the endpoint and region all setup from a configuration standpoint. Your Minio server is also up and running, along with a bucket, &lt;code&gt;your_own_bucket&lt;/code&gt;. You try to upload a file and see the following exception:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Aws::Errors::NoSuchEndpointError (Encountered a `SocketError` while attempting to connect to:

  https://you_own_bucket.minio123.com/RJioqjrTT4VmFobw5FhXkSby

This is typically the result of an invalid `:region` option or a
poorly formatted `:endpoint` option.

* Avoid configuring the `:endpoint` option directly. Endpoints are constructed
  from the `:region`. The `:endpoint` option is reserved for connecting to
  non-standard test endpoints.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hmm&amp;hellip; Well that didn&amp;rsquo;t work out. If we look at the URL (https://your_own_bucket.minio123.com), we can see that it uses a bucket subdomain approach. However, Minio expects the bucket after the domain (i.e., https://minio123.com/your_own_bucket). Again, fortunately there is an configuration option we can add to &lt;em&gt;force this path style&lt;/em&gt;:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  force_path_style: true # Needed to be compliant with how Minio serves the bucket
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;Complete Configuration&lt;/h1&gt;

&lt;p&gt;At this point we covered all the configuration &lt;em&gt;gotchas&lt;/em&gt; to set up ActiveStorage with Minio. Namely, the missing and (mostly undocumented) &lt;code&gt;endpoint&lt;/code&gt; and &lt;code&gt;force_path_style&lt;/code&gt; options. The following is a complete configuration.&lt;/p&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt; &lt;span class="s"&gt;minio&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
   &lt;span class="s"&gt;service&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;S3&lt;/span&gt;
   &lt;span class="s"&gt;access_key_id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;%= Rails.application.credentials.dig(:minio, :access_key_id) %&amp;gt;&lt;/span&gt;
   &lt;span class="s"&gt;secret_access_key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;%= Rails.application.credentials.dig(:minio, :secret_access_key) %&amp;gt;&lt;/span&gt;
   &lt;span class="s"&gt;region&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;us-east-1&lt;/span&gt;
   &lt;span class="s"&gt;bucket&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;your_own_bucket&lt;/span&gt;
   &lt;span class="s"&gt;endpoint&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;https://minio123.com"&lt;/span&gt;
   &lt;span class="s"&gt;force_path_style&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It isn&amp;rsquo;t a bad idea to have the configuration named &lt;code&gt;minio&lt;/code&gt;, just so it is clear that it&amp;rsquo;s a Minio file storage instead of the typical Amazon S3.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Start Now: Architecture Decision Records</title>
    <link rel="alternate" href="https://kevinjalbert.com/start-now-architecture-decision-records/"/>
    <id>https://kevinjalbert.com/start-now-architecture-decision-records/</id>
    <updated>2018-02-26T21:28:39-05:00</updated>
    <published>2018-01-03T18:53:20-05:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">Stop asking questions about certain architectural decisions for a project. Implement Architecture Decision Records, and save the team and yourself future headaches.</description>
    <content type="html">&lt;p&gt;&lt;img width="1024" height="768" src="/images/2018-01-03-start-now-architecture-decision-records/filing-cabinet.jpg" /&gt;
&lt;em&gt;&lt;a title="Filing cabinet" href="https://flickr.com/photos/mightymightymatze/2150298078"&gt;Filing cabinet&lt;/a&gt; by &lt;a href="https://flickr.com/people/mightymightymatze"&gt;mightymightymatze&lt;/a&gt; is licensed under &lt;a href="https://creativecommons.org/licenses/by-nc/2.0/"&gt;CC BY-NC&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;While working on any project, you&amp;rsquo;ll eventually need to make decisions regarding the task at hand. The decision that has to be made can vary in size and impact. Often we are in the context of a team, and these decisions are made in consultation with others. As time progresses, with new and old team members moving on and off the project, we&amp;rsquo;ll start to question some of those decisions that were made in the past.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Why was it done that way?&lt;/p&gt;

&lt;p&gt;Did we not consider this alternative?&lt;/p&gt;

&lt;p&gt;What was the context when that decision was made?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Save the team and yourself future headaches and plan accordingly for these types of questions now, by starting Architecture Decision Records (ADRs) for your project.&lt;/p&gt;

&lt;h1&gt;What are ADRs?&lt;/h1&gt;

&lt;p&gt;I first read about ADRs in the &lt;a href="http://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions"&gt;documenting architecture decisions&lt;/a&gt; blog post by &lt;a href="http://thinkrelevance.com/team/members/michael-nygard"&gt;Michael Nygard&lt;/a&gt;. ADRs are a form of documentation that record any &lt;em&gt;architecturally significant&lt;/em&gt; decisions that impact a project. For an impact to be considered &lt;em&gt;architecturally significant&lt;/em&gt; within a software project context, Micheal stated:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;hellip; those that affect the structure, non-functional characteristics, dependencies, interfaces, or construction techniques.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Michael&amp;rsquo;s blog post was focused on ADRs within the context of an agile software project, but I believe it can be applied across different domains. The affected values for what a decision might impact would have to be altered to suit the appropriate domain. For example, altering the customer support workflow could constitute a decision record as it significantly changes a business process.&lt;/p&gt;

&lt;p&gt;I had recently read that &lt;a href="https://www.thoughtworks.com/radar/techniques/lightweight-architecture-decision-records"&gt;lightweight architecture decision records&lt;/a&gt; had made it into the &lt;em&gt;adopt&lt;/em&gt; ring of &lt;a href="https://www.thoughtworks.com/radar"&gt;Thoughtworks Technology Radar&lt;/a&gt; in the November 2017 edition. They note that the lightweight aspect of ADRs is to just have text/markdown files alongside software projects in their repositories.&lt;/p&gt;

&lt;p&gt;Here is an example ADR (pretty meta as it is about starting ADRs):&lt;/p&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="gh"&gt;# 1. Record architecture decisions&lt;/span&gt;

Date: 2018-01-03

&lt;span class="gu"&gt;## Status&lt;/span&gt;

Accepted

&lt;span class="gu"&gt;## Context&lt;/span&gt;

We need to record the architectural decisions made on this project.

&lt;span class="gu"&gt;## Decision&lt;/span&gt;

We will use Architecture Decision Records, as described by Michael Nygard in this article: http://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions

&lt;span class="gu"&gt;## Consequences&lt;/span&gt;

See Michael Nygard's article, linked above. For a lightweight ADR toolset, see Nat Pryce's _adr-tools_ at https://github.com/npryce/adr-tools.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I don&amp;rsquo;t want to go into technical details of ADRs, as this blog post is to bring awareness to them, as well as tools/techniques around them. There is plenty of supplementary material in this blog post via links to other articles.&lt;/p&gt;

&lt;h1&gt;Getting Started with ADRs&lt;/h1&gt;

&lt;p&gt;The biggest thing when adopting ADRs in your project is being consistent with them. As with any added process, it&amp;rsquo;s easy to simply overlook the new parts if they aren&amp;rsquo;t at the forefront of your mind. Within our software projects, we actually incorporate ADR consideration in our &lt;a href="https://help.github.com/articles/creating-a-pull-request-template-for-your-repository/"&gt;GitHub pull request template&lt;/a&gt;. It&amp;rsquo;s a good idea to make sure all team members are all in agreement with using ADRs, as well as when to make one. You don&amp;rsquo;t want a decision to be made that is not documented.&lt;/p&gt;

&lt;h2&gt;Simplify ADRs with &lt;code&gt;adr-tools&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;In addition to including a note about ADRs in our pull request template, there is more tooling to help out. In the spirit of being lightweight records, markdown files are the preferred way to write ADRs. The &lt;a href="https://github.com/npryce/adr-tools"&gt;&lt;code&gt;adr-tools&lt;/code&gt; command line tool&lt;/a&gt; is a great way to simplify the creation of ADRs. If you are on MacOS, back in May 2017, I got &lt;a href="https://github.com/Homebrew/homebrew-core/pull/13081"&gt;adr-tools accepted into homebrew&lt;/a&gt;, so now you can just &lt;code&gt;brew install adr-tools&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are a lot of configurations and features that exist within &lt;code&gt;adr-tools&lt;/code&gt;. I&amp;rsquo;m going to go over some of the essentials, with examples. I highly recommend taking a deeper look into the tool itself to get the most out of it.&lt;/p&gt;

&lt;h3&gt;Initialize Repository&lt;/h3&gt;

&lt;p&gt;With a new repository, you get started with &lt;code&gt;adr init&lt;/code&gt;, which creates the following &lt;code&gt;doc/adr/0001-record-architecture-decisions.md&lt;/code&gt; file for you. The contents of this ADR is actually the sample one presented above.&lt;/p&gt;

&lt;h3&gt;Create New ADRs&lt;/h3&gt;

&lt;p&gt;When you want to add a new ADR, you can execute &lt;code&gt;adr new &amp;quot;Split up component XXXX into two modules&amp;quot;&lt;/code&gt; which opens up a basic ADR template to fill in. It creates the next incremented ADR &amp;ndash; &lt;code&gt;doc/adr/0002-split-up-component-xxxx-into-two-modules.md&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Maintain Table of Contents&lt;/h3&gt;

&lt;p&gt;Most software projects have a &lt;code&gt;README.md&lt;/code&gt; file. When working with ADRs, I include a hyperlink to &lt;code&gt;/doc/adr/README.md&lt;/code&gt;. This file can be generated using &lt;code&gt;adr generate toc &amp;gt; ./docs/adr/README.md&lt;/code&gt;, and ends up creating a nice table of contents of the current ADRs:&lt;/p&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="gh"&gt;# Architecture Decision Records&lt;/span&gt;
&lt;span class="p"&gt;
*&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;1. Record architecture decisions&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;0001-record-architecture-decisions.md&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;2. Split up component XXXX into two modules&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;0002-split-up-component-xxxx-into-two-modules.md&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Superseding Existing ADRs&lt;/h3&gt;

&lt;p&gt;Eventually, you will have a decision which is somehow &lt;em&gt;linked&lt;/em&gt; to another ADR. A great example of this is a new ADR which supersedes an older decision. First let us make a new ADR &lt;code&gt;adr new -s 2 &amp;quot;Combine modules back into one component&amp;quot;&lt;/code&gt;, which ends up superseding our earlier decision. This will actually modify the ADR&amp;rsquo;s &lt;em&gt;status&lt;/em&gt; section by adding the following:&lt;/p&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="gh"&gt;# In 0002-split-up-component-xxxx-into-two-modules.md&lt;/span&gt;
Superseded by &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;3. Combine modules back into one component&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;0003-combine-modules-back-into-one-component.md&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="gh"&gt;# In 0003-combine-modules-back-into-one-component.md&lt;/span&gt;
Superseds &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;2. Split up component XXXX into two modules&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;0002-split-up-component-xxxx-into-two-modules.md&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is useful to see how ADRs relate to each other. In our example, we&amp;rsquo;re indicating one ADR that supersedes another. It is possible to use &lt;code&gt;adr link&lt;/code&gt; to specifically tailor the link to use different wording, so you can be specific in how ADRs are associated. Ultimately, linking provides additional context surrounding linked decisions.&lt;/p&gt;

&lt;h3&gt;Visualizing ADRs&lt;/h3&gt;

&lt;p&gt;With the ability to &lt;em&gt;link&lt;/em&gt; ADRs together, it now becomes possible to trace the story of a specific ADR. By following links you can understand the &lt;em&gt;bigger picture&lt;/em&gt; of how the architecture evolved over time. It can be hard to navigate one file at a time, so fortunately for us, &lt;code&gt;adr-tools&lt;/code&gt; has us covered by being able to produce a visualization of the ADRs.&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;adr generate graph | dot -Tjpg &amp;gt; graph.jpg&lt;/code&gt; we can generate the following image (using our example ADRs so far):&lt;/p&gt;

&lt;p&gt;&lt;img width="390" height="271" src="/images/2018-01-03-start-now-architecture-decision-records/graph.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;It is quite apparent to see the ADR links in this diagram. I personally have not seen how well this scales, although it still is a good technique to be aware of.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;adr generate graph&lt;/code&gt; by itself will return a &lt;a href="https://graphviz.gitlab.io/"&gt;graphviz&lt;/a&gt; output. It would be interesting to attach this to the &lt;code&gt;/doc/adr/README.md&lt;/code&gt; using the &lt;a href="https://github.com/TLmaK0/gravizo"&gt;gravizo&lt;/a&gt; service. This way, the ADR visualization is always within reach and can be apart of the normal process when adding new ADRs. I have not personally done this approach, but it looks interesting.&lt;/p&gt;

&lt;h2&gt;Searching ADRs&lt;/h2&gt;

&lt;p&gt;As we&amp;rsquo;re just dealing with markdown files, it becomes trivial to search through the ADRs. The file names are the titles, so even at a glance, it becomes easy to narrow down what you are looking for. You can even use &lt;code&gt;adr list&lt;/code&gt; to just list all the ADRs. In combination with other command line tools (i.e., grep) you can filter the list. I personally like using the &lt;a href="https://github.com/junegunn/fzf"&gt;&lt;code&gt;fzf&lt;/code&gt; command line tool&lt;/a&gt; to filter the list and open it in vim: &lt;code&gt;adr list | fzf | xargs vim&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you want to dig deeper you can search the contents of the files for what you are looking for. For example, &lt;code&gt;grep -l &amp;#39;tool&amp;#39; ./doc/adr/*.md | fzf | xargs vim&lt;/code&gt; would look for any file with &lt;em&gt;tool&lt;/em&gt; in it, and present the &lt;code&gt;fzf&lt;/code&gt; interface for further filtering.&lt;/p&gt;

&lt;p&gt;In the end, you can be creative on how you search through ADRs &amp;ndash; there is a lot of flexibility built into it. I usually use the &lt;a href="https://github.com/aykamko/tag"&gt;&lt;code&gt;tag&lt;/code&gt; command line tool&lt;/a&gt; for searching within files.&lt;/p&gt;

&lt;h2&gt;Customizing ADRs&lt;/h2&gt;

&lt;p&gt;At this point, you might be thinking &lt;em&gt;&amp;ldquo;ADRs sound great, but it doesn&amp;rsquo;t quite satisfy all my needs&amp;rdquo;&lt;/em&gt;. The concept of ADRs is very general and flexible in nature so that if you have specific needs or requirements, you can customize it. In our case, we&amp;rsquo;ve been using &lt;code&gt;adr-tools&lt;/code&gt; and it has a base template. You can change it, or use a different template. For example, it might be useful to look through &lt;a href="https://github.com/joelparkerhenderson/architecture_decision_record"&gt;other templates&lt;/a&gt; to find one that fits your needs.&lt;/p&gt;

&lt;p&gt;This post has been talking about using markdown files, but your ADRs could be held in any other medium (i.e., JIRA, Google Docs, etc&amp;hellip;). I would argue to use what works best for your team. In most cases, within a software project, the markdown approach is nice as it&amp;rsquo;s very lightweight and everything is contained in the source directory.&lt;/p&gt;

&lt;h1&gt;TL;DR&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;ADRs are a great way keep records of architectural decisions&lt;/li&gt;
&lt;li&gt;ADRs provide context surrounding architectural decisions&lt;/li&gt;
&lt;li&gt;ADRs can be lightweight as markdown files that live within your project&amp;rsquo;s repository&lt;/li&gt;
&lt;li&gt;ADRs are searchable and customizable&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The best time to start ADRs is at the start of a project; the second best time is right now&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
  </entry>
  <entry>
    <title>Slack Reminding Users and Channels</title>
    <link rel="alternate" href="https://kevinjalbert.com/slack-reminding-users-and-channels/"/>
    <id>https://kevinjalbert.com/slack-reminding-users-and-channels/</id>
    <updated>2018-02-26T21:28:39-05:00</updated>
    <published>2017-12-02T18:53:20-05:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">Slack Reminders are powerful, maybe even more so than you originally thought?! In my experience, I noticed that colleagues of mine didn't fully use reminders to their fullest extent.</description>
    <content type="html">&lt;p&gt;&lt;img width="750" height="310" src="/images/2017-12-02-slack-reminding-users-and-channels/slack-reminders.jpg" /&gt;
&lt;em&gt;Screeshot of Slack&amp;rsquo;s Reminder Help&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://slack.com/"&gt;Slack&lt;/a&gt; has taken over communication for workplace environments, at least within tech circles surrounding me. I realize there are many competitors, and I have even used some of them in the past, but to me Slack is my preferred choice. If you haven&amp;rsquo;t given Slack a try, I highly recommend it! At &lt;a href="http://company.thescore.com/"&gt;theScore&lt;/a&gt; we heavily use Slack.&lt;/p&gt;

&lt;p&gt;This post will be short and focused on &lt;a href="https://get.slack.help/hc/en-us/articles/208423427"&gt;Slack Reminders&lt;/a&gt;. From what I&amp;rsquo;ve experienced with coworkers, they only knew of and used a small subset of Slack Reminder&amp;rsquo;s feature set. This post is going to demonstrate what you can do with Slack Reminders, mainly assigning reminders to users and channels.&lt;/p&gt;

&lt;h1&gt;Reminding Myself&lt;/h1&gt;

&lt;p&gt;A common use case for reminders &amp;ndash; you want some notification in the future to remind you about something.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/remind me to work on blog post in 30 minutes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img width="587" height="109" src="/images/2017-12-02-slack-reminding-users-and-channels/slack-remind-me.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;This is the feature that most people know of with Slack Reminders.&lt;/p&gt;

&lt;h1&gt;Reminding a User&lt;/h1&gt;

&lt;p&gt;It&amp;rsquo;s not an uncommon task that you&amp;rsquo;d want to remind a colleague about a future task.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/remind @aaron.romeo deploy your changes before the weekend on friday morning
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img width="630" height="123" src="/images/2017-12-02-slack-reminding-users-and-channels/slack-remind-user.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;In this example, &lt;a href="http://www.aaronromeo.com/"&gt;@aaron.romeo&lt;/a&gt; would receive a reminder at the specified time. Aaron doesn&amp;rsquo;t actually receive any indication that he has just been assigned a reminder. The only way he can get any insight that he has a new reminder is to either wait until the specified time, or to look at his own list of reminders and see it there. You just have to be aware of this detail depending on how you plan to use reminders.&lt;/p&gt;

&lt;p&gt;Going back to our example, Aaron checks his reminders in Slack and he sees the newly assigned task, although there is no indication of who assigned it to him. Slack, if you are listening, I would like to be able to see who assigned the reminder.&lt;/p&gt;

&lt;p&gt;&lt;img width="685" height="75" src="/images/2017-12-02-slack-reminding-users-and-channels/slack-remind-target-list.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;Regardless, when the reminder does trigger, Aaron can interact with it. In this case he&amp;rsquo;ll mark it as completed.&lt;/p&gt;

&lt;p&gt;&lt;img width="615" height="100" src="/images/2017-12-02-slack-reminding-users-and-channels/slack-remind-target-trigger.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;I received confirmation that he has seen and acted on the reminder I assigned him.&lt;/p&gt;

&lt;p&gt;&lt;img width="700" height="60" src="/images/2017-12-02-slack-reminding-users-and-channels/slack-remind-target-completed.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;This asynchronous flow is awesome, as it allows you to &lt;em&gt;know&lt;/em&gt; that the reminder for that user was acted upon. I tend to use these types of reminders after hours to present information that can wait until the following day. Normally, I end up finding interesting articles that I want to pass on, so these types of reminders work perfectly for me.&lt;/p&gt;

&lt;h1&gt;Reminding a Channel&lt;/h1&gt;

&lt;p&gt;In a similar fashion to assigning a reminder to another user, you can target a channel itself. For example, you might want to remind all the online users within a channel about something.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/remind #team-ep-dev :spiral_calendar_pad: @here standup time! every weekday at 10:30am
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img width="650" height="100" src="/images/2017-12-02-slack-reminding-users-and-channels/slack-remind-channel.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;In this example, the channel &lt;code&gt;#diet-sup-dev&lt;/code&gt; will receive the message at the specified time. As you can see, I even used the &lt;code&gt;@here&lt;/code&gt; mention to make sure it gets all the active users&amp;rsquo; attention. When a channel reminder is set, the reminder is announced on the channel at the specified time.&lt;/p&gt;

&lt;p&gt;&lt;img width="698" height="82" src="/images/2017-12-02-slack-reminding-users-and-channels/slack-remind-channel-announcement.jpg" /&gt;&lt;/p&gt;

&lt;h1&gt;What are my reminders&lt;/h1&gt;

&lt;p&gt;Every now and then you might want to do a little housecleaning on your reminders. You have likely clicked the &lt;em&gt;View Reminders&lt;/em&gt;, or even just executed the following:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/remind list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This presents a list of the past, present, and future reminders, as well as incomplete reminders, for yourself, along with reminders for other individuals and channels.&lt;/p&gt;

&lt;p&gt;&lt;img width="684" height="123" src="/images/2017-12-02-slack-reminding-users-and-channels/slack-remind-list.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;It is a nice place to check every now and then to make sure your reminders are being actioned.&lt;/p&gt;

&lt;h1&gt;Reminders are cheap&lt;/h1&gt;

&lt;p&gt;The beauty of Slack Reminders is that they are quick to create and are actionable. You can be in any conversation in Slack and still use the &lt;code&gt;/remind&lt;/code&gt; command. The ease of making a new reminder means there is no reasons to not use them in your daily workflow.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>GitHub: Tell Me When It Closes Extension</title>
    <link rel="alternate" href="https://kevinjalbert.com/github-tell-me-when-it-closes-extension/"/>
    <id>https://kevinjalbert.com/github-tell-me-when-it-closes-extension/</id>
    <updated>2018-02-26T21:28:39-05:00</updated>
    <published>2017-11-14T18:53:20-05:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">My first foray into making and publishing a browser extension. Let me showcase a quick extension which adds a button on GitHub's pull request and issue pages that links to tellmewhenitcloses.com populated with data.</description>
    <content type="html">&lt;p&gt;&lt;img width="1000" height="890" src="/images/2017-11-14-github-tell-me-when-it-closes-extension/screenshot.jpg" /&gt;
&lt;em&gt;&lt;a href="https://github.com/kevinjalbert/github-tell-me-when-it-closes-extension"&gt;Screenshot of GitHub: Tell Me When It Closes Extension&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://tellmewhenitcloses.com/"&gt;Tell Me When It Closes&lt;/a&gt; is an amazing service by &lt;a href="https://thoughtbot.com/"&gt;thoughtbot&lt;/a&gt;. Often I&amp;rsquo;ll find an issue or pull request on GitHub for a tool I use and I just want to know &lt;em&gt;when&lt;/em&gt; it closes what the result was. I don&amp;rsquo;t care for the back-and-forth conversations between people when if I were to subscribe, so Tell Me When It Closes is the perfect service for me.&lt;/p&gt;

&lt;p&gt;The issue I ran into was the limited ways to integrate this into my workflow. Looking at the ways you can &lt;a href="https://tellmewhenitcloses.com/subscribing"&gt;subscribe to issues and pull requests&lt;/a&gt;, it&amp;rsquo;s a bookmarklet that runs JavaScript. I don&amp;rsquo;t use the bookmark bar in my chrome browser (or browser bookmarks), so that solution wasn&amp;rsquo;t ideal.&lt;/p&gt;

&lt;p&gt;My old workflow for subscribing to an issue on Tell Me When It Closes was:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Cmd + L (move keyboard cursor to address bar)&lt;/li&gt;
&lt;li&gt;Cmd + C (copy URL)&lt;/li&gt;
&lt;li&gt;Cmd + T (open new tab)&lt;/li&gt;
&lt;li&gt;Type tellmewhenitcloses.com (autocompletes after a few characters)&lt;/li&gt;
&lt;li&gt;Enter (opens tellmewhenitcloses.com)&lt;/li&gt;
&lt;li&gt;Cmd + V (paste in issue URL)&lt;/li&gt;
&lt;li&gt;Enter (subscribe to issue)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To many manual steps for me.&lt;/p&gt;

&lt;h1&gt;Simplify and Extend&lt;/h1&gt;

&lt;p&gt;I want a way to simplify the steps to subscribe to an issue. I figured I could manipulate the webpage with JavaScript and add a button which, when, clicked would navigate to the subscription page with the URL filled in.&lt;/p&gt;

&lt;p&gt;I looked into making a browser extension, originally for Google Chrome. Upon further investigation, I found that I could target more browsers without much extra effort. I decided to use &lt;a href="https://github.com/EmailThis/extension-boilerplate"&gt;EmailThis/extension-boilerplate&lt;/a&gt; so that I could build an extension for Chrome, Opera &amp;amp; Firefox.&lt;/p&gt;

&lt;p&gt;The end result is a button which appears in the &lt;em&gt;notifications&lt;/em&gt; section of an issue or pull request page. When you click the button, it&amp;rsquo;ll open the tellmewhenitcloses.com with the appropriate URL pre-filled.&lt;/p&gt;

&lt;p&gt;&lt;img width="400" height="315" src="/images/2017-11-14-github-tell-me-when-it-closes-extension/button.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;Now my workflow for subscribing to an issue on Tell Me When It Closes is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click &lt;em&gt;Tell Me When It Closes&lt;/em&gt; button (using trackpad or &lt;a href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb"&gt;Vimium&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Enter (subscribe to issue)&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;Links&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kevinjalbert/github-tell-me-when-it-closes-extension"&gt;GitHub Repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/github-tell-me-when-it-cl/mfaeeelmjfbblmkbalffbhfpkhhnjalp"&gt;Chrome Extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://addons.mozilla.org/en-US/firefox/addon/github-tell-me-when-it-closes/"&gt;Firefox Add-on&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://addons.opera.com/en/extensions/details/github-tell-me-when-it-closes"&gt;Opera Add-on&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Share Highlighted Articles</title>
    <link rel="alternate" href="https://kevinjalbert.com/share-highlighted-articles/"/>
    <id>https://kevinjalbert.com/share-highlighted-articles/</id>
    <updated>2018-02-26T21:28:39-05:00</updated>
    <published>2017-10-31T19:53:20-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">We are ever consuming articles on the web. In most cases, the articles that interest me are highly technical and informative. Just like a book, you would highlight the important passages for future recollection. In this post, I present my use of the Highly highlighting service to record, retrieve, and share highlights.</description>
    <content type="html">&lt;p&gt;&lt;img width="1024" height="683" src="/images/2017-10-31-share-highlighted-articles/book-highlighter.jpg" /&gt;
&lt;em&gt;&lt;a title="IB English" href="https://flickr.com/photos/quinnanya/3242150010"&gt;IB English&lt;/a&gt; by &lt;a href="https://flickr.com/people/quinnanya"&gt;quinn.anya&lt;/a&gt; is licensed under &lt;a href="https://creativecommons.org/licenses/by-sa/2.0/"&gt;CC BY-SA&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here is yet another post on the topic of sharing knowledge to accompany my previous posts: &lt;em&gt;&lt;a href="/share-your-bag-of-tricks/"&gt;Share Your Bag of Tricks&lt;/a&gt;&lt;/em&gt; and &lt;em&gt;&lt;a href="/knowledge-and-screencast-culture/"&gt;Knowledge and Screencast Culture&lt;/a&gt;&lt;/em&gt;. I&amp;rsquo;ve recently made another change to my day-to-day workflow that accommodates sharing knowledge &amp;ndash; highlighting articles.&lt;/p&gt;

&lt;h1&gt;Information Recollection&lt;/h1&gt;

&lt;p&gt;In the software development world, I&amp;rsquo;m consuming a decent amount of articles from various sources. This is in a way how I keep up with the new changes in the landscape, which in its self could be an interesting short article on its own. I heavily use &lt;a href="https://getpocket.com"&gt;Pocket&lt;/a&gt; to stash articles I find throughout the day and I then slowly consume them at my own leisure. I had it such that if I &lt;em&gt;favourite&lt;/em&gt; an article in Pocket then, through &lt;a href="https://zapier.com"&gt;Zapier&lt;/a&gt; it will be saved in &lt;a href="https://evernote.com"&gt;Evernote&lt;/a&gt;. Evernote is my go-to note-taking and information recollection solution.&lt;/p&gt;

&lt;p&gt;This approach works well, although I want to &lt;em&gt;distil&lt;/em&gt; and &lt;em&gt;reinforce&lt;/em&gt; the materials I&amp;rsquo;m consuming. My hypothesis is that I&amp;rsquo;ll have more succinct notes within Evernote and thus able to take advantage of more narrow focus search efforts. I have settled on using a highlighting service to accomplish for marking important passages that end up being searchable in Evernote.&lt;/p&gt;

&lt;h1&gt;Highlighting Services&lt;/h1&gt;

&lt;p&gt;I reviewed four highlighting services to find the best one that fits my needs. I quickly passed over &lt;a href="https://diigo.com"&gt;Diigo&lt;/a&gt; and &lt;a href="https://www.lumioapp.com"&gt;Lumio&lt;/a&gt;, as they just didn&amp;rsquo;t appeal to me. These next two were my serious contenders that I evaluated.&lt;/p&gt;

&lt;h2&gt;&lt;a href="https://getliner.com"&gt;Liner&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Liner is a solid option for highlighting. The chrome extension works very well and is boiled down to the fundamentals: highlighting and comments. It offers a Pocket integration, which is nice, although not really needed. The ability to export highlights to Evernote is excellent, and as an off the shelf solution does what I need. The iOS application also is well done and works as expected. The sharing feature provides a link which renders the full article with highlightings in it, simple and effective &amp;ndash; &lt;a href="http://lnr.li/PbYky"&gt;example Liner shared link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Even though there is a subscription at $5/month or $50/year, it is not really necessary. You get folder support along with, more colours and advance search. The colours I couldn&amp;rsquo;t really care for, and the search will be covered by Evernote. Folders are also unimportant to me. Overall this means I don&amp;rsquo;t have to pay for this service.&lt;/p&gt;

&lt;p&gt;I really like Liner, and it almost made my pick. It satisfies all my needs, although it became my second choice as the next service Highly has a very neat &lt;em&gt;social&lt;/em&gt; feature.&lt;/p&gt;

&lt;h2&gt;&lt;a href="https://www.highly.co"&gt;Highly&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Highly is very similar to Liner in terms of highlighting. It is, even more, streamline as it only offers highlights and drops comments. The main benefit I noticed with Highly is the &lt;a href="https://medium.com/highlight-to-share/the-highlight-layer-45b9a8e86476"&gt;Highlight Layer&lt;/a&gt;, which when you browse articles provides a social aspect to highlighting. This is pretty awesome as I can see a summary of new articles assuming someone has marked it up before me. In addition, the interface of the extension I would argue is slightly better than Liner. Highly also offers a Pocket integration like Liner. The iOS application for highlighting is also quite nice and offers a great user experience.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Highlight Layer" width="427" height="194" src="/images/2017-10-31-share-highlighted-articles/highlight-layer.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;I was pleasantly surprised with the highlighting experience, considering I didn&amp;rsquo;t think you could improve much with highlighting. As you&amp;rsquo;ll see, the highlighting will automatically expand to fill the words in case you didn&amp;rsquo;t select them from the beginning or end:&lt;/p&gt;

&lt;p&gt;&lt;img alt="Smart Highlighting by Highly" width="577" height="147" src="/images/2017-10-31-share-highlighted-articles/highly-smart-highlighting.gif" /&gt;&lt;/p&gt;

&lt;p&gt;In contrast to how Liner displays the whole page with highlights when you share a link, Highly provides a summary page &amp;ndash; &lt;a href="https://www.highly.co/hl/FJrJO5TzhZt7d3"&gt;example Highly shared link&lt;/a&gt;. You can always drop into the context of the whole page, but this only works if you have the extension installed otherwise you get a prompt to install it.&lt;/p&gt;

&lt;p&gt;Highly does offer a subscription as well for $2/month or $20/year, but all you get is private highlights. To me, that doesn&amp;rsquo;t matter since I want everything to be public, and out in the open for others to benefit from.&lt;/p&gt;

&lt;p&gt;The Evernote storage is non-existent in Highly&amp;hellip; although I did counter this with a hacked together Zapier integration. That I&amp;rsquo;ll cover in the next section.&lt;/p&gt;

&lt;p&gt;Highly&amp;rsquo;s excellent highlighting experience along with the social aspect sold me on it. Liner is a great contender and I am going to keep my eyes on it to see what they come up with in the future. Even though Highly didn&amp;rsquo;t offer an Evernote solution, I was able to hack a more favourable one using Zapier.&lt;/p&gt;

&lt;h1&gt;Evernote Notes with Highly and Zapier&lt;/h1&gt;

&lt;p&gt;As mentioned I want Evernote integration with the highlighting service I use, and with Highly it wasn&amp;rsquo;t there. I was pleased with the rest of Highly that I was willing to make it work.&lt;/p&gt;

&lt;p&gt;First thing I was looking at was the RSS feed that Highly provides, figuring I could tie this with Zapier. Turns out that there already existed a &lt;a href="https://ifttt.com/applets/iTCzjXUP-highly-highlights-in-evernote"&gt;Highly highlights in Evernote on IFTTT&lt;/a&gt; already. The main issue is that the RSS feed has one item for each highlight. So you cannot aggregate all the highlights for a completed articled into one note. This wasn&amp;rsquo;t going to do it for me.&lt;/p&gt;

&lt;p&gt;You can email a Highly link, so I was going to just email them into Evernote. While this worked, there were a couple of issues:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Evernote&amp;rsquo;s free account only allows 5 emails per month. I was not a paying customer and wasn&amp;rsquo;t planning on taking the additional cost at the moment.&lt;/li&gt;
&lt;li&gt;The email is heavily branded with Highly, as it is meant to be a link sent to someone other than yourself.&lt;/li&gt;
&lt;li&gt;The title of the email was generic and uninformative &amp;ndash; &lt;em&gt;kevinjalbert sent you a highlight.&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img alt="Highly Share Email To Evernote" width="425" height="745" src="/images/2017-10-31-share-highlighted-articles/email-to-evernote.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;Fortunately, with Zapier, you can chain multiple actions together (limit of 3 with a free account). Zapier allows for some powerful workflows, especially since you can use JavaScript or Python to manipulate data within the flow.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Zapier Highly To Evernote Flow" width="380" height="495" src="/images/2017-10-31-share-highlighted-articles/zapier-highly-flow.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;I use a Zapier inbound email trigger, that triggers when I email the share link from Highly. I then feed the HTML formatted email into a JavaScript function where I can clean up the &lt;code&gt;inputData.rawBody&lt;/code&gt; and &lt;code&gt;inputData.htmlBody&lt;/code&gt; and return an object for the next step.&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;titleRegex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/kevinjalbert's highlights&lt;/span&gt;&lt;span class="se"&gt;\s&lt;/span&gt;&lt;span class="sr"&gt;+&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;.*&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;linkRegex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;https:&lt;/span&gt;&lt;span class="se"&gt;\/\/&lt;/span&gt;&lt;span class="sr"&gt;www.highly.co&lt;/span&gt;&lt;span class="se"&gt;\/&lt;/span&gt;&lt;span class="sr"&gt;hl&lt;/span&gt;&lt;span class="se"&gt;\/&lt;/span&gt;&lt;span class="sr"&gt;.*&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;timeRegex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;.* Summary • .* Story&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;htmlBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;inputData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;htmlBody&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Remove html, head, and body&lt;/span&gt;
&lt;span class="nx"&gt;htmlBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;htmlBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;htmlBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;body"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;htmlBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;htmlBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;htmlBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastIndexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;/body&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;// Remove profile and divider&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;before&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;htmlBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;htmlBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;div class="main"&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;after&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;htmlBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;htmlBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;div class="article-meta'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;htmlBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;before&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;after&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Remove redundant text&lt;/span&gt;
&lt;span class="nx"&gt;htmlBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;htmlBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"kevinjalbert's highlights"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Remove footer&lt;/span&gt;
&lt;span class="nx"&gt;htmlBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;htmlBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;htmlBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastIndexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;div class="footer"'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;// Add wrapping div&lt;/span&gt;
&lt;span class="nx"&gt;htmlBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;div"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;htmlBody&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;/div&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Clean up nbsp&lt;/span&gt;
&lt;span class="nx"&gt;htmlBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;htmlBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&amp;lt;div class="split-15" height="15" style="font-size:15px;line-height:15px;height:15px;overflow:hidden;background:transparent"&amp;gt;&amp;amp;nbsp;&amp;lt;&lt;/span&gt;&lt;span class="se"&gt;\/&lt;/span&gt;&lt;span class="sr"&gt;div&amp;gt;/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;div class="split-5" height="5" style="font-size:5px;line-height:5px;height:5px;overflow:hidden;background:transparent"&amp;gt;&amp;lt;br /&amp;gt;&amp;lt;\/div&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;articleTitle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;titleRegex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inputData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rawBody&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;highlyLink&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;linkRegex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inputData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rawBody&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;timeSummary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;timeRegex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inputData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rawBody&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;evernoteFormattedBody&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;htmlBody&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cleaning up the HTML body was an interesting task to make it conform to Evernote&amp;rsquo;s &lt;a href="https://dev.evernote.com/doc/articles/enml.php"&gt;ENML&lt;/a&gt; format. The code is a hack and brittle, but it works. I also extract the title so that I can ensure that the note&amp;rsquo;s title is properly reflecting in Evernote. The final step is to put all this together into the Evernote action template.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Zapier Create Evernote Note Template" width="760" height="560" src="/images/2017-10-31-share-highlighted-articles/zapier-create-evernote-note.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;With the Zapier flow, I now get a succinct note with the highlightings for an article. It triggers instantly when I send the email from Highly.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Zapier Formatted Email To Evernote" width="425" height="500" src="/images/2017-10-31-share-highlighted-articles/zapier-formatted-to-evernote.jpg" /&gt;&lt;/p&gt;

&lt;h1&gt;Highlighting Workflow&lt;/h1&gt;

&lt;p&gt;Now armed with my highlighter I can mark the good parts that I feel are most important when consuming articles online. With the ability to share summary links, I can better ensure that the take aways from the article surfaces easier. Finally, with my Evernote Zapier integration, I know that my highlighted information is always a few keystrokes away.&lt;/p&gt;

&lt;p&gt;My goal is to highlight every article that lands in my Pocket. With Highly&amp;rsquo;s social aspects I hope that my highlights help future readers. In a similar fashion, I am always pleased when I see that someone else has already highlighted an article for the key points.&lt;/p&gt;

&lt;p&gt;Make sure to check out my highlights and &lt;a href="https://www.highly.co/by/kevinjalbert"&gt;follow me on Highly&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Synchronizing my dotfiles</title>
    <link rel="alternate" href="https://kevinjalbert.com/synchronizing-my-dotfiles/"/>
    <id>https://kevinjalbert.com/synchronizing-my-dotfiles/</id>
    <updated>2018-02-26T21:28:39-05:00</updated>
    <published>2017-09-28T19:53:20-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">Overtime, you accumulate a set of configurations and dotfiles. To ensure a consistent environments across machines you want to have access to the same dotfiles. I share my synchronization approach along with how to keep the private and public information separate.</description>
    <content type="html">&lt;p&gt;&lt;img width="1362" height="887" src="/images/2017-09-28-synchronizing-my-dotfiles/github-dotfiles.jpg" /&gt;
&lt;em&gt;&lt;a href="https://github.com/kevinjalbert/dotfiles"&gt;My dotfiles repository on GitHub&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I always strive to &lt;a href="/share-your-bag-of-tricks/"&gt;share my bag of tricks&lt;/a&gt;. Hosting &lt;a href="https://github.com/kevinjalbert/dotfiles"&gt;my dotfiles on GitHub&lt;/a&gt; is one way I can share the tricks and tips I&amp;rsquo;ve picked up over time. In addition, this makes it easy to replicate my development environment on another machine if needed.&lt;/p&gt;

&lt;p&gt;There are some technical challenges I&amp;rsquo;ve had to overcome in open-sourcing my dotfiles. My dotfiles is a living repository, it is constantly changing as I tweak my environment. I recently encountered a situation where I have two physical machines to use for development. I want a simple and comprehensive solution for synchronizing my dotfiles, both the private and public content, between both machines.&lt;/p&gt;

&lt;h1&gt;What are dotfiles?&lt;/h1&gt;

&lt;p&gt;Jump right to the next section if you are already familiar with the dotfiles concept. The basic principle is that someone&amp;rsquo;s dotfiles are a set of the files that represent the configurations of applications and utilities (usually consisting of many &lt;em&gt;&amp;lt;dot&amp;gt;files&lt;/em&gt;, for example &lt;code&gt;.zshrc&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;As a developer, we have many tools at our disposal, and in many cases they are essential to our day-to-day work. The main reason to care about your own dotfiles is to ensure that you can replicate your working environment again. That alone is huge if you ever have to move to a new machine. It is a common pattern to push up your dotfiles to the cloud for back up purposes. I have most of mine on GitHub. The following points answer &lt;a href="https://dotfiles.github.io/"&gt;why you would want your dotfiles on GitHub&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Backup, restore, and sync the prefs and settings for your toolbox. Your dotfiles might be the most important files on your machine.&lt;/li&gt;
&lt;li&gt;Learn from the community. Discover new tools for your toolbox and new tricks for the ones you already use.&lt;/li&gt;
&lt;li&gt;Share what you’ve learned with the rest of us.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h1&gt;My dotfiles&lt;/h1&gt;

&lt;p&gt;Since the beginning, I have hosted my dotfiles on GitHub. For the most part, I&amp;rsquo;ve only had one machine for development, and so I would slowly push my tweaks to my dotfiles repository.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve built up a &lt;a href="https://github.com/kevinjalbert/dotfiles/blob/6585c9a7e1ae1926fcaf2210d48be23a2e988bdb/Rakefile"&gt;Rakefile&lt;/a&gt; that orchestrates the install/update/backup/uninstall operations of my dotfiles.&lt;/p&gt;

&lt;p&gt;My dotfiles are specific for MacOS and take advantage of &lt;a href="https://brew.sh/"&gt;homebrew&lt;/a&gt; to bootstrap the system. In addition, I also use &lt;a href="https://caskroom.github.io/"&gt;homebrew cask&lt;/a&gt; and &lt;a href="https://github.com/mas-cli/mas"&gt;mas&lt;/a&gt; to install system applications.&lt;/p&gt;

&lt;p&gt;As previously mentioned, my dotfiles is a living repository &amp;ndash; it will continue to evolve and change. I make no guarantee that it&amp;rsquo;ll still operate or use the same solution at the time this article was written. The &lt;code&gt;README.md&lt;/code&gt; in the repository should always reflect the state of my dotfiles (although admittedly they are lacking as I write this).&lt;/p&gt;

&lt;h2&gt;Mackup + Dropbox Synchronization&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve recently stumbled upon &lt;a href="https://github.com/lra/mackup"&gt;Mackup&lt;/a&gt;, a solution to keep application settings in sync for MacOS/Linux. The concept is pretty simple as per the &lt;a href="https://github.com/lra/mackup#what-does-it-do"&gt;What does it do&lt;/a&gt; section says in the README:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Back ups your application settings in a safe directory (e.g. Dropbox)&lt;/li&gt;
&lt;li&gt;Syncs your application settings among all your workstations&lt;/li&gt;
&lt;li&gt;Restores your configuration on any fresh install in one command line&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;It has a list of &lt;a href="https://github.com/lra/mackup/tree/master/mackup/applications"&gt;support applications&lt;/a&gt;, although it also supports &lt;a href="https://github.com/lra/mackup/tree/master/doc#add-support-for-an-application-or-any-file-or-directory"&gt;custom file/directory/application&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Using Mackup, I can take advantage of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Backing up configurations of supported applications. This alone is awesome, as there were many application settings that I never bothered to backup.&lt;/li&gt;
&lt;li&gt;Ability to create custom application configurations defining their symlink-able dotfiles.&lt;/li&gt;
&lt;li&gt;More battle-tested process for backing up and restoring symlinks.&lt;/li&gt;
&lt;li&gt;Real-time synchronization of configurations in Dropbox.&lt;/li&gt;
&lt;li&gt;Private dotfile synchronization in Dropbox.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Synchronization&lt;/h3&gt;

&lt;p&gt;Before Mackup, I was using &lt;code&gt;git pull&lt;/code&gt; and &lt;code&gt;git push&lt;/code&gt; to synchronize &lt;em&gt;deliberate&lt;/em&gt; configuration changes. I would have to manually add files I wanted to synchronize to the dotfile repository, along with the initial symlink. On another machine, I would &lt;code&gt;git pull&lt;/code&gt; and &lt;em&gt;reinstall&lt;/em&gt; to apply the changes.&lt;/p&gt;

&lt;p&gt;I was fortunate in that I didn&amp;rsquo;t whole-heartedly use this approach with multiple machines at the same time. I suspect there could be conflicts, or lost configurations using this approach.&lt;/p&gt;

&lt;p&gt;With Mackup and the idea of using dropbox for synchronization, configurations are reflected in near real-time (although applications might have to be restarted on the other machine). To better accommodate the real-time synchronization features, I moved my dotfile repository to dropbox. I also let Mackup handle the backup/restore of symlinks as it has that feature built into it.&lt;/p&gt;

&lt;p&gt;As Mackup provides a host of support applications, I was able to synchronize much more between environments. As it also has the support for custom application configurations I was able to better declare what I wanted to synchronize.&lt;/p&gt;

&lt;h3&gt;Public Sharing&lt;/h3&gt;

&lt;p&gt;One of my main goals was to keep my dotfiles &lt;a href="https://github.com/kevinjalbert/dotfiles/tree/6585c9a7e1ae1926fcaf2210d48be23a2e988bdb"&gt;focused and organized&lt;/a&gt; from a directory structure perspective. This simplifies the navigation and discoverability for anyone looking at my dotfiles. Each directory contains a specific set of configurations, and through the orchestration system, they get applied to the environment.&lt;/p&gt;

&lt;p&gt;When adopting Mackup, I decided to shed this and simply adopt the &lt;em&gt;root is my home directory&lt;/em&gt; that Mackup uses by default. This isn&amp;rsquo;t pretty, but it removes the &lt;em&gt;mapping&lt;/em&gt; of where the file would reside in the system. In retrospect, it actually better reflects where someone would expect to find certain configurations.&lt;/p&gt;

&lt;p&gt;I define my own &lt;a href="https://github.com/kevinjalbert/dotfiles/tree/5acf8672973e31dace420ad8e8303675094ed4e5/.mackup"&gt;custom applications&lt;/a&gt; so I can share/synchronize what I desire.&lt;/p&gt;

&lt;p&gt;As mentioned, Mackup is capabile of synchronizing a bunch of supported applications. I didn&amp;rsquo;t exactly want to put all those up in my repository for sharing. If I don&amp;rsquo;t actively manage the configuration then I don&amp;rsquo;t want to share it. For example, my configurations for &lt;a href="https://github.com/lra/mackup/blob/719efd0a630fc3c6326aab5c84ac12b8509bbbf9/mackup/applications/doxie.cfg"&gt;Doxie&lt;/a&gt; aren&amp;rsquo;t important, while my vim/zsh configurations are highly curated.&lt;/p&gt;

&lt;p&gt;To make sure my repository only has the &lt;em&gt;curated&lt;/em&gt; configurations that I want to publicly share I use &lt;a href="https://github.com/kevinjalbert/dotfiles/blob/5acf8672973e31dace420ad8e8303675094ed4e5/.gitignore"&gt;whitelisting in the &lt;code&gt;.gitignore&lt;/code&gt;&lt;/a&gt; to selectively publish dotfiles.&lt;/p&gt;

&lt;p&gt;This approach allows me to take full advantage of synchronizing all configurations between environments, while publically sharing selected configurations in my repository.&lt;/p&gt;

&lt;h2&gt;The Flow&lt;/h2&gt;

&lt;h3&gt;Adding files to synchronize&lt;/h3&gt;

&lt;p&gt;When I use &lt;code&gt;mackup --dry-run backup&lt;/code&gt;, I get a list of configurations that have not yet been backed up. This will pick up new applications, as well as new custom configurations I&amp;rsquo;ve added.&lt;/p&gt;

&lt;p&gt;If I have something custom to backup I will create a new configuration.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cat ~/.mackup/tips.cfg
[application]
name = My tips

[configuration_files]
.tips
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I can run &lt;code&gt;mackup backup&lt;/code&gt; and backup the new additions to my dropbox.&lt;/p&gt;

&lt;p&gt;If I&amp;rsquo;m considering publically sharing this in my dotfiles repository, I&amp;rsquo;ll add the appropriate changes in the &lt;code&gt;.gitignore&lt;/code&gt; whitelist.&lt;/p&gt;

&lt;h3&gt;Restoring files on different environment&lt;/h3&gt;

&lt;p&gt;Similar to the backup command, I can use &lt;code&gt;mackup --dry-run restore&lt;/code&gt; to see a list of configurations that have yet to be restored. This will add new symlinks on the current machine based on the configurations in dropbox.&lt;/p&gt;

&lt;p&gt;After that, the symlinks will take care of the synchronization of data between the multiple systems in real-time.&lt;/p&gt;

&lt;h3&gt;Gotchas&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Some dotfiles of applications are always changing or overwriting the symlinks. These are hard to handle, and might not even be worth synchronizing between systems. With dropbox, I kept getting notifications of changes to files (i.e., Screenhero did this for me).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can synchronize whole directories with a symlink. This is great as any new files that appear within it will be handled automatically. The only issue I&amp;rsquo;ve hit with this is when you want to change the scope of the symlinking (i.e., replace the directory with just individual files within it, or vice versa). Just be careful, as in my experience Mackup might not do the backup/restore correctly if you are changing the scope of the symlink.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Concerns with sensitive private keys (GPG/SSH private keys, secret API keys, etc&amp;hellip;), as you are putting them in Dropbox (in the cloud). Some people/organizations will not like this, and you have to be aware of what you are synchronizing.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can always override an existing Mackup application configuration with a custom one. For example, I wanted to add some additional files for my &lt;a href="https://github.com/kevinjalbert/dotfiles/blob/1c6c2b03169a57708b4487c4af0d52168f9957ef/.mackup/zsh.cfg"&gt;ZSH configuration&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;TL;DR&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;The concept of dotfiles is awesome, especially if you have multiple environments you want to synchronize configurations between.&lt;/li&gt;
&lt;li&gt;GitHub is a great place to host/explore public dotfiles.&lt;/li&gt;
&lt;li&gt;Mackup provides a comprehensive synchronization solution for application configurations and files.&lt;/li&gt;
&lt;li&gt;Using Dropbox as Mackup&amp;rsquo;s storage option provides near real-time synchronization of dotfiles.&lt;/li&gt;
&lt;li&gt;Make use of &lt;code&gt;.gitignore&lt;/code&gt;&amp;rsquo;s whitelisting feature to selectivly share your public dotfiles while staying within Mackup&amp;rsquo;s solution.&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Self-Improvement, Accountability and Transparancy</title>
    <link rel="alternate" href="https://kevinjalbert.com/self-improvement-accountability-and-transparency/"/>
    <id>https://kevinjalbert.com/self-improvement-accountability-and-transparency/</id>
    <updated>2018-02-26T21:28:39-05:00</updated>
    <published>2017-08-31T19:53:20-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">I outline changes that I want to implement for my website that will help push forward with: Self-Improvement, Accountability and Transparency. I'll be using ideas like a Now page, AMA, and Progress Posts.</description>
    <content type="html">&lt;p&gt;&lt;img width="2048" height="1152" src="/images/2017-08-31-self-improvement-accountability-and-transparancy/leaf.jpg" /&gt;
&lt;em&gt;&lt;a title="Raindrops on Nasturtiums, Whiskers on Gerbils" href="https://flickr.com/photos/uncoolbob/14342874746"&gt;Raindrops on Nasturtiums, Whiskers on Gerbils&lt;/a&gt; by &lt;a href="https://flickr.com/people/uncoolbob"&gt;uncoolbob&lt;/a&gt; is licensed under &lt;a href="https://creativecommons.org/licenses/by-nc/2.0/"&gt;CC BY-NC&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This will be a quick blog post, but one that will mark a new page in my writings.&lt;/p&gt;

&lt;p&gt;As the title suggests I want to be more &lt;em&gt;accountable&lt;/em&gt; and &lt;em&gt;transparent&lt;/em&gt; with what I am doing. Just by having a website that I blog in monthly does this a little. For example I am transparent that I want to blog once a month, and I&amp;rsquo;m held accountable as it is public. This maybe isn&amp;rsquo;t the greatest example, but hopefully you get the point.&lt;/p&gt;

&lt;p&gt;Moving forward, these are processes and constructs I want to start and/or continue doing.&lt;/p&gt;

&lt;h1&gt;Ask me anything!&lt;/h1&gt;

&lt;p&gt;I recently came back from &lt;a href="http://www.reactrally.com/"&gt;ReactRally 2017&lt;/a&gt; (which was awesome). In Sean Larkin&amp;rsquo;s presentation, he mentioned that he has an &lt;a href="https://github.com/TheLarkInn/ama"&gt;AMA&lt;/a&gt;. I took at look at it, and I thought it was an awesome idea. In the vein transparency, I decided to create one and link to it on my website.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t have high hopes for many questions coming in, but at least it is there.&lt;/p&gt;

&lt;h1&gt;Progress Posts&lt;/h1&gt;

&lt;p&gt;In addition to the monthly blog posts, I want to publish a new series of progress posts. I&amp;rsquo;m still not 100% sure what they will entail, but I have seen other blogs do something similar. Right now these are some ideas I&amp;rsquo;m playing with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Updates on progress in any side projects&lt;/li&gt;
&lt;li&gt;Blog analytics&lt;/li&gt;
&lt;li&gt;Productivity (i.e., RescueTime, pomodoros)&lt;/li&gt;
&lt;li&gt;Fitness/Activity&lt;/li&gt;
&lt;li&gt;Knowledge consumption (i.e., videos, articles, books, podcasts, courses)&lt;/li&gt;
&lt;li&gt;GitHub stats&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This would be a living experiement. I&amp;rsquo;m not too sure I&amp;rsquo;ll keep going with it, or what I&amp;rsquo;ll be tracking progress on. I&amp;rsquo;ll likely make adjustments to what I&amp;rsquo;m tracking and writing about, as well as the frequency of updates. I&amp;rsquo;m going to start with monthly updates, although we&amp;rsquo;ll see how that plays out.&lt;/p&gt;

&lt;p&gt;Ideally I want to do this so that I am more transparent in what I&amp;rsquo;m doing (on a finer-level), but also accountable in what I&amp;rsquo;m setting out for myself. A side bonus is having an archive of data (although probably not in an ideal format &amp;ndash; maybe I&amp;rsquo;ll make some kind of JSON as the raw data for each update haha).&lt;/p&gt;

&lt;p&gt;It would be sick to pull something like &lt;a href="http://blog.stephenwolfram.com/2012/03/the-personal-analytics-of-my-life/"&gt;Stephen Wolfram&amp;rsquo;s Personal Analytics&lt;/a&gt;, although that seems like quite a system he had put together.&lt;/p&gt;

&lt;h1&gt;Now Page&lt;/h1&gt;

&lt;p&gt;I already have a &lt;a href="https://nownownow.com/about"&gt;now page&lt;/a&gt; (link points to where I got the idea from) located in the top navigation of this website. The contents of that page detail &lt;em&gt;what I&amp;rsquo;m doing now&lt;/em&gt;. I haven&amp;rsquo;t been that regular in updating it, but it is something I want to work on.&lt;/p&gt;

&lt;p&gt;In a way the Now page could also act as a holding ground for my progress posts, with the next set of goals.&lt;/p&gt;

&lt;h1&gt;The Goal&lt;/h1&gt;

&lt;p&gt;With the accountability aspect, I&amp;rsquo;m hoping that I can push myself for deliberate self-improvement. Not only in software development, leadership, but in all aspects of my life. The progress posts and the now page should will hopefully be the catalyst in starting this trend.&lt;/p&gt;

&lt;p&gt;I still have to give this article, &lt;a href="https://medium.com/@lissalauren/design-your-personal-growth-831582b8524d"&gt;Design your personal growth&lt;/a&gt;, a read. It offers a plan for self-improvement, and hopefully I can incorporate something like that in these new changes I&amp;rsquo;m implementing.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Knowledge and Screencast Culture</title>
    <link rel="alternate" href="https://kevinjalbert.com/knowledge-and-screencast-culture/"/>
    <id>https://kevinjalbert.com/knowledge-and-screencast-culture/</id>
    <updated>2018-02-26T21:28:39-05:00</updated>
    <published>2017-07-30T19:53:20-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">As a developer, I routinely share my knowledge and experiences, however I find that I repeat myself with different individuals. To overcome this, I present a knowledge repository using screencasts for persisted and asynchronous knowledge transfer.</description>
    <content type="html">&lt;p&gt;&lt;img width="2048" height="1139" src="/images/2017-07-30-knowledge-and-screencast-culture/movie-camera.jpg" /&gt;
&lt;em&gt;&lt;a href="https://flic.kr/p/jxJiU9"&gt;Vintage Filmo Auto Master 8mm Movie Camera&lt;/a&gt; by &lt;a href="https://www.flickr.com/photos/51764518@N02/"&gt;Joe Haupt&lt;/a&gt;, on Flickr&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;Leaking Knowledge&lt;/h1&gt;

&lt;p&gt;I try my best to teach and impart knowledge to my peers. This is actually one reason why I blog &amp;ndash; to record and teach others from my experiences. While working at theScore, I attempt to &lt;a href="/share-your-bag-of-tricks/"&gt;share my bag of tricks&lt;/a&gt; to the best of my ability. I found during my tenure that my colleagues would occasionally:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ask what application/tool I just used&lt;/li&gt;
&lt;li&gt;ask what hotkey/shortcut I just pressed&lt;/li&gt;
&lt;li&gt;ask me how something works&lt;/li&gt;
&lt;li&gt;ask me to explain a subject in deeper depth&lt;/li&gt;
&lt;li&gt;comment on something they just learned from me&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I like to share information, tips and tricks. I came up with a rather simple idea and recently put it into practice at theScore. The whole point of this is to not just &lt;em&gt;leak&lt;/em&gt; knowledge but to directly share it.&lt;/p&gt;

&lt;h1&gt;Sharing and Don&amp;rsquo;t Repeat Yourself&lt;/h1&gt;

&lt;p&gt;There are those moments when a colleague of mine got value out of something I showed and/or explained to them. I like to capitalize on these moments, as I figured there are other people who would gain similar value if they were also there. Unfortunately, it&amp;rsquo;s not often that I am surrounded by &lt;em&gt;everyone&lt;/em&gt; when these moments happen (we&amp;rsquo;re all busy doing our own things).&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve noticed that I would be sharing similar tips when I pair or talk with another coworker. In retrospect, I&amp;rsquo;m repeating myself while slowly spreading enlightenment. As a developer I can see the pattern I&amp;rsquo;m following, and by my nature I want to automate or DRY (Don&amp;rsquo;t Repeat Yourself) things up. To overcome this hurdle I decided to come up with a more direct and permanent solution to disseminate my experience across the organization.&lt;/p&gt;

&lt;h1&gt;Knowledge Repository&lt;/h1&gt;

&lt;p&gt;I approach most things from a developer&amp;rsquo;s mindset. I love using GitHub and that is the platform theScore uses for its day to day operations on the engineering side. I created a &lt;em&gt;knowledge&lt;/em&gt; repository with the following in its README:&lt;/p&gt;

&lt;blockquote&gt;
&lt;h2&gt;Knowledge&lt;/h2&gt;

&lt;p&gt;We are always learning new things to help us work more efficiently and effectively. To help share this knowledge, we informally tell our team, or certain individuals. Eventually, we might have a presentation to a wider audience, which often is still a subset of our engineering department. In many cases, the information shared using these deliver mechanisms are not reviewable, and might not reach everyone who may benefit from it.&lt;/p&gt;

&lt;p&gt;Doing formal presentation can be nerve racking for the presenter, and time consuming for everyone. The idea for this repository is to make everything as informal and async as possible. The goal is to take advantage of screenrecording/screencasting technologies for delivery and storage of information along with GitHub&amp;rsquo;s pull requests to facilitate discussion.&lt;/p&gt;

&lt;h2&gt;What can be shared?&lt;/h2&gt;

&lt;p&gt;Anything! This repository helps promote individuals to share even the smallest tidbit of knowledge that they feel is worth sharing. It could be even a 30 seconds editor trick. Without having any restrictions, the hope is that the friction to share something to a wider audience is minimal, also to help encourage sharing what one might not feel is important enough to have a formal presentation for.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My idea was have a communal place to share and consume knowledge in an asynchronous environment. The README is treated as a living document and will adjust and improve over time.&lt;/p&gt;

&lt;p&gt;I am continuously learning new things, and others have plenty to teach. This approach will create an environment for learning for not only myself, but for everyone.&lt;/p&gt;

&lt;h1&gt;Screencast All the Things&lt;/h1&gt;

&lt;p&gt;As you might have read in the README snippet, the preferred medium to use is screenrecording/screencasting technologies for delivery and storage. So in essence, you would create a screencast for anything that could provide value to someone and that you don&amp;rsquo;t want to repeat. There are broad criteria of what to screencast, but in that respect I think it&amp;rsquo;ll work out quite well in the long run.&lt;/p&gt;

&lt;p&gt;There is quite an art to doing screencasts well, and I am just getting my feet wet. I&amp;rsquo;m still working on my presentation delivery as I generally don&amp;rsquo;t do much preparation before recording. As for tools I&amp;rsquo;m currently using:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://monosnap.com"&gt;Monosnap&lt;/a&gt; for the screenrecording software (for MacOS and Windows)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/keycastr/keycastr"&gt;KeyCastr&lt;/a&gt; for visualizing my keystrokes (for MacOS)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At theScore I download the recorded video and upload it to our internal Google Drive and link that in the GitHub Pull Request. I am tempted to just leave them on Monosnap&amp;rsquo;s built-in hosting service if there is no sensitive information within the video. To demonstrate my setup I&amp;rsquo;ve recorded a &lt;a href="https://monosnap.com/file/y53Rg1cvLJpT214tHz7erWDM9HgOik"&gt;quick screencast&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Screencast Culture&lt;/h1&gt;

&lt;p&gt;The &lt;em&gt;knowledge&lt;/em&gt; repository is still a new concept at theScore, although I have high hopes for it. The more that people contribute to it, the more useful it&amp;rsquo;ll become. With a wide range of topics and data within it, there are bound to be new learning materials for each individual. The challenge is getting people to be aware of it as well as contribute to it. I&amp;rsquo;m still working out how best to approach this challenge.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Make the most of your Chat Channels</title>
    <link rel="alternate" href="https://kevinjalbert.com/make-the-most-of-your-chat-channels/"/>
    <id>https://kevinjalbert.com/make-the-most-of-your-chat-channels/</id>
    <updated>2018-02-26T21:28:39-05:00</updated>
    <published>2017-06-30T19:53:20-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">Persisted chat channels communication platform, which by its nature, has little guidance in how you organize channels. To ensure that everyone is making the most of channels, I'll provided some tips and suggestions based on my experiences.</description>
    <content type="html">&lt;p&gt;&lt;img width="2048" height="1371" src="/images/2017-06-30-make-the-most-of-your-chat-channels/communication-tower.jpg" /&gt;
&lt;em&gt;&lt;a href="https://flic.kr/p/finMno"&gt;Communication Tower&lt;/a&gt; by &lt;a href="https://www.flickr.com/photos/95876508@N02/"&gt;Cocoy Pusung&lt;/a&gt;, on Flickr&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Organizations tend to use some instant messaging platform in addition to email. Ideally, the chosen platform permeates throughout the ranks of the organization instead of having fractured communication between members. The real-time and group collaborative nature of these messaging platforms are quite appealing.&lt;/p&gt;

&lt;p&gt;I have personally used a couple of messaging platform so far (i.e., Hipchat, Gitter, Discord, Slack). Overall, they all offer the concept of channels. Channels are simply persisted chat &lt;em&gt;rooms&lt;/em&gt; in which members can communicate asynchronously. Topics and names of channels are left up to the members who use them.&lt;/p&gt;

&lt;p&gt;My goal is to outline some steps to better foster an effective use of channels in your messaging platform of choice. I am currently using Slack at theScore, and so the context of this post will be within Slack.&lt;/p&gt;

&lt;h1&gt;The Cleanse&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Macaitis recommends that if no one has used a channel for sixty days, it’s best to archive it. &amp;ndash; &lt;a href="https://expand.openviewpartners.com/former-slack-cmo-bill-macaitis-on-how-slack-uses-slack-868ffb495b71"&gt;Former Slack CMO, Bill Macaitis, on How Slack Uses Slack&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;An organization that uses chat channels for communication will accrue an abundance of such. Some of these channels are used more frequently than others. To keep things slightly under control, you should routinely clean the channels. As to &lt;em&gt;who&lt;/em&gt; should be doing this, I would say everyone should try to keep their communication platform clean. There are a few benefits to this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Keeps a more narrow focus within the organization&lt;/li&gt;
&lt;li&gt;Easier for users to keep a handle on their channels&lt;/li&gt;
&lt;li&gt;Newcomers feel less overwhelmed at the number of channels&lt;/li&gt;
&lt;li&gt;Less ambiguity on where conversations/information should be put&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Archiving channels doesn&amp;rsquo;t have to be perfect, although there will be clear choices. If the need of the channel arises again, it can be recreated/unarchived as needed.&lt;/p&gt;

&lt;h1&gt;Types of Channels&lt;/h1&gt;

&lt;p&gt;Channels tend to fall under specific categories that define their behaviour or purpose. For example, &lt;a href="https://slack.global.ssl.fastly.net/5ccb/pdfs/admins_guide.pdf"&gt;Slack provides a guideline&lt;/a&gt; on what these channel types are:&lt;/p&gt;

&lt;h2&gt;Global&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;i.e., #general, #announcements, #everyone&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A global channel is one that &lt;em&gt;everyone&lt;/em&gt; is apart of. Normally this would be a general channel, however productivity can be limited depending on the number of members &amp;ndash; it&amp;rsquo;s more of a social channel. A common use case for using a global channel is for organizational announcements.&lt;/p&gt;

&lt;h2&gt;Location&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;i.e., #toronto, #ontario, #canada&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;An organization might be spread across many locations. These channels offer a way to group conversations that pertain to specific locations. How to name these channels depends on how your organization is structured geographically &amp;ndash; it might be based on cities, regions, or even offices within a city.&lt;/p&gt;

&lt;h2&gt;Team&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;i.e., #engineering, #engineering-ios, #sales, #designers&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These channels are rather important in facilitating communication within teams. Realistically you would have high-level groups such as &lt;em&gt;#engineering&lt;/em&gt; that all your engineers are apart of. It would also be ideal to create &lt;em&gt;sub-teams&lt;/em&gt; to accommodate specializations such as &lt;em&gt;#engineering-android&lt;/em&gt; and &lt;em&gt;#engineering-web&lt;/em&gt;. By following this naming convention for teams and sub-teams, the channels are &lt;em&gt;grouped&lt;/em&gt; and sorted through the naming convention.&lt;/p&gt;

&lt;h2&gt;Project&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;i.e., #sports-app, #chat-bot, #squadup&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Often projects are underway. To help communication within that project, which might include individuals across different teams, a project channel is useful. As projects come and go, it might be worth archiving channels for projects that are no longer current.&lt;/p&gt;

&lt;h2&gt;Topical&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;i.e., #soccer, #javascript, #anime&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To me, these are the interesting channels! The previously mentioned channels types were more geared towards business communication, and generally are easily formed around the business needs. Topical channels could be on anything that interests a group of people. Generally, these channels are organically formed within an organization.&lt;/p&gt;

&lt;h2&gt;Temporary&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;i.e., #xmas-party, #offsite-retreat, #brainstorm-session&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These channels are short-lived and generally used for time-sensitive events. They have a specific purpose, and rarely offer much value after that purpose is completed. These channels could be deleted or archived when they are no longer needed. Channels are &lt;em&gt;cheap&lt;/em&gt; to create, and so people shouldn&amp;rsquo;t be worried about making one-off channels to help them accomplish specific tasks.&lt;/p&gt;

&lt;h1&gt;Organizing Channels&lt;/h1&gt;

&lt;p&gt;As we saw there are many categories of channels. To help with the organization of the multiple channels, a naming convention could be used.&lt;/p&gt;

&lt;p&gt;One suggestion is to prefix all team channels with &lt;code&gt;team-&lt;/code&gt; (i.e., &lt;em&gt;#team-engineering&lt;/em&gt;). The same could be done with project channels using &lt;code&gt;project-&lt;/code&gt; (i.e., &lt;em&gt;#project-esports&lt;/em&gt;). The actual prefix doesn&amp;rsquo;t matter as long as it is unique (enough) and consistent. A benefit is that channels are ordered alphanumerically, making it easier to browse active teams/projects. If you wanted, you could even take the same approach with topics (i.e., &lt;em&gt;#topic-soccer&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Another idea is to have a &lt;em&gt;#meta&lt;/em&gt; channel where you can talk about improving the use of the platform itself. For example, new topic channels can be posted there, same with renames and such. Ensure everyone is a part of the channel so information travels. If there is support for it, you could also pin/sticky some guidelines on the platform (i.e., link to this article).&lt;/p&gt;

&lt;h1&gt;Topical Channels (at theScore)&lt;/h1&gt;

&lt;p&gt;As previously mentioned, topical channels are the interesting channels that I want to touch on more here. I&amp;rsquo;ll just say that this is coming from an software organization&amp;rsquo;s perspective, as I am a part of theScore engineering team.&lt;/p&gt;

&lt;p&gt;Here are a few of our topical channels:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;#ping-pong&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;#overwatch&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;#pokemon-go&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;#podcasts&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;#board-games&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;#food&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While these channels do provide topical information on their specific topics, we didn&amp;rsquo;t really have engineering topic channels.&lt;/p&gt;

&lt;h2&gt;Birth of Engineering Topical Channels&lt;/h2&gt;

&lt;p&gt;We were doing some recent work with &lt;a href="https://facebook.github.io/react/"&gt;React&lt;/a&gt; and &lt;a href="http://graphql.org/"&gt;GraphQL&lt;/a&gt;, and we saw the birth of two engineering topical channels:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;#graphql&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;#react&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before this work, we did not &lt;em&gt;really&lt;/em&gt; have engineering topical channels. This caused slight inefficiencies in the flow of knowledge through our engineering team. We made these new channels known at the engineering level, and also invited people who are actively working in the areas. This approach injected people who cared about the topic into the channel. As we go about our day and we find something interesting related to one of these topics, it becomes easy to drop that information into the channel. In addition, more specific questions can be asked in these channels as their topic is fairly narrow.&lt;/p&gt;

&lt;p&gt;Eventually, you end up seeing people who are not &lt;em&gt;directly&lt;/em&gt; working in that topic area, but are still in the channel. To me this suggests people have an interest.&lt;/p&gt;

&lt;h2&gt;Educational Value of Topical Communication&lt;/h2&gt;

&lt;p&gt;These specific topical channels on programming languages/frameworks/concepts are extremely beneficial to individuals, and the organization.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Provides a place for focused conversations to take place. For example, if someone had a general GraphQL question where do you go to ask it? Possibly in one our engineering channels, or maybe a specific team that is using it? In this case, having a dedicated topical channel for &lt;em&gt;#graphql&lt;/em&gt; would be beneficial.&lt;/li&gt;
&lt;li&gt;Promotes people to widen their interests, as they can simply join a channel and &lt;em&gt;slowly&lt;/em&gt; absorb information. For example, if I was interested in &lt;em&gt;#machine-learning&lt;/em&gt;, I could join the channel and occasionally I&amp;rsquo;ll see people post links to articles, conference talks, and just general conversation on the topic.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is great educational value in these channels, especially in larger organizations where there are many teams and projects. These channels offer a place to share findings and communication to prevent knowledge silos.&lt;/p&gt;

&lt;h2&gt;Effective Slack Plan&lt;/h2&gt;

&lt;p&gt;Now at theScore, this is our plan in improving our usage of Slack channels:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Archive channels with no activity in the last 60 days&lt;/li&gt;
&lt;li&gt;Rename team channels with the &lt;code&gt;team-&lt;/code&gt; prefix&lt;/li&gt;
&lt;li&gt;Rename project channels with the &lt;code&gt;proj-&lt;/code&gt; prefix&lt;/li&gt;
&lt;li&gt;Create a 2-level hierarchy for teams (i.e., &lt;em&gt;#eng&lt;/em&gt;, #eng-ios)&lt;/li&gt;
&lt;li&gt;Create engineering topical channels (i.e., &lt;em&gt;#rails&lt;/em&gt;, &lt;em&gt;#android&lt;/em&gt;, &lt;em&gt;#swift&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Create a &lt;em&gt;#meta&lt;/em&gt; channel (along with a note to some channel conventions)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With routine maintenance, we will keep our Slack channels focused and organized. Hopefully we will see the benefit to education/knowledge sharing with the increased organization of our chat channels.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Create your own Pronto Runner</title>
    <link rel="alternate" href="https://kevinjalbert.com/create-your-own-pronto-runner/"/>
    <id>https://kevinjalbert.com/create-your-own-pronto-runner/</id>
    <updated>2018-02-26T21:28:39-05:00</updated>
    <published>2017-05-30T19:53:20-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">Pronto runners provides an automatic mechanism to find offenses in code reviews. Learn the essentials of pronto runners so that you can build your own.</description>
    <content type="html">&lt;p&gt;&lt;img width="1280" height="857" src="/images/2017-05-30-create-your-own-pronto-runner/robot.jpg" /&gt;
&lt;em&gt;By Vanillase (Own work) &lt;a href="http://creativecommons.org/licenses/by-sa/3.0"&gt;CC BY-SA 3.0&lt;/a&gt;, via &lt;a href="https://commons.wikimedia.org/wiki/File:ASIMO_Conducting_Pose_on_4.14.2008.jpg"&gt;Wikimedia Commons&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;What is Pronto?&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://github.com/prontolabs/pronto"&gt;Pronto&lt;/a&gt; is a tool that provides an automated code review over new changes in a git branch. It is typically used in continuous integration as a way to provide feedback on a pull/merge request. It is configurable in how it provides feedback, through the use of &lt;em&gt;formatters&lt;/em&gt;. For example, pronto on GitHub could &lt;a href="https://github.com/prontolabs/pronto/blob/master/lib/pronto/formatter/github_pull_request_formatter.rb"&gt;comment directly on the offending line&lt;/a&gt;, use &lt;a href="https://github.com/prontolabs/pronto/blob/master/lib/pronto/formatter/github_status_formatter.rb"&gt;pull request status checks&lt;/a&gt;, or even the recent &lt;a href="https://github.com/prontolabs/pronto/blob/master/lib/pronto/formatter/github_pull_request_review_formatter.rb"&gt;pull request review&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Pronto uses the concept of &lt;em&gt;runners&lt;/em&gt; to indicate what pronto will use to look for offenses during a code review. Generally, runners act as wrappers around existing tools. There are a number of &lt;a href="https://github.com/prontolabs/pronto#runners"&gt;open source runners&lt;/a&gt; available, and for the most part they will provide what you need. In some cases you&amp;rsquo;ll want something different, which does not &lt;em&gt;yet&lt;/em&gt; exist as a runner. This is where you can create a new runner to fill the gap.&lt;/p&gt;

&lt;h1&gt;What is a Runner&amp;rsquo;s Job?&lt;/h1&gt;

&lt;p&gt;Pronto runners are responsible for parsing out offenses and matching them with lines from a git patch. These offenses normally are the result of a tool that the runner is using (i.e., a linter). The end goal is that the runner sends messages containing the patch line change and the offense to pronto. There are two methods that I&amp;rsquo;ve seen when approaching a pronto runner, and are dictated by the following constraints:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The tool can be run on individual files.&lt;/li&gt;
&lt;li&gt;The tool needs be run with the context of the whole code base.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The second option could be used regardless, although when the size of your codebase increases the number of files that have to be processed would grow as well. Ideally, you would want the runner to be as quick as possible, so running the tool over the least amount of files would help accomplish that. In addition, there would be less error noise produced from non-changed files.&lt;/p&gt;

&lt;p&gt;In my experience, when creating &lt;a href="https://github.com/kevinjalbert/pronto-stylelint"&gt;pronto-stylelint&lt;/a&gt; and &lt;a href="https://github.com/kevinjalbert/pronto-flow"&gt;pronto-flow&lt;/a&gt;, I used existing pronto runners as my base. I would recommend the same when starting a new runner. Pick one as your base (which follows the approach you need) and modify as necessary. Again, most pronto runners are fairly straight forward, and usually consist of one file.&lt;/p&gt;

&lt;h1&gt;Examining a Runner&lt;/h1&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at &lt;a href="https://github.com/prontolabs/pronto-rubocop/blob/v0.8.1/lib/pronto/rubocop.rb"&gt;pronto-rubocop&lt;/a&gt; and make a few notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The class inherits from &lt;code&gt;Pronto::Runner&lt;/code&gt;, which provides the patch information along with &lt;a href="https://github.com/prontolabs/pronto/blob/v0.8.2/lib/pronto/runner.rb"&gt;other methods&lt;/a&gt; that you can use within your runner.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#initialize&lt;/code&gt; is setting up any custom configurations, as well as creating the &lt;code&gt;Rubocop::Runner&lt;/code&gt; instance.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#run&lt;/code&gt; is the &lt;a href="https://github.com/prontolabs/pronto/blob/v0.8.2/lib/pronto/runners.rb#L20"&gt;entry point of the runner&lt;/a&gt; &amp;ndash; this is where all your logic can start to come into play.&lt;/li&gt;
&lt;li&gt;In pronto-rubocop, &lt;code&gt;#run&lt;/code&gt; is selecting all the patch information that pronto provides it, and only processing (i.e., run rubocop and send messages) those which are valid (i.e., ruby file that has a change).&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;#inspect&lt;/code&gt; method processes each patch with rubocop. The reported offenses from rubocop get matched up with the patch file/line. When a match is found then &lt;code&gt;#new_message&lt;/code&gt; is called.&lt;/li&gt;
&lt;li&gt;The output of a pronto runner is to create instances of &lt;code&gt;Pronto::Message&lt;/code&gt;, which requires &lt;a href="https://github.com/prontolabs/pronto/blob/master/lib/pronto/message.rb#L7-L19"&gt;specific data inputs&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following is a stripped down and commented version of pronto-rubocop:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'pronto'&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'rubocop'&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Pronto&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Rubocop&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Runner&lt;/span&gt;
    &lt;span class="sr"&gt;//&lt;/span&gt; &lt;span class="no"&gt;Required&lt;/span&gt; &lt;span class="sb"&gt;`#run`&lt;/span&gt; &lt;span class="nb"&gt;method&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="vi"&gt;@patches&lt;/span&gt;

      &lt;span class="sr"&gt;//&lt;/span&gt; &lt;span class="no"&gt;Loop&lt;/span&gt; &lt;span class="n"&gt;over&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;patches&lt;/span&gt; &lt;span class="n"&gt;passed&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;pronto&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="nb"&gt;select&lt;/span&gt; &lt;span class="n"&gt;valid&lt;/span&gt; &lt;span class="n"&gt;ones&lt;/span&gt;
      &lt;span class="sr"&gt;//&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;inspect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;possibly&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
      &lt;span class="vi"&gt;@patches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;valid_patch?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;inspect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;compact&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;valid_patch?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;additions&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

      &lt;span class="sr"&gt;//&lt;/span&gt; &lt;span class="no"&gt;Return&lt;/span&gt; &lt;span class="n"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;determine&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;valid&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;runner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
      &lt;span class="nf"&gt;/&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;,&lt;/span&gt; &lt;span class="n"&gt;whether&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;included&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;runner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="nf"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inspect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="sr"&gt;//&lt;/span&gt; &lt;span class="no"&gt;Process&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;acquire&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;generated&lt;/span&gt; &lt;span class="n"&gt;offenses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
      &lt;span class="nf"&gt;processed_source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;processed_source_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;offences&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@inspector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:inspect_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;processed_source&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;first&lt;/span&gt;

      &lt;span class="sr"&gt;//&lt;/span&gt; &lt;span class="no"&gt;Filter&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;offenses&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;those&lt;/span&gt; &lt;span class="n"&gt;which&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt;
      &lt;span class="sr"&gt;//&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="no"&gt;If&lt;/span&gt; &lt;span class="n"&gt;so&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;said&lt;/span&gt; &lt;span class="n"&gt;information&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
      &lt;span class="nf"&gt;offences&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="ss"&gt;:disabled?&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;offence&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;added_lines&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new_lineno&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;offence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;line&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;new_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;offence&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;new_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;offence&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new_file&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:path&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="n"&gt;level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;offence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;severity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="sr"&gt;//&lt;/span&gt; &lt;span class="no"&gt;Symbol&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;offence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

      &lt;span class="nf"&gt;/&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="no"&gt;Required&lt;/span&gt; &lt;span class="n"&gt;construct&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;pronto&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
      &lt;span class="nf"&gt;/&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="no"&gt;The&lt;/span&gt; &lt;span class="sb"&gt;`line`&lt;/span&gt; &lt;span class="n"&gt;here&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="n"&gt;extracted&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="vi"&gt;@patch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
      &lt;span class="no"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;offence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;processed_source_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="sr"&gt;//&lt;/span&gt; &lt;span class="no"&gt;Rubocop&lt;/span&gt; &lt;span class="n"&gt;processing&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="nf"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;Building a Runner&lt;/h1&gt;

&lt;p&gt;As previously mentioned, most pronto runners are simply wrappers for an existing tool and the whole runner itself is quite small. Given that you inherit from &lt;code&gt;Pronto::Runner&lt;/code&gt;, the only method you need to implement is &lt;code&gt;#run&lt;/code&gt;. There is a lot of flexibility in what your runner can do.&lt;/p&gt;

&lt;p&gt;Together let&amp;rsquo;s build a runner that flags lines that contain one of the &lt;a href="https://en.wikipedia.org/wiki/Seven_dirty_words"&gt;seven dirty words&lt;/a&gt;. I decided to use &lt;a href="https://github.com/kevinjalbert/pronto-stylelint"&gt;pronto-stylelint&lt;/a&gt; as my base, which I then pulled out everything except the essentials:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'pronto'&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'shellwords'&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Pronto&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DirtyWords&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Runner&lt;/span&gt;
    &lt;span class="no"&gt;DIRTY_WORDS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'shit'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'piss'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'fuck'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'cunt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'cocksucker'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'motherfucker'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'tits'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="vi"&gt;@patches&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="vi"&gt;@patches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;zero?&lt;/span&gt;

      &lt;span class="vi"&gt;@patches&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;additions&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;inspect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;compact&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="kp"&gt;private&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;git_repo_path&lt;/span&gt;
      &lt;span class="vi"&gt;@git_repo_path&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="no"&gt;Rugged&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Repository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;discover&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;expand_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Dir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;pwd&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;workdir&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inspect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;offending_line_numbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="n"&gt;patch&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;added_lines&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new_lineno&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;line_number&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;new_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Avoid using one of the seven dirty words'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;new_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;offence&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new_file&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:path&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="n"&gt;level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:warning&lt;/span&gt;

      &lt;span class="no"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;offence&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;offending_line_numbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;line_numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

      &lt;span class="no"&gt;Dir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;git_repo_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="n"&gt;escaped_file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Shellwords&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;escape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new_file_full_path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;escaped_file_path&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;with_index&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_num&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
          &lt;span class="n"&gt;line_numbers&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;line_num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="no"&gt;DIRTY_WORDS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;any?&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;downcase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;

        &lt;span class="n"&gt;line_numbers&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;#offending_line_numbers&lt;/code&gt; methods is where the check for a &lt;em&gt;dirty word&lt;/em&gt; occurs. When an offending line is found, we flag the line number for that file to be used in &lt;code&gt;#new_message&lt;/code&gt;. Overall, it is not that hard to put together a simple pronto runner. To look at the end result of this pronto runner, it is open sourced at &lt;a href="https://github.com/kevinjalbert/pronto-dirty_words"&gt;pronto-dirty_words&lt;/a&gt;. Never forget it is always possible to add configuration files and external tools to a runner.&lt;/p&gt;

&lt;h1&gt;Pronto all the things&lt;/h1&gt;

&lt;p&gt;To this date, I have created two useful pronto runners (&lt;em&gt;dirty words&lt;/em&gt; was more of a demo for this post). I have personally been using pronto for several years, and I will continue to use it. The ecosystem of runners continues to grow. I hope that this post helps others in creating new runners that will benefit everyone. Keep an eye out for tools that could be wrapped in a pronto runner &amp;ndash; maybe you can help add to the set of runners!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Bluetooth Connection/Battery Script for macOS</title>
    <link rel="alternate" href="https://kevinjalbert.com/bluetooth-connection-battery-script-for-macos/"/>
    <id>https://kevinjalbert.com/bluetooth-connection-battery-script-for-macos/</id>
    <updated>2018-02-26T21:28:39-05:00</updated>
    <published>2017-04-08T19:53:20-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">Using AppleScript to simplify connecting bluetooth earphones to macOS.</description>
    <content type="html">&lt;p&gt;&lt;img width="4032" height="3024" src="/images/2017-04-09-bluetooth-connection-battery-script-for-macos/beatsx.jpg" /&gt;
&lt;em&gt;My BeatsX Earphones&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I recently purchased a pair of &lt;a href="http://www.apple.com/ca/shop/product/MLYE2LL/A/beatsx-earphones-black"&gt;BeatsX Earphones&lt;/a&gt; as I wanted to stop dealing with wired earbuds. For some reason, the wired connections always stopped working properly after a number of months. I supect it is just the stress on the wire while in my pocket during my commute.&lt;/p&gt;

&lt;p&gt;When arriving at work, or really anytime I am transitioning from iPhone to MacBook Pro, I have to manually connect my BeatsX to the MacBook Pro. I wanted to automate this process, down to a simple command. If the BeatsX are in range and on they would initiate the connection process to my machine. In addition, it would be nice to have a way to monitor the battery level using a similar process.&lt;/p&gt;

&lt;p&gt;Looking around, I couldn&amp;rsquo;t find any way through a command-line interface to do what I wanted. I eventually figured out that I could use macOS&amp;rsquo;s &lt;a href="https://en.wikipedia.org/wiki/AppleScript"&gt;AppleScript&lt;/a&gt; to automate the menu navigation.&lt;/p&gt;

&lt;p&gt;The following script will attempt to connect to the desired device (i.e., BeatsX by name). If it is already connected then it will retrieve the battery level.&lt;/p&gt;
&lt;pre class="highlight applescript"&gt;&lt;code&gt;&lt;span class="nb"&gt;activate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"SystemUIServer"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;deviceName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Kevin Jalbert's BeatsX"&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;tell&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"System Events"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="k"&gt;tell&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;process&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"SystemUIServer"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;bluetoothMenu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;menu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;bar&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;item&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;menu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;bar&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;whose&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;description&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;contains&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"bluetooth"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="k"&gt;tell&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;bluetoothMenu&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nv"&gt;click&lt;/span&gt;&lt;span class="w"&gt;

      &lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;deviceMenuItem&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;menu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;item&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;deviceName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;menu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="k"&gt;tell&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;deviceMenuItem&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nv"&gt;click&lt;/span&gt;&lt;span class="w"&gt;

        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;exists&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;menu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;item&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Connect"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;menu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nv"&gt;click&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;menu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;item&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Connect"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;menu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Connecting..."&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;batteryLevelMenuItem&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;menu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;item&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;menu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="k"&gt;tell&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;batteryLevelMenuItem&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;batteryLevelText&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;batteryLevelMenuItem&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;tell&lt;/span&gt;&lt;span class="w"&gt;

          &lt;/span&gt;&lt;span class="na"&gt;key code&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;-- esc key&lt;/span&gt;&lt;span class="w"&gt;

          &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;batteryLevelText&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;tell&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;tell&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;tell&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;tell&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This on its own is a nice win and works as desired. Now, I&amp;rsquo;m a heavy user of &lt;a href="https://www.alfredapp.com/"&gt;Alfred&lt;/a&gt; and I quickly threw together a workflow that uses this script. I now get a notification during connection, and repeated invokations will display the battery level.&lt;/p&gt;

&lt;p&gt;&lt;img width="2104" height="632" src="/images/2017-04-09-bluetooth-connection-battery-script-for-macos/alfred-workflow.gif" /&gt;
&lt;em&gt;My BeatsX Alfred workflow&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
</feed>
