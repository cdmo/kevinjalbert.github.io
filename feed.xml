<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kevin Jalbert</title>
  <link href="https://kevinjalbert.com"/>
  <updated>2018-07-16T19:53:20-04:00</updated>
  <author>
    <name>Kevin Jalbert</name>
  </author>
  <id>https://kevinjalbert.com</id>
  <entry>
    <title>GraphQL Persisted Queries with HTTP Caching [Part 2]</title>
    <link rel="alternate" href="https://kevinjalbert.com/graphql-persisted-queries-with-http-caching-part-2/"/>
    <id>https://kevinjalbert.com/graphql-persisted-queries-with-http-caching-part-2/</id>
    <updated>2018-07-16T22:29:47-04:00</updated>
    <published>2018-07-16T19:53:20-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">This is the second of four parts on GraphQL Persisted Queries with HTTP Caching. We'll setup a React application and Express server, both using GraphQL. We will refactor these applications to support persisted queries.</description>
    <content type="html">&lt;p&gt;This is the second part of a four part series on GraphQL Persisted Queries with HTTP Caching. As a recap of part one, we described some issues with GraphQL and how persisted queries can be a solution for them. We also covered what persisted queries were from a high-level.&lt;/p&gt;

&lt;p&gt;In part two we will cover the following topics:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Setup Express Server&lt;/li&gt;
&lt;li&gt;Setup React Application&lt;/li&gt;
&lt;li&gt;Refactor React Application to use Persisted Queries&lt;/li&gt;
&lt;li&gt;Extract GraphQL Queries from Client&lt;/li&gt;
&lt;li&gt;Refactor Express Server to use Persisted Queries&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;Setup Express Server&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Follow along with the complete code changes on &lt;a href="https://github.com/kevinjalbert/graphql-persisted-queries/commit/5ac1a2a8dcc1757d145503ca0d209bcccca0ed97"&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To begin, we&amp;rsquo;re going to setup up a very simple Express server that&amp;rsquo;ll serve up a GraphQL API. Let&amp;rsquo;s break down the following file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// server.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GraphQLServer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'graphql-yoga'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;typeDefs&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'./graphql/typeDefs'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;resolvers&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'./graphql/resolvers'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;GraphQLServer&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;typeDefs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resolvers&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'/graphql'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;playground&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'/playground'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;`Server started, listening on port &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; for incoming requests.`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We have our GraphQL types and resolvers defined under the &lt;code&gt;./graphql&lt;/code&gt; directory. The resolvers are pulling data from &lt;code&gt;data.json&lt;/code&gt;, which is just an easier way to get this API started. In our example, we&amp;rsquo;re serving up data on video game consoles, so the data doesn&amp;rsquo;t change that often.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;graphql-yoga&lt;/code&gt; we can create a &lt;code&gt;GraphQLServer&lt;/code&gt;, supply it with the type definitions and resolvers. We set a couple of &lt;em&gt;options&lt;/em&gt; then we start the server.&lt;/p&gt;

&lt;h1&gt;Setup React Application&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Follow along with the complete code changes on &lt;a href="https://github.com/kevinjalbert/graphql-persisted-queries/commit/c992730643a39f72bd5f5b6e335eb103b3646949"&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To take advantage of our Express Server that is exposing a GraphQL API, we&amp;rsquo;re going to create a simple React application to use it. We&amp;rsquo;ll use &lt;code&gt;create-react-app&lt;/code&gt; for our foundation, and add in &lt;code&gt;react-apollo&lt;/code&gt; and &lt;code&gt;apollo-boost&lt;/code&gt; to bootstrap the GraphQL.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; we need to use the &lt;a href="https://github.com/facebook/create-react-app/pull/3909"&gt;&lt;em&gt;next&lt;/em&gt; version (2.x) of &lt;code&gt;react-scripts&lt;/code&gt; so that we can take advantage of a &lt;code&gt;graphql-tag/loader&lt;/code&gt;&lt;/a&gt; to load up &lt;a href="https://dev-blog.apollodata.com/5-benefits-of-static-graphql-queries-b7fa90b0b69a"&gt;static &lt;code&gt;.graphql&lt;/code&gt; files&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll first initialize our Apollo client and render our &lt;code&gt;App&lt;/code&gt; to the DOM. In addition, we need to set up the Apollo Client and point it to our GraphQL API. The following &lt;code&gt;index.js&lt;/code&gt; file accomplishes all this setup:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// index.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'react'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'react-dom'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;registerServiceWorker&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'./registerServiceWorker'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ApolloClient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;InMemoryCache&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'apollo-boost'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ApolloProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'react-apollo'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createHttpLink&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'apollo-link-http'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'./components/App'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s1"&gt;'./index.css'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ApolloClient&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;link&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;createHttpLink&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'http://localhost:5000/graphql'&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;InMemoryCache&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AppWithProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ApolloProvider&lt;/span&gt; &lt;span class="na"&gt;client=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ApolloProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;AppWithProvider&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'root'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;registerServiceWorker&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Nothing special is happening in our &lt;code&gt;App&lt;/code&gt; component, as we&amp;rsquo;re just creating some input controls and passing the data to our &lt;code&gt;ConsoleContainer&lt;/code&gt; component. All our GraphQL data loading and usage is handled within the &lt;code&gt;ConsoleContainer&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// components/ConsoleContainer.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'react'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'prop-types'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Query&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'react-apollo'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;QUERY&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'../graphql/ConsolesByYear.graphql'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ConsolesAndCompany&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;afterYear&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;beforeYear&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Query&lt;/span&gt; &lt;span class="na"&gt;query=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;QUERY&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;variables=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;afterYear&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;beforeYear&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;fetchPolicy=&lt;/span&gt;&lt;span class="s1"&gt;'network-only'&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'Error!'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'Loading'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Fragment&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="si"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;consoles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;key=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Release Year: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;releaseYear&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Company: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;company&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;))&lt;/span&gt;
          &lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Fragment&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Query&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;ConsolesAndCompany&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;propTypes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;afterYear&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;beforeYear&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;ConsolesAndCompany&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice that we&amp;rsquo;re loading the &lt;code&gt;QUERY&lt;/code&gt; from a static file. The &lt;code&gt;Query&lt;/code&gt; component then allows the Apollo client to handle the networking, storage, and retrieval of the query. Our component finally renders new &lt;code&gt;React.Fragments&lt;/code&gt; to the DOM with the resolved data.&lt;/p&gt;

&lt;h1&gt;Refactor React Application to use Persisted Queries&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Follow along with the complete code changes on &lt;a href="https://github.com/kevinjalbert/graphql-persisted-queries/commit/f8b91be248c3b5c41813fc01dd99f05e3f62bf69"&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the last two sections we created a simple React application using Apollo client that uses a GraphQL API being served on Express. With a small change on our React application we can make it &lt;em&gt;persisted query&lt;/em&gt; enabled.&lt;/p&gt;

&lt;p&gt;We take advantage of the &lt;a href="https://github.com/apollographql/apollo-link-persisted-queries"&gt;&lt;code&gt;apollo-link-persisted-queries&lt;/code&gt;&lt;/a&gt; (an &lt;em&gt;Apollo Link&lt;/em&gt;) to modify the Apollo client. While it isn&amp;rsquo;t &lt;em&gt;too difficult&lt;/em&gt; to roll our own implementation, it is best to lean on community supported projects. Using this package will help us narrow down what our future implementation needs to conform to on the server-side. In addition, it provides some &lt;em&gt;portability/compatibility&lt;/em&gt; with different projects due to being a community solution.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// index.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createPersistedQueryLink&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'apollo-link-persisted-queries'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// ... rest of file&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ApolloClient&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;link&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;createPersistedQueryLink&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;createHttpLink&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'http://localhost:5000/graphql'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;InMemoryCache&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// ... rest of file&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At this point our React application will be sending outbound &lt;code&gt;POST&lt;/code&gt; requests with the following body:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  extensions: {
    persistedQuery: {
      version: 1,
      sha256Hash: "a38e6d5349901b395334b5fd3b14e84a7ca7c4fc060a4089f2c23b5cf76f0f80"
    }
  },
  operationName: "ConsolesByYear",
  variables: {
    afterYear: 1990,
    beforeYear: 1999
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We have our &lt;code&gt;operationName&lt;/code&gt;, &lt;code&gt;variables&lt;/code&gt; and the &lt;code&gt;extensions&lt;/code&gt; properties present. Within the &lt;code&gt;extensions&lt;/code&gt; property, we really only care about the &lt;code&gt;persistedQuery.sha256Hash&lt;/code&gt; value. The &lt;code&gt;sha256Hash&lt;/code&gt; value is automatically computed on-the-fly based on the outgoing query (it is worth noting you can &lt;a href="https://github.com/apollographql/apollo-link-persisted-queries#build-time-generation"&gt;calculate the hashes at build-time&lt;/a&gt;). Thus, we now need a way to identify the queries by this signature on the server.&lt;/p&gt;

&lt;h1&gt;Extract GraphQL Queries from React Application&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Follow along with the complete code changes on &lt;a href="https://github.com/kevinjalbert/graphql-persisted-queries/commit/078b3d2784add9b54b831b7e0b662ebea2bd9d4e"&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We can use the &lt;a href="https://github.com/apollographql/persistgraphql"&gt;persistgraphql&lt;/a&gt; tool from Apollo to help extract queries from the client application. This tool recursively scans a directory and looks for GraphQL queries (i.e., &lt;code&gt;.graphql&lt;/code&gt; files), then it generates a JSON file of &lt;code&gt;query_string&lt;/code&gt; keys mapped to &lt;code&gt;id&lt;/code&gt; values. Unfortunately, this tool&amp;rsquo;s major flaw is that the &lt;code&gt;id&lt;/code&gt; ends up being an auto-incremented number:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;query_string_1&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;query_string_2&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;query_string_3&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Auto-incrementing ids aren&amp;rsquo;t going to uniquely identify the query string, thus causing long-term concerns when you need to extract the queries multiple times or from multiple clients. Ideally, you could use some cryptographic hash function to come up with the unique ids, which effectively becomes the query&amp;rsquo;s signature). Currently, there are GitHub issues discussing these concerns (&lt;a href="https://github.com/apollographql/persistgraphql/pull/35"&gt;pull request #35&lt;/a&gt; and &lt;a href="https://github.com/apollographql/persistgraphql/issues/34"&gt;issue #34&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;There are general questions and concerns with the tool&amp;rsquo;s operation and how to use the output:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How do you sync them to the server (&lt;a href="https://github.com/apollographql/persistgraphql/issues/52"&gt;issue #52&lt;/a&gt;)?&lt;/li&gt;
&lt;li&gt;How do you use them in the client (&lt;a href="https://github.com/apollographql/persistgraphql/issues/42"&gt;issue #42&lt;/a&gt;)?&lt;/li&gt;
&lt;li&gt;How can you retain previous queries for a build process (&lt;a href="https://github.com/apollographql/persistgraphql/issues/17"&gt;issue #17&lt;/a&gt;)?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apollo has another tool, &lt;a href="https://github.com/apollographql/apollo-codegen"&gt;apollo-codegen&lt;/a&gt;, that handles extracting queries for the purpose of generating code for other languages and types (i.e., Swift, Scala, Flow, etc&amp;hellip;). It has been brought up in &lt;a href="https://github.com/apollographql/apollo-codegen/issues/314"&gt;issue #314&lt;/a&gt; that a unification of &lt;code&gt;persistgraphql&lt;/code&gt; and &lt;code&gt;apollo-codegen&lt;/code&gt; would be ideal. In an article titled &lt;a href="https://leoasis.github.io/posts/2018/04/27/graphql-persisted-documents/"&gt;GraphQL Persisted Documents&lt;/a&gt; (by &lt;a href="https://twitter.com/leogcrespo"&gt;Leonardo Garcia Crespo&lt;/a&gt;), the landscape for extracting and using persisted queries can be confusing.&lt;/p&gt;

&lt;p&gt;For the purpose of what we want to do, we will reuse the existing logic that &lt;code&gt;persistgraphql&lt;/code&gt; has to extract the queries and add in a post-process that will determine a unique signature for each query to match what we need. I created a script, &lt;a href="https://github.com/kevinjalbert/graphql-persisted-queries/tree/master/persistgraphql-signature-sync"&gt;&lt;code&gt;persistgraphql-signature-sync&lt;/code&gt;&lt;/a&gt;, to extract the queries from the client and augmented the &lt;code&gt;id&lt;/code&gt;s to be a hash of the query acting as the unique signature. A SHA 256 hashing algorithm is used so that the generated hash value is the same as the ones generated by &lt;code&gt;apollo-link-persisted-queries&lt;/code&gt;. It also handles synchronization of queries to an endpoint, which we will explore in a later section.&lt;/p&gt;

&lt;p&gt;The following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node index.js --input-path=../react-graphql/src --output-file=./extracted_queries.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;produces a JSON file holding the query strings and their signatures:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s2"&gt;"query ConsolesByYear($afterYear: Int, $beforeYear: Int) {&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;  consoles(afterYear: $afterYear, beforeYear: $beforeYear) {&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;    ...ConsoleFieldsFragment&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;    company {&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;      name&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;      __typename&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;    }&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;    __typename&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;  }&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s2"&gt;fragment ConsoleFieldsFragment on Console {&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;  name&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;  releaseYear&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;  __typename&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"a38e6d5349901b395334b5fd3b14e84a7ca7c4fc060a4089f2c23b5cf76f0f80"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;Refactor Express Server to use Persisted Queries&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Follow along with the complete code changes on &lt;a href="https://github.com/kevinjalbert/graphql-persisted-queries/commit/a386f13fdc4e97ff0ceb4f159038eb924ced8386"&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We now have our &lt;code&gt;extracted_queries.json&lt;/code&gt; file containing our mapping of queries to signatures. We can go back and refactor our express server to use the output file containing the mapping to support persisted queries.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GraphQLServer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'graphql-yoga'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bodyParser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'body-parser'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;typeDefs&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'./graphql/typeDefs'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;resolvers&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'./graphql/resolvers'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;persistedQueriesMiddleware&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'./persistedQueriesMiddleware'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;GraphQLServer&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;typeDefs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;resolvers&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'/graphql'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;playground&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'/playground'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bodyParser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/graphql'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;persistedQueriesMiddleware&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;`Server started, listening on port &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; for incoming requests.`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We have added two things here:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We use the &lt;code&gt;bodyParser&lt;/code&gt; middleware that will allow us to access the &lt;code&gt;body&lt;/code&gt; parameters on &lt;code&gt;POST&lt;/code&gt; requests.&lt;/li&gt;
&lt;li&gt;We have a new &lt;code&gt;persistedQueriesMiddleware&lt;/code&gt; that attaches onto the &lt;code&gt;/graphql&lt;/code&gt; &lt;code&gt;POST&lt;/code&gt; route.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We add the first middleware so that we can access the &lt;code&gt;req.body&lt;/code&gt; in our custom &lt;code&gt;persistedQueriesMiddleware&lt;/code&gt; middleware.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// persistedQueriesMiddleware.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;invert&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'lodash'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;extractedQueries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;invert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'./extracted_queries.json'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="nx"&gt;persistedQueriesMiddleware&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Handling request to: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;querySignature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extensions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;persistedQuery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sha256Hash&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;persistedQuery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;extractedQueries&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;querySignature&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;persistedQuery&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Invalid querySignature'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Invalid querySignature'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;persistedQuery&lt;/span&gt;
  &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;persistedQueriesMiddleware&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Recall the persisted query request body from our React application. We need to pull out the &lt;code&gt;sha256Hash&lt;/code&gt; value as our signature and do a lookup in our &lt;code&gt;extracted_queries.json&lt;/code&gt; file for the matching query. If we find a match, then we can set the &lt;em&gt;query&lt;/em&gt; to the actual query string and pass the request through to the underlying server to be resolved.&lt;/p&gt;

&lt;h1&gt;Reflection&lt;/h1&gt;

&lt;p&gt;At this point we&amp;rsquo;ve built:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An Express server that exposes a GraphQL API.&lt;/li&gt;
&lt;li&gt;A React application that uses Apollo to communicate with our GraphQL API.&lt;/li&gt;
&lt;li&gt;A script to help to with extracting persisted queries from our React application.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our Express server is using a static file, &lt;code&gt;extracted_queries.json&lt;/code&gt;, to do the mapping of the query to the signature. While this approach gets the job done, you might want to take it to the next level where this information is stored in a database (or similar storage). This adaptation comes with the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If we&amp;rsquo;re using a database, it becomes possible to create more analytics and administration around persisted queries.&lt;/li&gt;
&lt;li&gt;If you have multiple clients, they would all produce their own JSON file of persisted queries. You will then have to track/manage/merge these and possible commit them to your server code.&lt;/li&gt;
&lt;li&gt;Each time you update your persisted queries you will require a restart or redeployment of the server. With a database synchronization approach, you can send the queries to be persisted while the server is running.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will take a look at the next iteration of our persisted queries implementation, one that&amp;rsquo;ll use synchronization &amp;ndash; using a Rails server backed by a database. We will cover this in the third part of our series.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>GraphQL Persisted Queries with HTTP Caching [Part 1]</title>
    <link rel="alternate" href="https://kevinjalbert.com/graphql-persisted-queries-with-http-caching-part-1/"/>
    <id>https://kevinjalbert.com/graphql-persisted-queries-with-http-caching-part-1/</id>
    <updated>2018-07-16T22:29:47-04:00</updated>
    <published>2018-07-15T19:53:20-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">This is the first of four parts on GraphQL Persisted Queries with HTTP Caching. We start by describing some problems with GraphQL due to its flexibility, and how we can solve the issues with persisted queries.</description>
    <content type="html">&lt;p&gt;GraphQL is a fast growing API specification, with aims of replacing REST APIs. A GraphQL server describes the data capabilities through the use of a type system and resolvers. A client is able to send a descriptive GraphQL query of what they want. The structure of the response then matches the query, providing a predictable result. There are many benefits to GraphQL servers and clients, to which I am not going to cover here as there is plenty of material on the Internet talking about those.&lt;/p&gt;

&lt;p&gt;This four-part blog post series is specifically covering the topic of &lt;em&gt;GraphQL Persisted Queries&lt;/em&gt;. A persisted query is a slight modification to the GraphQL specification that allows for better performance and security, at the cost of less flexibility. I will cover a bit of history regarding persisted GraphQL queries, along with the problems it solves. We will look at how to implement persisted queries in Rails and Express. As an extension to persisted queries, we will look at how to adapt them to take advantage of HTTP caching.&lt;/p&gt;

&lt;h1&gt;Problems with GraphQL&lt;/h1&gt;

&lt;p&gt;GraphQL presents a flexible endpoint to which clients can send queries, however, this flexibility comes at a cost. The following three concerns are specifically targeting performance and security:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Queries could be large (i.e., data being sent) when compared to a standard REST endpoint&lt;/li&gt;
&lt;li&gt;Queries could be inefficiently constructed (i.e., resource expensive)&lt;/li&gt;
&lt;li&gt;Queries could be maliciously constructed (i.e., circular in nature)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a consumer of a GraphQL API, it possible to construct &lt;em&gt;any query&lt;/em&gt; for the server to process. You can hope that the consumers are doing their best to create good queries, but in a public API that might not be the case. You might have ill-informed users creating very expensive queries, or even a bad actor trying to timeout or cripple your server by sending deeply cyclical queries.&lt;/p&gt;

&lt;p&gt;There are several ways to mitigate these issues, as further outlined by &lt;a href="https://twitter.com/mxstbr"&gt;Max Stoiber&amp;rsquo;s&lt;/a&gt; article on &lt;a href="https://dev-blog.apollodata.com/securing-your-graphql-api-from-malicious-queries-16130a324a6b"&gt;&lt;em&gt;Securing Your GraphQL API from Malicious Queries&lt;/em&gt;&lt;/a&gt;. In particular:
 - &lt;em&gt;Depth Limiting&lt;/em&gt;: Rejecting queries which are too deeply nested
 - &lt;em&gt;Amount Limiting&lt;/em&gt;: Rejecting queries which ask for too much information (i.e., via pagination arguments)
 - &lt;em&gt;Query Cost Analysis&lt;/em&gt;: Rejecting queries which are too expensive (by assigning complexity values to fields)
 - &lt;em&gt;Query Whitelisting&lt;/em&gt;: Rejecting queries that are not whitelisted&lt;/p&gt;

&lt;p&gt;I would like to also add &lt;em&gt;Time Limiting&lt;/em&gt;, which would reject queries that take too long to resolve.  &lt;em&gt;Query Whitelisting&lt;/em&gt; is only applicable for private APIs, but otherwise, these are all good approaches for preventing malicious or expensive queries from hitting your API. As per the topic we are covering, we&amp;rsquo;ll focus on Query Whitelisting (otherwise known as Persisted Queries).&lt;/p&gt;

&lt;h1&gt;Persisted Queries&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://twitter.com/leeb/status/829434814402945026"&gt;Facebook has been using persisted queries since 2013&lt;/a&gt;, and comes highly recommended for production usage from them. The essence of a persisted query is that the query is &lt;em&gt;persisted&lt;/em&gt; on the server&amp;rsquo;s side and that a client can &lt;em&gt;reference&lt;/em&gt; it using some unique identifier. A great primer on persisted queries can be found on &lt;a href="https://dev-blog.apollodata.com/persisted-graphql-queries-with-apollo-client-119fd7e6bba5"&gt;Apollo&amp;rsquo;s blog article for this topic&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For the sake of completeness, I want to demonstrate a scenario where persisted queries shine.&lt;/p&gt;

&lt;p&gt;A client sends the following query to the server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;query&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;company&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;consoles&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="n"&gt;releaseYear&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;No problems so far! Now a bad actor sends the following query:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;query&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;company&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;consoles&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="n"&gt;company&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="n"&gt;consoles&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="n"&gt;company&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="n"&gt;consoles&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="c"&gt;# ... continues nesting till happy with the damage&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The server evaluating this query can experience performance or stability issues due to the deep nesting and complex nature of the query. Going forward, we will make some assumptions about our API:
 - We control both the server and the clients (i.e., web/mobile clients)
 - We don&amp;rsquo;t expose a public API (it is accessible, but it isn&amp;rsquo;t promoted for external usage)
 - The data being returned from the queries is not personalized&lt;/p&gt;

&lt;p&gt;In our specific case, we can use persisted queries to remedy the issue of malicious users sending bad queries to our API. In addition, we will also gain some performance benefits (i.e., reducing the request&amp;rsquo;s network size).&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Persist the query on the server and make note of the signature of the query (i.e., a hash of the query)&lt;/li&gt;
&lt;li&gt;The client sends the query signature to the server, along with any query variables&lt;/li&gt;
&lt;li&gt;Using the signature, the server looks up the matching query from a set of persisted queries&lt;/li&gt;
&lt;li&gt;The server executes the query and returns the data&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That sounds great, but how can we go about implementing this? As previously mentioned, persisted queries are not part of the official specification. There are many implementations that exist, as well as some tooling for supporting persisted queries. In my experience at the time of writing this, there wasn&amp;rsquo;t a standard way to implement persisted queries.&lt;/p&gt;

&lt;p&gt;I want to stress the following: &lt;strong&gt;Persisted Queries only work if you control the server and the client&lt;/strong&gt;. In theory, you could use persisted queries on public APIs, although the &lt;em&gt;security&lt;/em&gt; gains are not present. I do want to mention that &lt;a href="https://dev-blog.apollodata.com/improve-graphql-performance-with-automatic-persisted-queries-c31d27b8e6ea"&gt;Automatic Persisted Queries&lt;/a&gt; is one way which uses the concept of persisted queries solely for performance gains.&lt;/p&gt;

&lt;h1&gt;Implementing GraphQL Persisted Queries with HTTP Caching&lt;/h1&gt;

&lt;p&gt;For the sake of brevity and focus, this series will focus on the following platforms:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/facebook/react/"&gt;React&lt;/a&gt; with &lt;a href="https://github.com/apollographql/apollo-client"&gt;Apollo Client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/expressjs/express"&gt;Express&lt;/a&gt; with &lt;a href="https://github.com/prismagraphql/graphql-yoga"&gt;GraphQL Yoga&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rails/rails"&gt;Rails&lt;/a&gt; with &lt;a href="https://github.com/rmosolgo/graphql-ruby"&gt;GraphQL Ruby&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Part two will cover the following sections:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Setup Express Server&lt;/li&gt;
&lt;li&gt;Setup React Application&lt;/li&gt;
&lt;li&gt;Refactor React Application to use Persisted Queries&lt;/li&gt;
&lt;li&gt;Extract GraphQL Queries from Client&lt;/li&gt;
&lt;li&gt;Refactor Express Server to use Persisted Queries&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Part three will cover the following sections:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Setup Rails Server&lt;/li&gt;
&lt;li&gt;Synchronize GraphQL Queries to Rails Server&lt;/li&gt;
&lt;li&gt;Refactor Rails Server to use Persisted Queries&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Part four will cover the following sections:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add HTTP Caching to React Application&lt;/li&gt;
&lt;li&gt;Add HTTP Caching to Express Server&lt;/li&gt;
&lt;li&gt;Add HTTP Caching to Rails Server&lt;/li&gt;
&lt;li&gt;Alternative Caching with Gateways&lt;/li&gt;
&lt;/ol&gt;
</content>
  </entry>
  <entry>
    <title>Migrating PostgreSQL to Aurora with near Zero-Downtime</title>
    <link rel="alternate" href="https://kevinjalbert.com/migrate-postgresql-to-aurora-with-near-zero-downtime/"/>
    <id>https://kevinjalbert.com/migrate-postgresql-to-aurora-with-near-zero-downtime/</id>
    <updated>2018-07-16T22:29:47-04:00</updated>
    <published>2018-06-30T19:53:20-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">The goal here is to migrate an Amazon Web Services Relational Database Service PostgreSQL Database to Aurora with as little downtime as possible. The following documents the initial strategy that was considered using read replica promotion, followed by the end result using AWS's Database Migration Service.</description>
    <content type="html">&lt;p&gt;The goal here is to migrate an Amazon Web Services (AWS) Relational Database Service (RDS) PostgreSQL Database to Aurora with as little downtime as possible. The following documents the initial strategy that was considered using read replica promotion, followed by the end result using AWS&amp;rsquo;s Database Migration Service (DMS).&lt;/p&gt;

&lt;h1&gt;Why Aurora&lt;/h1&gt;

&lt;p&gt;From the &lt;a href="https://aws.amazon.com/rds/aurora/details/"&gt;Aurora Details Page&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Amazon Aurora is designed to offer greater than 99.99% availability, increasing MySQL and PostgreSQL performance and availability by tightly integrating the database engine with an SSD-backed virtualized storage layer purpose-built for database workloads. Amazon Aurora&amp;rsquo;s storage is fault-tolerant and self-healing and disk failures are repaired in the background without loss of database availability. Amazon Aurora is designed to automatically detect database crashes and restart without the need for crash recovery or to rebuild the database cache. If the entire instance fails, Amazon Aurora will automatically fail over to one of up to 15 read replicas.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Essentially, better performance, reliability, and the ability to scale.&lt;/p&gt;

&lt;p&gt;Our configuration changes become easier. Aurora acts as a cluster, so we have two endpoints to deal with, and the replicas underneath will adjust dynamically. We use &lt;a href="https://github.com/taskrabbit/makara"&gt;Makara&lt;/a&gt; to spread our database queries between our master and slaves. With RDS PostgreSQL we would have to enumerate all our slave databases so we could take advantage of the replicas. If we added a new replica, we would have to adjust our configuration to take advantage of it. With Aurora, we have two endpoints to deal with now (primary/writer and a read-only URL). These endpoints will dynamically rotate between the available instances that fall under that cluster URL. This is great as it handles a failover to a different primary database, or changing the number of replicas. Effectively, we end up with less configuration, but we still need Makara to direct our write and read queries to the two cluster URLs.&lt;/p&gt;

&lt;h1&gt;Migration Approaches&lt;/h1&gt;

&lt;p&gt;As mentioned earlier, there are two approaches to doing this migration. First, we&amp;rsquo;ll cover the &lt;em&gt;recommended&lt;/em&gt; approach that AWS suggested as we&amp;rsquo;re on the RDS platform. As we&amp;rsquo;ll cover, it is easy and quick but it does incur downtime during the migration. The second approach uses DMS and was brought up to us after opening a support ticket with AWS on how to do our migration with zero downtime.&lt;/p&gt;

&lt;h2&gt;Read Replica Promotion&lt;/h2&gt;

&lt;p&gt;This is the &lt;em&gt;recommended&lt;/em&gt; approach for migrating from PostgreSQL to Aurora. It is easy and has a little risk (during the migration), although it has unavoidable downtime.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create an Aurora read replica off of your master database.&lt;/li&gt;
&lt;li&gt;Pause the master PostgreSQL database.

&lt;ul&gt;
&lt;li&gt;This is done so that the no additional write changes are occurring (as it won&amp;rsquo;t be replicated to the Aurora read replica during the promotion process).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Promote the Aurora read replica.

&lt;ul&gt;
&lt;li&gt;This takes about 10-20 minutes (at least in our experience).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Deploy app configuration changes to use new Aurora cluster for write/reads.&lt;/li&gt;
&lt;li&gt;Immediately start building additional read replicas to match existing number.

&lt;ul&gt;
&lt;li&gt;Each one takes about 5-10 minutes to create (at least in our experience).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;When happy with the new setup, remove/delete the old databases.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is &lt;em&gt;recommended&lt;/em&gt; to do a dry run of the promotion (and just throw it away afterwards) to gauge how long that process takes.&lt;/p&gt;

&lt;p&gt;The issue here is that you have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Downtime due to the promotion process. You need to prevent writes from happening on the master. Replication between the PostgreSQL master and the Aurora read replica breaks when the promotion process starts.&lt;/li&gt;
&lt;li&gt;Immediately after you have your new Aurora master, you need to start building read replicas up.

&lt;ul&gt;
&lt;li&gt;In our case, we would want to match our existing number of replicas. So this would take additional time. Otherwise, you possibly run the risk of overwhelming the Database without those read replicas up.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One good thing is that even with the downtime the old read replicas will continue to serve up &lt;code&gt;GET&lt;/code&gt; requests. In addition, any CDN/&lt;a href="https://varnish-cache.org/"&gt;Varnish&lt;/a&gt; caching will also help serve stale data during the downtime.&lt;/p&gt;

&lt;h2&gt;Full Load and Ongoing Replication with DMS&lt;/h2&gt;

&lt;p&gt;This approach is much more involved and finicky, but it does offer a &lt;em&gt;near&lt;/em&gt; zero-downtime migration strategy. The general process here is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create an Aurora read replica (this is so we can keep the DB schema)&lt;/li&gt;
&lt;li&gt;Promote Aurora read replica so it is on its own&lt;/li&gt;
&lt;li&gt;Tweak settings on PostgreSQL DB&lt;/li&gt;
&lt;li&gt;Setup DMS Endpoints for the original PostgreSQL and Aurora databases&lt;/li&gt;
&lt;li&gt;Setup DMS Replication Instance to assist in the migration&lt;/li&gt;
&lt;li&gt;Setup DMS Task to use the endpoints and the replication instance&lt;/li&gt;
&lt;li&gt;Truncate Aurora data (we want to wipe the data, but we keep the schema)&lt;/li&gt;
&lt;li&gt;Initiate the migration

&lt;ul&gt;
&lt;li&gt;The first phase is a &lt;em&gt;full load&lt;/em&gt; of the tables from the source to the target&lt;/li&gt;
&lt;li&gt;The second phase is an &lt;em&gt;on-going replication&lt;/em&gt; of changes from the source to the target&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Both DBs are in-sync now&lt;/li&gt;
&lt;li&gt;Create read replicas off of the Aurora master&lt;/li&gt;
&lt;li&gt;Change app configuration to point to Aurora cluster&lt;/li&gt;
&lt;li&gt;Delete old DBs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a multi-part process, so the following sections will walk through each part.&lt;/p&gt;

&lt;h3&gt;Setting up Aurora Read Replica&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Create an Aurora read replica of the PostgreSQL database

&lt;ul&gt;
&lt;li&gt;Name it something like &lt;code&gt;&amp;lt;service&amp;gt;—&amp;lt;environment&amp;gt;-aurora&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;By creating an Aurora instance, we also get an Aurora cluster (i.e., &lt;code&gt;&amp;lt;service&amp;gt;—&amp;lt;environment&amp;gt;-aurora-cluster&lt;/code&gt;)

&lt;ul&gt;
&lt;li&gt;Ensure the subnet group and the security groups are set to the same values as defined for the PostgreSQL DB.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;You don&amp;rsquo;t need to have multi-AZ here, Aurora will handle fast failover if we have a replica&lt;/li&gt;
&lt;li&gt;Additional read replicas can then be added later using &lt;code&gt;&amp;lt;service&amp;gt;—&amp;lt;environment&amp;gt;-aurora-&amp;lt;##&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this point, we will have an Aurora read replica that is receiving replicated data changes off the master.&lt;/p&gt;

&lt;h3&gt;Aurora Read Replica Promotion&lt;/h3&gt;

&lt;p&gt;To isolate our newly created Aurora read replica so it can be its own master, we&amp;rsquo;re going to promote the replica. This process allows the instance to receive writes, and be the master for other replicas. We need to do this as otherwise we are limited to only one Aurora read replica off of a PostgreSQL master database. By starting the promotion process the on-going replication is broken between the PostgreSQL and Aurora databases.&lt;/p&gt;

&lt;h3&gt;Tweak the Database Parameters&lt;/h3&gt;

&lt;p&gt;To enable the ability for PostgreSQL to replicate to Aurora we need to make sure we have certain database parameters set.&lt;/p&gt;

&lt;h4&gt;Configure PostgreSQL for Replication&lt;/h4&gt;

&lt;p&gt;The first thing you need to do is change the &lt;code&gt;rds.logical_replication&lt;/code&gt; parameter to 1. As described in &lt;a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.PostgreSQL.html#CHAP_Source.PostgreSQL.RDSPostgreSQL"&gt;the documentation&lt;/a&gt; this parameter actually configures additional related parameters that allow the replication to process:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As part of applying this parameter, AWS DMS sets the &lt;code&gt;wal_level&lt;/code&gt;, &lt;code&gt;max_wal_senders&lt;/code&gt;, &lt;code&gt;max_replication_slots&lt;/code&gt;, and &lt;code&gt;max_connections&lt;/code&gt; parameters.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Another parameter configuration that &lt;a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.PostgreSQL.html#CHAP_Source.PostgreSQL.Prerequisites"&gt;Amazon recommends&lt;/a&gt; is to set &lt;code&gt;wal_sender_timeout&lt;/code&gt; to 0.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;wal_sender_timeout&lt;/code&gt; parameter terminates replication connections that are inactive longer than the specified number of milliseconds. Although the default is 60 seconds, we recommend that you set this parameter to zero, which disables the timeout mechanism.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Without setting the timeout parameter, the streaming of Write-Ahead Logging (WAL) files can be terminated if the sender is under load and does not send a WAL file within the timeout period. To prevent any risk of this it is best to disable it during the on-going replication phase of the migration process.&lt;/p&gt;

&lt;p&gt;There are additional &lt;code&gt;wal&lt;/code&gt; settings available, but we &lt;em&gt;shouldn&amp;rsquo;t&lt;/em&gt; need to configure them.&lt;/p&gt;

&lt;h4&gt;Configure Aurora for Replication&lt;/h4&gt;

&lt;p&gt;On the Aurora instance, we want to limit any foreign key constraints from triggering as the full loads for tables are occurring. Fortunately, if we change the &lt;code&gt;session_replication_role&lt;/code&gt; parameter to &lt;code&gt;replica&lt;/code&gt;, it only keeps &lt;em&gt;replica&lt;/em&gt; related constraint triggers active. This effectively disables foreign key constraints for us.&lt;/p&gt;

&lt;h3&gt;Create Replication Instance&lt;/h3&gt;

&lt;p&gt;DMS uses a dedicated &lt;em&gt;replication instance&lt;/em&gt; to help facilitate the migration process. In a PostgreSQL to Aurora migration, this machine is responsible for connecting to both the source and target databases and transforming and transferring the data.&lt;/p&gt;

&lt;p&gt;The following steps expand on what is needed to set up a replication instance for the migration.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a replication instance under DMS

&lt;ul&gt;
&lt;li&gt;Name it as specific as possible for its purpose (i.e., production-api-replication-instance)&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;Instance Size&lt;/em&gt; might need to be tweaked based on various factors (&lt;a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_ReplicationInstance.html#CHAP_ReplicationInstance.InDepth"&gt;documentation on instance sizes&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;For example, in our staging we used &lt;code&gt;dms.t2.large&lt;/code&gt;, while for production we used &lt;code&gt;dms.c4.large&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set the &lt;em&gt;VPC&lt;/em&gt; to the same as the source and target databases&lt;/li&gt;
&lt;li&gt;Enable &lt;em&gt;Multi-AZ&lt;/em&gt; as it is needed for on-going replication&lt;/li&gt;
&lt;li&gt;The instance doesn’t need to be &lt;em&gt;Publicly Accessible&lt;/em&gt; (as the internal connections are done within the VPC)&lt;/li&gt;
&lt;li&gt;Ensure the &lt;em&gt;VPC Security Group&lt;/em&gt; under &lt;em&gt;Advance&lt;/em&gt; is set to &lt;code&gt;default&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;This allows for connections between the databases and the replication instance&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Create Source and Target Endpoints&lt;/h3&gt;

&lt;p&gt;We need to define the &lt;em&gt;endpoints&lt;/em&gt; of our databases in DMS. One to represent the source database (PostgreSQL) and another to represent the target database (Aurora). The following steps are to be applied to each endpoint.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;em&gt;Server Name&lt;/em&gt; is the DB’s endpoint (i.e., the connection URL)

&lt;ul&gt;
&lt;li&gt;You cannot use a read replica as your source (it does not support on-going replication)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;User&lt;/em&gt; and &lt;em&gt;Password&lt;/em&gt; are for the master user account of the database

&lt;ul&gt;
&lt;li&gt;The account &lt;em&gt;needs&lt;/em&gt; to be the master account. Otherwise, you need to follow the additional instructions listed in the &lt;a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.PostgreSQL.html#CHAP_Source.PostgreSQL.RDSPostgreSQL"&gt;documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;Password&lt;/em&gt; cannot have certain characters (&lt;code&gt;: ; + %&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Test the endpoint

&lt;ul&gt;
&lt;li&gt;After a success ensure you refresh the schema&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Create Task&lt;/h3&gt;

&lt;p&gt;The DMS &lt;em&gt;task&lt;/em&gt; is where we actually configure and use the &lt;em&gt;endpoints&lt;/em&gt; and &lt;em&gt;replication instance&lt;/em&gt; to accomplish the migration. There are a couple of options and considerations to be made while creating a task. The following steps outline how to create a task, and the settings to configure:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use the &lt;em&gt;source and target endpoints&lt;/em&gt; along with the &lt;em&gt;replica instance&lt;/em&gt; that was created for this migration task&lt;/li&gt;
&lt;li&gt;Set the &lt;em&gt;Migration type&lt;/em&gt; to &lt;code&gt;Migrate existing data and replicate ongoing changes&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;This ensures that we are doing the 2 phase approach:&lt;/li&gt;
&lt;li&gt;Doing a full-load of the table&amp;rsquo;s data&lt;/li&gt;
&lt;li&gt;Doing on-going replication of changes on the source database&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Target table preparation mode&lt;/em&gt; should be &lt;code&gt;Do nothing&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;The reason here is that we want to preserve the table&amp;rsquo;s metadata (i.e., indexes, defaults, constraints)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Truncate&lt;/code&gt; could work, but is likely to fail due to constraints in the database&lt;/li&gt;
&lt;li&gt;Remember that by using &lt;code&gt;Do nothing&lt;/code&gt; the target database needs to be truncated manually prior to running the task&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Stop task after full load completes&lt;/em&gt; should be set to &lt;code&gt;Don&amp;#39;t stop&lt;/code&gt;.

&lt;ul&gt;
&lt;li&gt;This ensures the on-going replication process starts immediately when a table is fully loaded&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;For the table mappings, we want to migrate all tables (i.e., &lt;code&gt;where schema name is like &amp;#39;public&amp;#39; and table name is like &amp;#39;%&amp;#39;, include&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;It is useful to enable the &lt;em&gt;validation&lt;/em&gt; and &lt;em&gt;logging&lt;/em&gt; to see how things are progressing during the migration&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Include LOB columns in replication&lt;/em&gt; is an interesting setting, LOBs are &lt;em&gt;Large Objects&lt;/em&gt; that exist during the migration. As DMS is possibly migrating to a different database type a transformation of data types occurs. To understand what we&amp;rsquo;re dealing with you need to look up the source database&amp;rsquo;s supported types in the documentation. For example, using the DMS documentation you can see what &lt;a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.PostgreSQL.html#CHAP_Source.PostgreSQL.DataTypes"&gt;PostgreSQL data types&lt;/a&gt; end up being LOBs.&lt;/p&gt;

&lt;p&gt;The following section will dig a little deeper into LOBs and the considerations that need to be considered.&lt;/p&gt;

&lt;h4&gt;Full or Limited LOB Mode&lt;/h4&gt;

&lt;p&gt;There are two options for handling LOBs during the migration: &lt;em&gt;Full&lt;/em&gt; or &lt;em&gt;Limited&lt;/em&gt; LOB Mode. LOBs are potentially massive objects that reside in the database, and they normally don&amp;rsquo;t have a fixed size in the column. The following &lt;a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.LOBSupport.html"&gt;documentation&lt;/a&gt; describes the two options:&lt;/p&gt;

&lt;p&gt;DMS provides you with the &lt;em&gt;Full LOB Mode&lt;/em&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In full LOB mode, AWS DMS migrates all LOBs from source to target regardless of size. In this configuration, AWS DMS has no information about the maximum size of LOBs to expect. Thus, LOBs are migrated one at a time, piece by piece. Full LOB mode can be quite slow.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;DMS also provides the &lt;em&gt;Limited LOB Mode&lt;/em&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In limited LOB mode, you set a maximum size LOB that AWS DMS should accept. Doing so allows AWS DMS to pre-allocate memory and load the LOB data in bulk. LOBs that exceed the maximum LOB size are truncated and a warning is issued to the log file. In limited LOB mode, you get significant performance gains over full LOB mode. We recommend that you use limited LOB mode whenever possible.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Initially, it makes sense to just use &lt;em&gt;Full LOB Mode&lt;/em&gt; as it&amp;rsquo;ll preserve data by migrating LOBs regardless of size. The big issue with this choice is &lt;em&gt;speed&lt;/em&gt;. In our migration, we achieve full migration in 2 hours using &lt;em&gt;Limited LOB Mode&lt;/em&gt; and we estimated about 90 hours using &lt;em&gt;Full LOB Mode&lt;/em&gt;. The issue with using &lt;em&gt;Limited LOB Mode&lt;/em&gt; is that you can essentially lose data if the LOB&amp;rsquo;s size is less than the &lt;code&gt;Max LOB Size&lt;/code&gt; parameter.&lt;/p&gt;

&lt;p&gt;To work around this concern, the plan is to determine the max LOB size in the database and set the &lt;code&gt;Max LOB Size&lt;/code&gt; to slightly bigger than that value (i.e., multiply it by 2). By using a larger &lt;code&gt;Max LOB Size&lt;/code&gt; than the largest LOB we have in the database, we are ensured to have the full data migrated without any data loss.&lt;/p&gt;

&lt;p&gt;A manual way to check for the size of a LOB column is to use the following query: &lt;code&gt;SELECT max(pg_column_size(column_name)) FROM table_name;&lt;/code&gt;. This will return the max number of bytes used in that column. This is the value you&amp;rsquo;ll want to be larger than. The following is a Rails rake task that walks through every table&amp;rsquo;s column and identifies the max sizes for any LOB column (for PostgreSQL):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="ss"&gt;:scripts&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="s1"&gt;'Print out the max size of LOBs in the database. Usage: bin/rake scripts:max_lob_size'&lt;/span&gt;
  &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ss"&gt;max_lob_size: :environment&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="no"&gt;LOB_TYPES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sx"&gt;%w(
      hstore
      composite
      array
      jsonb
      json
      polygon
      path
      xml
      tsquery
      tsvector
      bytea
      text
    )&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;freeze&lt;/span&gt;

    &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;tables&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;table_name&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="k"&gt;next&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;table_name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'schema_migrations'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;table_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;starts_with?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'awsdms_'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="n"&gt;columns_sql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;~&lt;/span&gt;&lt;span class="no"&gt;HEREDOC&lt;/span&gt;&lt;span class="sh"&gt;
        SELECT *
        FROM information_schema.columns
        WHERE table_schema = 'public'
          AND table_name   = '&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;table_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sh"&gt;'
&lt;/span&gt;&lt;span class="no"&gt;      HEREDOC&lt;/span&gt;

      &lt;span class="n"&gt;columns_results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columns_sql&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="n"&gt;columns_results&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="n"&gt;column_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'column_name'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;column_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'data_type'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="no"&gt;LOB_TYPES&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column_type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="n"&gt;size_sql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;~&lt;/span&gt;&lt;span class="no"&gt;HEREDOC&lt;/span&gt;&lt;span class="sh"&gt;
            SELECT max(pg_column_size(&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sh"&gt;)) FROM &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;table_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sh"&gt;;
&lt;/span&gt;&lt;span class="no"&gt;          HEREDOC&lt;/span&gt;
          &lt;span class="n"&gt;size_results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size_sql&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

          &lt;span class="n"&gt;table_hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;table_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_sym&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
          &lt;span class="n"&gt;column_hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;table_hash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_sym&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

          &lt;span class="n"&gt;column_hash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:column_type&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;column_type&lt;/span&gt;
          &lt;span class="n"&gt;column_hash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:max_bytes_size&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size_results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'max'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;to_i&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;

        &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'.'&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;Raw Dump"&lt;/span&gt;
    &lt;span class="n"&gt;pp&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;

    &lt;span class="n"&gt;max_bytes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;first&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:max_bytes_size&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;compact&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;max&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Max bytes found in a LOB column is &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;max_bytes&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;LOB Nullability Constraints&lt;/h4&gt;

&lt;p&gt;There are some concerns with &lt;code&gt;NOT NULL&lt;/code&gt; database constraints on columns that become LOBs during the migration. DMS has a certain process for dealing with tables with LOBs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The data for each column in a row is added, except for LOB columns&lt;/li&gt;
&lt;li&gt;LOB columns are left with a &lt;code&gt;null&lt;/code&gt; placeholder&lt;/li&gt;
&lt;li&gt;Afterwards, LOB data replaces the &lt;code&gt;null&lt;/code&gt; placeholders&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This two-step process of dealing with LOB data types is where we have to be concerned with &lt;code&gt;NOT NULL&lt;/code&gt; constraints. The migration will fail if any LOB columns have a &lt;code&gt;NOT NULL&lt;/code&gt; constraint. In PostgreSQL, a common case of LOBs is &lt;code&gt;jsonb&lt;/code&gt; and &lt;code&gt;array&lt;/code&gt; columns. So we have to &lt;em&gt;remove&lt;/em&gt; these constraints on the target database just until the full table load phase is done. For example, the following statement would do the trick, &lt;code&gt;ALTER TABLE my_table ALTER COLUMN lob_column DROP NOT NULL;&lt;/code&gt;. Do not forget to add the &lt;code&gt;NOT NULL&lt;/code&gt; constraints back after the full table load phase is done.&lt;/p&gt;

&lt;h3&gt;Migration Time&lt;/h3&gt;

&lt;p&gt;At this point, the migration process is pretty much ready! Let&amp;rsquo;s break the process up into before/during/after migration.&lt;/p&gt;

&lt;h4&gt;Before Migration&lt;/h4&gt;

&lt;p&gt;Make sure that the:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The DMS endpoints, task and replication instance are present and configured&lt;/li&gt;
&lt;li&gt;The Aurora instance is ready:

&lt;ul&gt;
&lt;li&gt;Truncated data&lt;/li&gt;
&lt;li&gt;Disabled LOB nullability constraints&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One thing that is suggested is to run &lt;code&gt;Assess&lt;/code&gt; on the task so you can get a report of potential issues. In our case, there were a couple of &lt;em&gt;Partially supported datatypes : float8&lt;/em&gt; on a few columns. This ended up changing the rounding of floats (i.e., 1.4999999998 &amp;ndash;&amp;gt; 1.5). It is worth noting that these differences occur after the migration process is completed and changes are being done on the new database type.&lt;/p&gt;

&lt;p&gt;For the migration, ideally, it is done during a &lt;em&gt;low&lt;/em&gt; activity period. In addition, if possible stop any background jobs just before the migration, and wait for the current jobs to finish. The jobs can resume processing after the migration, this is to reduce risk.&lt;/p&gt;

&lt;h4&gt;During Migration&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Keep an eye on the source database&amp;rsquo;s health

&lt;ul&gt;
&lt;li&gt;There will be additional load placed on it during the migration&lt;/li&gt;
&lt;li&gt;If needed you could always lower the number of tables loaded in parallel during the &lt;em&gt;full load&lt;/em&gt; phase (under the advanced settings in the &lt;em&gt;Task&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Monitor the task&amp;rsquo;s &lt;em&gt;Table Statistics&lt;/em&gt; tab to make sure tables are progressing well&lt;/li&gt;
&lt;li&gt;Monitor the task&amp;rsquo;s &lt;em&gt;Task Monitoring&lt;/em&gt; tab to make sure the on-going replication is keeping up

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;CDCIncomingChanges&lt;/code&gt; should be as close to 0 as possible&lt;/li&gt;
&lt;li&gt;During the &lt;em&gt;full load&lt;/em&gt; phase, the &lt;code&gt;CDCIncomingChanges&lt;/code&gt; will climb as the on-going replication changes are stored until the tables have fully loaded into the target database&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Monitor the replication instance&amp;rsquo;s &lt;em&gt;Monitoring&lt;/em&gt; tab to make sure the &lt;code&gt;FreeStorageSpace&lt;/code&gt; and &lt;code&gt;FreeableMemory&lt;/code&gt; are not dropping too low

&lt;ul&gt;
&lt;li&gt;If any of these are too low then the migration can fail&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first phase is &lt;em&gt;full table load&lt;/em&gt;, where all the source data is dumped into the target. Be aware that large tables can take some time. After a table has been fully loaded into the target, the on-going replication phase starts for that table.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;on-going replication&lt;/em&gt; phase is where &lt;em&gt;inserts/deletes/updates&lt;/em&gt; are replicated from the source to the target. After all the tables are in this phase (all tables in a &lt;em&gt;Table Completed&lt;/em&gt; state), it is now safe to re-enable the LOB nullability constraints that were disabled earlier.&lt;/p&gt;

&lt;h5&gt;Validations&lt;/h5&gt;

&lt;p&gt;If you have validations enabled for the &lt;em&gt;Task&lt;/em&gt; then the &lt;em&gt;validation&lt;/em&gt; columns in the &lt;em&gt;Table Statistics&lt;/em&gt; will update during the migration. These validations put additional load on the source and target database as the row data is compared after that row has been migrated. It is an on-going validation process.&lt;/p&gt;

&lt;p&gt;Personally, I found the validation to be very flaky. It is either &lt;em&gt;really slow&lt;/em&gt; and it also reports validation errors that are not actual errors. In our case, we didn&amp;rsquo;t pay much attention to the validation failures as spot checking proved that the data was &lt;em&gt;fine&lt;/em&gt;. There were &lt;em&gt;minor&lt;/em&gt; cases where time columns were &lt;em&gt;slightly off&lt;/em&gt;. I am unsure how the validation actually works (i.e., when it does the checks), as the on-going replication could be lagging behind. According to the &lt;a href="https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Validating.html#CHAP_Validating.Limitations"&gt;documentation&lt;/a&gt;, there are some limitations that might prevent it from being that useful:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If one or more rows are being continuously modified during the validation, then AWS DMS can&amp;rsquo;t validate those rows. However, you can validate those &lt;em&gt;busy&lt;/em&gt; rows manually, after the task completes.&lt;/li&gt;
&lt;li&gt;If AWS DMS detects more than 10,000 failed or suspended records, it will stop the validation. Before you proceed further, resolve any underlying problems with the data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In either case under the target&amp;rsquo;s database, there is a new table called &lt;code&gt;awsdms_validation_failures_v1&lt;/code&gt; that contains information on the failures. The &lt;code&gt;KEY&lt;/code&gt; and &lt;code&gt;TABLE_NAME&lt;/code&gt; columns can be used to identify the record in question. It is then possible to check the source and target record and see if there are any issues. One other problem we had with spot-checking validation is that our PostgreSQL database used &lt;code&gt;UUID&lt;/code&gt;s for primary keys, this resulted in the &lt;code&gt;KEY&lt;/code&gt; column having truncated data on the &lt;code&gt;UUID&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;After Migration&lt;/h4&gt;

&lt;p&gt;Hopefully, the migration went successfully, and both the source and target database are in-sync. At this point, the zero-downtime migration can occur &amp;ndash; simply point the application at the new database. It is advisable to wait for any replication lag or queued up &lt;code&gt;CDCIncomingChanges&lt;/code&gt; to drain before proceeding. You might have to wait a little bit for the connections of your application to cycle over to the new database, but you can monitor this in CloudWatch, or force the cycle (i.e., restart Rails Unicorn servers). Don&amp;rsquo;t forget to resume any background queues. After sufficient time, you can decommission the old database resources.&lt;/p&gt;

&lt;p&gt;In the event that the migration doesn&amp;rsquo;t go as planned, it is possible to revert back to the old database. The only issue is that any write data that occurred during the migration process (i.e., only on the Aurora database) wouldn&amp;rsquo;t be present on the old database (i.e., PostgreSQL database). This is simply an issue that cannot be worked around, and hopefully, the low activity period reduces the amount of data loss.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>iTerm2 Mouseless Copy</title>
    <link rel="alternate" href="https://kevinjalbert.com/iterm2-mouseless-copy/"/>
    <id>https://kevinjalbert.com/iterm2-mouseless-copy/</id>
    <updated>2018-07-16T22:29:47-04:00</updated>
    <published>2018-05-06T19:53:20-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">Learn how to keep your hands on the keyboard, and accomplish mouseless selection and copying in iTerm2. We explore the find and copy approach, along with iTerm2's copy mode.</description>
    <content type="html">&lt;p&gt;Where possible, I try to avoid using the mouse. I heavily use &lt;a href="https://www.vim.org/"&gt;Vim&lt;/a&gt; while editing which allows for keyboard navigation. I have taken such a liking to the Vim keyboard-bindings that I even use  &lt;a href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?hl=en"&gt;Vimium (a Google Chrome extension)&lt;/a&gt; for keyboard-driven navigation in my browser (for as much as I can). In addition, I use &lt;a href="https://itunes.apple.com/ca/app/bettersnaptool/id417375580"&gt;BetterSnapTool&lt;/a&gt; for MacOS, which allows me to move/resize windows around solely from my keyboard.&lt;/p&gt;

&lt;p&gt;One optimization within my terminal that I have been avoiding is &lt;a href="https://github.com/tmux/tmux"&gt;tmux&lt;/a&gt; &amp;ndash; it is unnecessarily complicated for what I need. For the most part, I am able to use &lt;a href="https://www.iterm2.com/"&gt;iTerm2&lt;/a&gt; to open tabs, split panes and navigate around. To be honest, I don&amp;rsquo;t really need the session keeping functionality that tmux or &lt;a href="http://www.gnu.org/software/screen/"&gt;screen&lt;/a&gt; provided. The big gain I was missing from tmux was the famed &lt;a href="https://minimul.com/increased-developer-productivity-with-tmux-part-8.html"&gt;copy mode&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A quick snippet from &lt;a href="https://www.iterm2.com/documentation-highlights.html"&gt;iTerm2&amp;rsquo;s documentation of highlights&lt;/a&gt; for text selection:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;You can use the mouse.&lt;/li&gt;
&lt;li&gt;You can use the find feature&amp;rsquo;s &amp;ldquo;mouseless copy&amp;rdquo; feature.&lt;/li&gt;
&lt;li&gt;You can use Copy Mode.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;The first one we&amp;rsquo;re not interested in as it&amp;rsquo;s the &lt;em&gt;standard&lt;/em&gt; way to select and copy text. We will cover others two in the sections that follow.&lt;/p&gt;

&lt;h2&gt;Find and Copy&lt;/h2&gt;

&lt;p&gt;So one approach to copying anything within the iTerm2&amp;rsquo;s session is to use the default &lt;em&gt;search&lt;/em&gt;. It is an interesting approach, to say the least:&lt;/p&gt;

&lt;p&gt;&lt;img width="648" height="445" src="/images/2018-05-06-iterm2-mouseless-copy/search-copy.gif" /&gt;&lt;/p&gt;

&lt;p&gt;Essentially, you initiate the search with &lt;em&gt;cmd+f&lt;/em&gt; and you can use the &lt;em&gt;enter&lt;/em&gt; and &lt;em&gt;tab&lt;/em&gt; to move your selection around and to control how much of the text you want in your selection. It works in a pinch, but if you mess up the amount of text in your selection, you basically have to restart the process. In addition, I found the &lt;em&gt;shift+tab&lt;/em&gt; command cycled the selected search result, leading to some confusion.&lt;/p&gt;

&lt;p&gt;To be honest, I don&amp;rsquo;t use this search copying approach very often. I find it difficult to get right, as you cannot really afford any mistakes. The following is a summary of this approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Searching for some text using &lt;em&gt;cmd+f&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Use &lt;em&gt;enter&lt;/em&gt; to move to the next search result.&lt;/li&gt;
&lt;li&gt;Use &lt;em&gt;shift+enter&lt;/em&gt; to move to the previous search result.&lt;/li&gt;
&lt;li&gt;Navigate until you are on the desired location.&lt;/li&gt;
&lt;li&gt;Use &lt;em&gt;tab&lt;/em&gt; to expand your search to the next word.&lt;/li&gt;
&lt;li&gt;Use &lt;em&gt;shift+tab&lt;/em&gt; to expand your search to the previous word.

&lt;ul&gt;
&lt;li&gt;Although it moves to the previous search result if one exists.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;When your search term is selected, use &lt;em&gt;cmd+c&lt;/em&gt; to copy the selection.&lt;/li&gt;
&lt;li&gt;Use &lt;em&gt;esc&lt;/em&gt; to exit search, and now you have the selection in your clipboard.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Copy Mode&lt;/h2&gt;

&lt;p&gt;This iTerm2 mode attempts to emulate as much of the tmux copy mode as possible, allowing you to make text selections using the keyboard. It is a &lt;em&gt;mode&lt;/em&gt; very much like Vim&amp;rsquo;s &lt;em&gt;insert&lt;/em&gt; and &lt;em&gt;normal&lt;/em&gt; modes. It is important to note that the session within the pane will stop updating when you enter copy mode.&lt;/p&gt;

&lt;p&gt;&lt;img width="648" height="445" src="/images/2018-05-06-iterm2-mouseless-copy/copy-mode.gif" /&gt;&lt;/p&gt;

&lt;p&gt;I highly recommend reading the &lt;a href="https://www.iterm2.com/documentation-copymode.html"&gt;documentation on iTerm2&amp;rsquo;s copy mode&lt;/a&gt; as it completely covers the keyboard shortcuts and features. Copy mode, in my opinion, is the superior of the two approaches for mouseless copying. I highly recommend giving it a shot the next time you reach for your mouse. The following is a quick summary of copy mode:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enter copy mode with &lt;em&gt;cmd+shift+c&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Basic Vim keybinding, many keystrokes can active different actions.

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;v&lt;/em&gt; to select by character.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;shift+v&lt;/em&gt; to select by line.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;ctrl+v&lt;/em&gt; for rectangular selection.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;ctrl+space&lt;/em&gt; to stop selecting.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;y&lt;/em&gt; to yank/copy the selection (also exits copy mode).&lt;/li&gt;
&lt;li&gt;&lt;em&gt;q&lt;/em&gt; to exit copy mode.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Can chain off of iTerm2&amp;rsquo;s search feature.&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Jest Snapshots: Reducing styled-jsx Noise</title>
    <link rel="alternate" href="https://kevinjalbert.com/jest-snapshots-reducing-styled-jsx-noise/"/>
    <id>https://kevinjalbert.com/jest-snapshots-reducing-styled-jsx-noise/</id>
    <updated>2018-07-16T22:29:47-04:00</updated>
    <published>2018-04-11T19:53:20-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">Learn how to eliminate the noise in your diffs when using Jest snapshots with styled-jsx.</description>
    <content type="html">&lt;p&gt;Facebook&amp;rsquo;s &lt;a href="https://facebook.github.io/jest/"&gt;Jest&lt;/a&gt; is a powerful testing framework for JavaScript. It works &lt;em&gt;out of the box&lt;/em&gt; for React projects and is essentially the de facto testing framework for React. When I began using Jest in combination with React I fell in love with the &lt;a href="https://facebook.github.io/jest/docs/en/snapshot-testing.html#snapshot-testing-with-jest"&gt;snapshot testing&lt;/a&gt; functionality. Having snapshots helps detect structural regressions in the rendered DOM, as per the homepage&amp;rsquo;s documentation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Capture snapshots of React trees or other serializable values to simplify testing and to analyze how state changes over time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;During my work with React and Jest, I was using &lt;a href="https://github.com/zeit/styled-jsx"&gt;&lt;code&gt;styled-jsx&lt;/code&gt;&lt;/a&gt; as my &lt;a href="https://hackernoon.com/all-you-need-to-know-about-css-in-js-984a72d48ebc"&gt;CSS-in-JS&lt;/a&gt; technology choice. Many times, I saw the following when I made any CSS changes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FAIL  src/App.test.js
● renders without crashing

  expect(value).toMatchSnapshot()

  Received value does not match stored snapshot 1.

  - Snapshot
  1. Received

  @@ -1,28 +1,23 @@
   &amp;lt;div
  -  className="jsx-188895008 App"
  +  className="jsx-3481390381 App"
   &amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is because the CSS changed for this scoped component and thus the &lt;code&gt;jsx-########&lt;/code&gt; (unique id) reflects the change.&lt;/p&gt;

&lt;p&gt;To me, these changes in the snapshot diffs are noise and it is harder to see the structural DOM changes. The original &lt;code&gt;className&lt;/code&gt; for the DOM elements are still present, and ideally, I would just want snapshots without any of the &lt;code&gt;styled-jsx&lt;/code&gt; stuff present.&lt;/p&gt;

&lt;p&gt;We will first start with a simplified &lt;code&gt;App&lt;/code&gt; component using &lt;a href="https://github.com/facebook/create-react-app"&gt;create-react-app&lt;/a&gt; as the base. The goal is to illustrate the project setup, what the snapshots look like, how to reduce the noise, and what the snapshots look like afterwards. &lt;code&gt;styled-jsx&lt;/code&gt; provides a way to style your components using &lt;em&gt;inline styles&lt;/em&gt; or &lt;em&gt;external CSS files&lt;/em&gt;, so we will consider both in this article. In addition, we will also consider both the &lt;code&gt;react-test-renderer&lt;/code&gt; and &lt;code&gt;enzyme&lt;/code&gt; Jest snapshot rendering methods.&lt;/p&gt;

&lt;p&gt;Given the above information, the following sections will cover these scenarios:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Inline styles with &lt;code&gt;react-test-renderer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Inline styles with &lt;code&gt;enzyme&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;External styles with &lt;code&gt;react-test-renderer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;External styles with &lt;code&gt;enzyme&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Inline Styles&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'react'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className=&lt;/span&gt;&lt;span class="s2"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Example Component
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt; &lt;span class="nt"&gt;jsx&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`
          .App {
            text-align: center;
          }
        `&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To make this all work, you have to add the &lt;code&gt;styled-jsx/babel&lt;/code&gt; to &lt;em&gt;plugins&lt;/em&gt; in the babel configuration.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="s2"&gt;"babel"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s2"&gt;"presets"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"react-app"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s2"&gt;"plugins"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"styled-jsx/babel"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Snapshots with react-test-renderer&lt;/h3&gt;

&lt;p&gt;Within the context of inline styles, we&amp;rsquo;ll first look at the default approach for testing with Jest snapshots using &lt;a href="https://github.com/facebook/react/tree/master/packages/react-test-renderer"&gt;&lt;code&gt;react-test-renderer&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'react'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'react-dom'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;renderer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'react-test-renderer'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'./App'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'renders without crashing'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;).&lt;/span&gt;&lt;span class="nx"&gt;toJSON&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toMatchSnapshot&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This generates the following snapshot:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;exports[`renders without crashing 1`] = `
&amp;lt;div
  className="jsx-188096426 App"
&amp;gt;
  &amp;lt;p
    className="jsx-188096426"
  &amp;gt;
    Example Component
  &amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
`;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we change one aspect of the CSS (i.e., the &lt;code&gt;text-align&lt;/code&gt; value), we get the following snapshot diff:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gd"&gt;- Snapshot
&lt;/span&gt;&lt;span class="gi"&gt;+ Received
&lt;/span&gt;
 &amp;lt;div
&lt;span class="gd"&gt;-  className="jsx-188096426 App"
&lt;/span&gt;&lt;span class="gi"&gt;+  className="jsx-1500233327 App"
&lt;/span&gt; &amp;gt;
   &amp;lt;p
&lt;span class="gd"&gt;-    className="jsx-188096426"
&lt;/span&gt;&lt;span class="gi"&gt;+    className="jsx-1500233327"
&lt;/span&gt;   &amp;gt;
     Example Component
   &amp;lt;/p&amp;gt;
 &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can see the &lt;code&gt;jsx-########&lt;/code&gt; noise in our diff. One other thing to note here is that the &lt;code&gt;p&lt;/code&gt; element also has the noise even though our CSS doesn&amp;rsquo;t target it!&lt;/p&gt;

&lt;p&gt;To eliminate this noise, let us remove the &lt;code&gt;styled-jsx/babel&lt;/code&gt; plugin from the test environment (you will want to specify your different environments):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="s2"&gt;"babel"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s2"&gt;"presets"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"react-app"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s2"&gt;"env"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"production"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"plugins"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"styled-jsx/babel"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"development"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"plugins"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"styled-jsx/babel"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"plugins"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you have a snapshot that looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;exports[`renders without crashing 1`] = `
&amp;lt;div
  className="App"
&amp;gt;
  &amp;lt;p&amp;gt;
    Example Component
  &amp;lt;/p&amp;gt;
  &amp;lt;style
    jsx={true}
  &amp;gt;

              .App {
                text-align: center;
              }

  &amp;lt;/style&amp;gt;
&amp;lt;/div&amp;gt;
`;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As we can see, the &lt;code&gt;jsx-########&lt;/code&gt; values are no longer present, although there is now a &lt;code&gt;style&lt;/code&gt; element which has the actual CSS. In my opinion, this is a good trade &amp;ndash; now every element doesn&amp;rsquo;t have the ever-changing &lt;code&gt;jsx-########&lt;/code&gt;. This alone results in cleaner snapshots from my perspective.&lt;/p&gt;

&lt;h3&gt;Snapshots with enzyme&lt;/h3&gt;

&lt;p&gt;The second approach we will look at for inline styles is snapshot testing with &lt;a href="https://github.com/airbnb/enzyme"&gt;&lt;code&gt;enzyme&lt;/code&gt;&lt;/a&gt;. This package gives you the additional functionality to assert and manipulate the component&amp;rsquo;s output. Unfortunately, the rendered component is wrapped in an &lt;code&gt;enzyme&lt;/code&gt; specific component, which produces unnecessarily complex snapshots. Fortunately, the &lt;a href="https://github.com/adriantoine/enzyme-to-json"&gt;&lt;code&gt;enzyme-to-json&lt;/code&gt;&lt;/a&gt; package provides an approach to convert the wrapped component to the standard format we&amp;rsquo;re familiar with. It is worth noting that you can further simplify the setup if you read more into the documentation of &lt;code&gt;enzyme&lt;/code&gt; and &lt;code&gt;enzyme-to-json&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'react'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'react-dom'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Enzyme&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'enzyme'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Adapter&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'enzyme-adapter-react-16'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;shallow&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'enzyme'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;toJson&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'enzyme-to-json'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'./App'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;Enzyme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;configure&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;adapter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Adapter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'renders without crashing'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;wrapper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;shallow&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toJson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toMatchSnapshot&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This generates the following snapshot:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;exports[`renders without crashing 1`] = `
&amp;lt;div
  className="jsx-188096426 App"
&amp;gt;
  &amp;lt;p
    className="jsx-188096426"
  &amp;gt;
    Example Component
  &amp;lt;/p&amp;gt;
  &amp;lt;JSXStyle
    css=".App.jsx-188096426{text-align:center;}"
    styleId="188096426"
  /&amp;gt;
&amp;lt;/div&amp;gt;
`;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice here that we have an additional &lt;code&gt;JSXStyle&lt;/code&gt; element that contains the actual CSS styles. This is &lt;em&gt;in addition&lt;/em&gt; to the original noise we have in our snapshot.&lt;/p&gt;

&lt;p&gt;If we change one aspect of the CSS (i.e., the &lt;code&gt;text-align&lt;/code&gt; value), we get the following snapshot readout:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gd"&gt;- Snapshot
&lt;/span&gt;&lt;span class="gi"&gt;+ Received
&lt;/span&gt;
 &amp;lt;div
&lt;span class="gd"&gt;-  className="jsx-188096426 App"
&lt;/span&gt;&lt;span class="gi"&gt;+  className="jsx-1500233327 App"
&lt;/span&gt; &amp;gt;
   &amp;lt;p
&lt;span class="gd"&gt;-    className="jsx-188096426"
&lt;/span&gt;&lt;span class="gi"&gt;+    className="jsx-1500233327"
&lt;/span&gt;   &amp;gt;
     Example Component
   &amp;lt;/p&amp;gt;
   &amp;lt;JSXStyle
&lt;span class="gd"&gt;-    css=".App.jsx-188096426{text-align:center;}"
-    styleId="188096426"
&lt;/span&gt;&lt;span class="gi"&gt;+    css=".App.jsx-1500233327{text-align:left;}"
+    styleId="1500233327"
&lt;/span&gt;   /&amp;gt;
 &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we apply the same fix as we did for inline styles with &lt;code&gt;react-test-renderer&lt;/code&gt; (removing &lt;code&gt;styled-jsx/babel&lt;/code&gt; plugin from the test environment), we now get the same snapshot output. Thus, there are no more &lt;code&gt;jsx-########&lt;/code&gt; values, however the raw CSS is within the &lt;code&gt;style&lt;/code&gt; tag.&lt;/p&gt;

&lt;h2&gt;External Styles&lt;/h2&gt;

&lt;p&gt;I personally like to use &lt;a href="https://github.com/zeit/styled-jsx#external-css-and-styles-outside-of-the-component"&gt;external CSS files&lt;/a&gt; that I import into the components. The following shows our converted &lt;code&gt;App&lt;/code&gt; component to use an imported CSS file instead of an inline style:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'react'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'./App.css'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className=&lt;/span&gt;&lt;span class="s2"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Example Component
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt; &lt;span class="nt"&gt;jsx&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="s1"&gt;'styled-jsx/css'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="s2"&gt;`
  .App {
    text-align: center;
  }
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Snapshots with react-test-renderer&lt;/h3&gt;

&lt;p&gt;Using external CSS files has no impact on &lt;em&gt;how&lt;/em&gt; we test the component. Thus, we can use the same test from the inline styles section. Since that is the case, let us take the same approach to eliminate the noise in the diff by removing the &lt;code&gt;styled-jsx/babel&lt;/code&gt; plugin from the test environment.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FAIL  src/App.test.js
● Test suite failed to run

  styled-jsx/css: if you are getting this error it means that your `css` tagged template literals were not transpiled.

    at Object.&amp;lt;anonymous&amp;gt;.module.exports [as default] (node_modules/styled-jsx/css.js:2:9)
    at Object.&amp;lt;anonymous&amp;gt; (src/App.css.js:3:14)
    at Object.&amp;lt;anonymous&amp;gt; (src/App.js:2:12)
    at Object.&amp;lt;anonymous&amp;gt; (src/App.test.js:5:12)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can recover from this error, if we use a &lt;a href="https://facebook.github.io/jest/docs/en/manual-mocks.html"&gt;Jest manual mocks&lt;/a&gt; to mock out the &lt;code&gt;css&lt;/code&gt; tagged template literal. We can accomplish this by creating the following mock under &lt;code&gt;__mocks__/styled-jsx/css.js&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now our snapshot looks like the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;exports[`renders without crashing 1`] = `
&amp;lt;div
  className="App"
&amp;gt;
  &amp;lt;p&amp;gt;
    Example Component
  &amp;lt;/p&amp;gt;
  &amp;lt;style
    jsx={true}
  /&amp;gt;
&amp;lt;/div&amp;gt;
`;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can see that the &lt;code&gt;jsx-########&lt;/code&gt; values are no longer present, and in addition, the &lt;code&gt;style&lt;/code&gt; tag does not have the raw CSS. This is an improvement over the inline style approaches, as the snapshot doesn&amp;rsquo;t change with any CSS changes.&lt;/p&gt;

&lt;h3&gt;Snapshots with enzyme&lt;/h3&gt;

&lt;p&gt;We can use the same test we had when testing the inline styles using &lt;code&gt;react-test-renderer&lt;/code&gt;. Going from what we know now, we can remove the &lt;code&gt;styled-jsx/babel&lt;/code&gt; plugin from the test environment and mock the &lt;code&gt;css&lt;/code&gt; tagged template literal. These two changes then result in the same snapshot that we received in the external styles using &lt;code&gt;react-test-renderer&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is a great outcome given that the use of &lt;code&gt;enzyme&lt;/code&gt; is common in the React tests I write, and it offers the &lt;em&gt;cleanest&lt;/em&gt; snapshots.&lt;/p&gt;

&lt;h2&gt;TL;DR&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;If you are using &lt;code&gt;styled-jsx&lt;/code&gt; with Jest snapshots:

&lt;ul&gt;
&lt;li&gt;You will see &lt;code&gt;className&lt;/code&gt; changes for the &lt;code&gt;jsx-########&lt;/code&gt; values any time the CSS changes&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;If you are using inline styles:

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Remove&lt;/em&gt; the &lt;code&gt;styled-jsx/babel&lt;/code&gt; plugin from your test environment&lt;/li&gt;
&lt;li&gt;See clean snapshots when using &lt;code&gt;react-test-renderer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;See clean snapshots (except for raw CSS under &lt;code&gt;style&lt;/code&gt; tag) when using &lt;code&gt;enzyme&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;If you are using external styles:

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Remove&lt;/em&gt; the &lt;code&gt;styled-jsx/babel&lt;/code&gt; plugin from your test environment&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Mock&lt;/em&gt; the &lt;code&gt;css&lt;/code&gt; tagged template literal for &lt;code&gt;styled-jsx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;See clean snapshots when using &lt;code&gt;react-test-renderer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;See clean snapshots when using &lt;code&gt;enzyme&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There might be a better way to handle this, but as of the time this article was written I have yet to see a clean approach. One thing I noticed was a &lt;a href="https://github.com/zeit/styled-jsx/issues/117#issuecomment-342115323"&gt;GitHub comment&lt;/a&gt; that alluded to a better method that would follow a similar strategy to &lt;a href="https://github.com/styled-components/jest-styled-components"&gt;jest-styled-components&lt;/a&gt; but for &lt;code&gt;styled-jsx&lt;/code&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Editing with Pry</title>
    <link rel="alternate" href="https://kevinjalbert.com/editing-with-pry/"/>
    <id>https://kevinjalbert.com/editing-with-pry/</id>
    <updated>2018-07-16T22:29:47-04:00</updated>
    <published>2018-03-23T19:53:20-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">Learn to edit within a pry session. Experience the power of multi-line and patch editing.</description>
    <content type="html">&lt;p&gt;I&amp;rsquo;ve already touched a bit on the power of &lt;code&gt;pry&lt;/code&gt; in a &lt;a href="/lets-pry-into-ruby-objects/"&gt;previous post back in 2016&lt;/a&gt;. I want to revisit &lt;code&gt;pry&lt;/code&gt; to expand on a new functionality that I have since started using &amp;ndash; its ability to edit.&lt;/p&gt;

&lt;h2&gt;More than One Line?&lt;/h2&gt;

&lt;p&gt;In my personal experiences, I&amp;rsquo;ve constructed some &lt;em&gt;long&lt;/em&gt; one-liners while in &lt;code&gt;irb&lt;/code&gt; or &lt;code&gt;pry&lt;/code&gt;. These interactive sessions do not provide a great experience for multi line commands, as you are restricted to editing only one line at a time.&lt;/p&gt;

&lt;p&gt;Fortunately, in &lt;code&gt;pry&lt;/code&gt;, there is the &lt;code&gt;edit&lt;/code&gt; method. This opens up a temporary file (&lt;code&gt;pry&lt;/code&gt;&amp;rsquo;s input buffer) with a more capable editor for your task. You can configure the editor by executing the &lt;code&gt;Pry.config.editor = &amp;quot;vim&amp;quot;&lt;/code&gt; statement, although your environment variable &lt;code&gt;EDITOR&lt;/code&gt; is used by default. If you want, you can even use a GUI editor like &lt;a href="https://atom.io/"&gt;Atom&lt;/a&gt; (you&amp;rsquo;ll need to use &lt;code&gt;atom --wait&lt;/code&gt; for this to work). If you have a specific preference, it makes sense to add this configuration in your &lt;code&gt;.pryrc&lt;/code&gt; so it is configured when &lt;code&gt;pry&lt;/code&gt; loads up.&lt;/p&gt;

&lt;p&gt;By default, &lt;code&gt;edit&lt;/code&gt; will open the last executed statement issued in your session. If you want to edit with a blank canvas, then you can use the &lt;code&gt;edit -t&lt;/code&gt; to open a temporary buffer. You can even get fancy and re-edit older inputs using &lt;code&gt;edit --in &amp;lt;input-number&amp;gt;&lt;/code&gt; (i.e., &lt;code&gt;edit --in -2&lt;/code&gt; &amp;ndash; the second last input).&lt;/p&gt;

&lt;p&gt;Using a full editor is great for those more complex statements. Now you can break up statements into multiple lines to make it easier to comprehend and create. In the event you were &lt;em&gt;slightly&lt;/em&gt; wrong, you can simply &lt;code&gt;edit&lt;/code&gt; again and fix up your statement. This is great for iteratively building longer statements. It is a common style in Ruby to use indentation when using blocks and defining classes/methods/modules, so take advantage of &lt;code&gt;edit&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The following demonstrates &lt;code&gt;pry&lt;/code&gt;&amp;rsquo;s multi-line editing functionality.&lt;/p&gt;

&lt;script src="https://asciinema.org/a/KjOsTASz7MMzrJV2lSxi6SWdM.js" id="asciicast-KjOsTASz7MMzrJV2lSxi6SWdM" async&gt;&lt;/script&gt;

&lt;h2&gt;Patching Objects&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;edit&lt;/code&gt; method has one more amazing trick up its sleeve &amp;ndash; &lt;em&gt;patch editing&lt;/em&gt;. &lt;code&gt;pry&lt;/code&gt; now gives you the ability to modify existing object method definitions at runtime. To quote the help text for the &lt;code&gt;edit --patch&lt;/code&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Instead of editing the object&amp;rsquo;s file, try to edit in a tempfile and apply as a monkey patch&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As the patch is only for the &lt;code&gt;pry&lt;/code&gt; session, there is a greater sense of exploring and less worry surrounding the commitment of the edit.&lt;/p&gt;

&lt;p&gt;Some caveats that I&amp;rsquo;ve hit with this approach is that you can only patch &lt;code&gt;&amp;lt;class&amp;gt;#&amp;lt;method&amp;gt;&lt;/code&gt; (instance method) or &lt;code&gt;&amp;lt;class&amp;gt;.&amp;lt;method&amp;gt;&lt;/code&gt; (class method). You might want to edit the class itself, but you&amp;rsquo;ll hit &lt;code&gt;NotImplementedError: Cannot yet patch #&amp;lt;Pry::WrappedModule:0x007fcc32afecd0&amp;gt; objects!&lt;/code&gt;. Unfortunately, I&amp;rsquo;ve not yet found a nice way to get around this (so let me know if you have a way!). I know that you can modify the file itself (i.e., &lt;code&gt;edit app/models/model.rb&lt;/code&gt;) but that&amp;rsquo;ll actually write to the file &amp;ndash; I would want it done as a patch.&lt;/p&gt;

&lt;p&gt;The following demonstrates &lt;code&gt;pry&lt;/code&gt;&amp;rsquo;s patch editing functionality.&lt;/p&gt;

&lt;script src="https://asciinema.org/a/0zvuYLvnQXHkZ9DpFZl4l3Sxe.js" id="asciicast-0zvuYLvnQXHkZ9DpFZl4l3Sxe" async&gt;&lt;/script&gt;
</content>
  </entry>
  <entry>
    <title>Rails ActiveStorage Configuration for Minio</title>
    <link rel="alternate" href="https://kevinjalbert.com/rails-activestorage-configuration-for-minio/"/>
    <id>https://kevinjalbert.com/rails-activestorage-configuration-for-minio/</id>
    <updated>2018-07-16T22:29:47-04:00</updated>
    <published>2018-02-26T18:53:20-05:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">Trying to configure Rails ActiveStorage for Minio as your storage provider? The default configuration does not work out of the box, so read on to see what configuration options you are missing.</description>
    <content type="html">&lt;p&gt;You are looking at Rails 5.2 and its shiny new &lt;a href="https://github.com/rails/rails/tree/master/activestorage"&gt;ActiveStorage&lt;/a&gt; &amp;ndash; a built-in abstraction/mechanism to handle file storage. You decide to give it a try and remove a dependency you normally use (i.e., &lt;a href="https://github.com/carrierwaveuploader/carrierwave"&gt;CarrierWave&lt;/a&gt; or &lt;a href="https://github.com/thoughtbot/paperclip"&gt;Paperclip&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;For some reason, you decide to use &lt;a href="https://minio.io/"&gt;Minio&lt;/a&gt; &amp;ndash; an Amazon S3 compatible open source project.&lt;/p&gt;

&lt;p&gt;Looking through the ActiveStorage &lt;a href="http://edgeguides.rubyonrails.org/active_storage_overview.html"&gt;documentation&lt;/a&gt; and &lt;a href="https://github.com/rails/rails/tree/master/activestorage"&gt;repository&amp;rsquo;s readme&lt;/a&gt;, you figure out how to get everything working locally using ActiveStorage&amp;rsquo;s &lt;code&gt;local&lt;/code&gt; service.&lt;/p&gt;

&lt;p&gt;Now it is time to try running everything, but with Minio as your file storage. Looking at your &lt;code&gt;config/storage.yml&lt;/code&gt; you&amp;rsquo;ll see the template for Amazon&amp;rsquo;s S3:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight yaml"&gt;&lt;code&gt; &lt;span class="na"&gt;amazon&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
   &lt;span class="na"&gt;service&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;S3&lt;/span&gt;
   &lt;span class="na"&gt;access_key_id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;%= Rails.application.credentials.dig(:aws, :access_key_id) %&amp;gt;&lt;/span&gt;
   &lt;span class="na"&gt;secret_access_key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;%= Rails.application.credentials.dig(:aws, :secret_access_key) %&amp;gt;&lt;/span&gt;
   &lt;span class="na"&gt;region&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;us-east-1&lt;/span&gt;
   &lt;span class="na"&gt;bucket&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;your_own_bucket&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;Configuration Options&lt;/h1&gt;

&lt;p&gt;Now it&amp;rsquo;s time to figure out how to use the S3 service in conjunction with your Minio server&amp;hellip;&lt;/p&gt;

&lt;h2&gt;Region&lt;/h2&gt;

&lt;p&gt;Your Minio server doesn&amp;rsquo;t really support regions like Amazon&amp;rsquo;s S3. Just keep it as &lt;code&gt;us-east-1&lt;/code&gt; or your closest S3 region (although it really could be any string). From what I&amp;rsquo;ve seen, this is just used at the Amazon S3-level, and for your hosted Minio server it does not matter.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;region&lt;/code&gt; value is simply used to satisfy ActiveStorage and the &lt;code&gt;aws-sdk-s3&lt;/code&gt; gem. If you omit the &lt;code&gt;region&lt;/code&gt; option you get the following exception &lt;code&gt;missing keyword: region (ArgumentError)&lt;/code&gt;. If you use an empty string for &lt;code&gt;region&lt;/code&gt; you will see &lt;code&gt;missing region; use :region option or export region name to ENV[&amp;#39;AWS_REGION&amp;#39;] (Aws::Errors::MissingRegionError)&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Endpoint&lt;/h2&gt;

&lt;p&gt;Your Minio server is hosted at some URL (i.e., https://minio123.com), so you&amp;rsquo;ll need to inform ActiveStorage&amp;rsquo;s S3 service about this &lt;em&gt;endpoint&lt;/em&gt;. Luckily, it is just a matter of adding the URL endpoint to your configuration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  endpoint: "https://minio123.com" # Points to your Minio server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also use ports on the endpoint (i.e., &amp;ldquo;http://localhost:9000&amp;rdquo;).&lt;/p&gt;

&lt;h2&gt;Force Path Style&lt;/h2&gt;

&lt;p&gt;So you have the endpoint and region all setup from a configuration standpoint. Your Minio server is also up and running, along with a bucket, &lt;code&gt;your_own_bucket&lt;/code&gt;. You try to upload a file and see the following exception:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Aws::Errors::NoSuchEndpointError (Encountered a `SocketError` while attempting to connect to:

  https://you_own_bucket.minio123.com/RJioqjrTT4VmFobw5FhXkSby

This is typically the result of an invalid `:region` option or a
poorly formatted `:endpoint` option.

* Avoid configuring the `:endpoint` option directly. Endpoints are constructed
  from the `:region`. The `:endpoint` option is reserved for connecting to
  non-standard test endpoints.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hmm&amp;hellip; Well that didn&amp;rsquo;t work out. If we look at the URL (https://your_own_bucket.minio123.com), we can see that it uses a bucket subdomain approach. However, Minio expects the bucket after the domain (i.e., https://minio123.com/your_own_bucket). Again, fortunately there is an configuration option we can add to &lt;em&gt;force this path style&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  force_path_style: true # Needed to be compliant with how Minio serves the bucket
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;Complete Configuration&lt;/h1&gt;

&lt;p&gt;At this point we covered all the configuration &lt;em&gt;gotchas&lt;/em&gt; to set up ActiveStorage with Minio. Namely, the missing and (mostly undocumented) &lt;code&gt;endpoint&lt;/code&gt; and &lt;code&gt;force_path_style&lt;/code&gt; options. The following is a complete configuration.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight yaml"&gt;&lt;code&gt; &lt;span class="na"&gt;minio&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
   &lt;span class="na"&gt;service&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;S3&lt;/span&gt;
   &lt;span class="na"&gt;access_key_id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;%= Rails.application.credentials.dig(:minio, :access_key_id) %&amp;gt;&lt;/span&gt;
   &lt;span class="na"&gt;secret_access_key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;%= Rails.application.credentials.dig(:minio, :secret_access_key) %&amp;gt;&lt;/span&gt;
   &lt;span class="na"&gt;region&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;us-east-1&lt;/span&gt;
   &lt;span class="na"&gt;bucket&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;your_own_bucket&lt;/span&gt;
   &lt;span class="na"&gt;endpoint&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;https://minio123.com"&lt;/span&gt;
   &lt;span class="na"&gt;force_path_style&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It isn&amp;rsquo;t a bad idea to have the configuration named &lt;code&gt;minio&lt;/code&gt;, just so it is clear that it&amp;rsquo;s a Minio file storage instead of the typical Amazon S3.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Start Now: Architecture Decision Records</title>
    <link rel="alternate" href="https://kevinjalbert.com/start-now-architecture-decision-records/"/>
    <id>https://kevinjalbert.com/start-now-architecture-decision-records/</id>
    <updated>2018-07-16T22:29:47-04:00</updated>
    <published>2018-01-03T18:53:20-05:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">Stop asking questions about certain architectural decisions for a project. Implement Architecture Decision Records, and save the team and yourself future headaches.</description>
    <content type="html">&lt;p&gt;While working on any project, you&amp;rsquo;ll eventually need to make decisions regarding the task at hand. The decision that has to be made can vary in size and impact. Often we are in the context of a team, and these decisions are made in consultation with others. As time progresses, with new and old team members moving on and off the project, we&amp;rsquo;ll start to question some of those decisions that were made in the past.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Why was it done that way?&lt;/p&gt;

&lt;p&gt;Did we not consider this alternative?&lt;/p&gt;

&lt;p&gt;What was the context when that decision was made?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Save the team and yourself future headaches and plan accordingly for these types of questions now, by starting Architecture Decision Records (ADRs) for your project.&lt;/p&gt;

&lt;h1&gt;What are ADRs?&lt;/h1&gt;

&lt;p&gt;I first read about ADRs in the &lt;a href="http://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions"&gt;documenting architecture decisions&lt;/a&gt; blog post by &lt;a href="http://thinkrelevance.com/team/members/michael-nygard"&gt;Michael Nygard&lt;/a&gt;. ADRs are a form of documentation that record any &lt;em&gt;architecturally significant&lt;/em&gt; decisions that impact a project. For an impact to be considered &lt;em&gt;architecturally significant&lt;/em&gt; within a software project context, Micheal stated:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;hellip; those that affect the structure, non-functional characteristics, dependencies, interfaces, or construction techniques.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Michael&amp;rsquo;s blog post was focused on ADRs within the context of an agile software project, but I believe it can be applied across different domains. The affected values for what a decision might impact would have to be altered to suit the appropriate domain. For example, altering the customer support workflow could constitute a decision record as it significantly changes a business process.&lt;/p&gt;

&lt;p&gt;I had recently read that &lt;a href="https://www.thoughtworks.com/radar/techniques/lightweight-architecture-decision-records"&gt;lightweight architecture decision records&lt;/a&gt; had made it into the &lt;em&gt;adopt&lt;/em&gt; ring of &lt;a href="https://www.thoughtworks.com/radar"&gt;Thoughtworks Technology Radar&lt;/a&gt; in the November 2017 edition. They note that the lightweight aspect of ADRs is to just have text/markdown files alongside software projects in their repositories.&lt;/p&gt;

&lt;p&gt;Here is an example ADR (pretty meta as it is about starting ADRs):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="gh"&gt;# 1. Record architecture decisions&lt;/span&gt;

Date: 2018-01-03

&lt;span class="gu"&gt;## Status&lt;/span&gt;

Accepted

&lt;span class="gu"&gt;## Context&lt;/span&gt;

We need to record the architectural decisions made on this project.

&lt;span class="gu"&gt;## Decision&lt;/span&gt;

We will use Architecture Decision Records, as described by Michael Nygard in this article: http://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions

&lt;span class="gu"&gt;## Consequences&lt;/span&gt;

See Michael Nygard's article, linked above. For a lightweight ADR toolset, see Nat Pryce's _adr-tools_ at https://github.com/npryce/adr-tools.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I don&amp;rsquo;t want to go into technical details of ADRs, as this blog post is to bring awareness to them, as well as tools/techniques around them. There is plenty of supplementary material in this blog post via links to other articles.&lt;/p&gt;

&lt;h1&gt;Getting Started with ADRs&lt;/h1&gt;

&lt;p&gt;The biggest thing when adopting ADRs in your project is being consistent with them. As with any added process, it&amp;rsquo;s easy to simply overlook the new parts if they aren&amp;rsquo;t at the forefront of your mind. Within our software projects, we actually incorporate ADR consideration in our &lt;a href="https://help.github.com/articles/creating-a-pull-request-template-for-your-repository/"&gt;GitHub pull request template&lt;/a&gt;. It&amp;rsquo;s a good idea to make sure all team members are all in agreement with using ADRs, as well as when to make one. You don&amp;rsquo;t want a decision to be made that is not documented.&lt;/p&gt;

&lt;h2&gt;Simplify ADRs with &lt;code&gt;adr-tools&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;In addition to including a note about ADRs in our pull request template, there is more tooling to help out. In the spirit of being lightweight records, markdown files are the preferred way to write ADRs. The &lt;a href="https://github.com/npryce/adr-tools"&gt;&lt;code&gt;adr-tools&lt;/code&gt; command line tool&lt;/a&gt; is a great way to simplify the creation of ADRs. If you are on MacOS, back in May 2017, I got &lt;a href="https://github.com/Homebrew/homebrew-core/pull/13081"&gt;adr-tools accepted into homebrew&lt;/a&gt;, so now you can just &lt;code&gt;brew install adr-tools&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are a lot of configurations and features that exist within &lt;code&gt;adr-tools&lt;/code&gt;. I&amp;rsquo;m going to go over some of the essentials, with examples. I highly recommend taking a deeper look into the tool itself to get the most out of it.&lt;/p&gt;

&lt;h3&gt;Initialize Repository&lt;/h3&gt;

&lt;p&gt;With a new repository, you get started with &lt;code&gt;adr init&lt;/code&gt;, which creates the following &lt;code&gt;doc/adr/0001-record-architecture-decisions.md&lt;/code&gt; file for you. The contents of this ADR is actually the sample one presented above.&lt;/p&gt;

&lt;h3&gt;Create New ADRs&lt;/h3&gt;

&lt;p&gt;When you want to add a new ADR, you can execute &lt;code&gt;adr new &amp;quot;Split up component XXXX into two modules&amp;quot;&lt;/code&gt; which opens up a basic ADR template to fill in. It creates the next incremented ADR &amp;ndash; &lt;code&gt;doc/adr/0002-split-up-component-xxxx-into-two-modules.md&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Maintain Table of Contents&lt;/h3&gt;

&lt;p&gt;Most software projects have a &lt;code&gt;README.md&lt;/code&gt; file. When working with ADRs, I include a hyperlink to &lt;code&gt;/doc/adr/README.md&lt;/code&gt;. This file can be generated using &lt;code&gt;adr generate toc &amp;gt; ./docs/adr/README.md&lt;/code&gt;, and ends up creating a nice table of contents of the current ADRs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="gh"&gt;# Architecture Decision Records&lt;/span&gt;
&lt;span class="p"&gt;
*&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;1. Record architecture decisions&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;0001-record-architecture-decisions.md&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;2. Split up component XXXX into two modules&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;0002-split-up-component-xxxx-into-two-modules.md&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Superseding Existing ADRs&lt;/h3&gt;

&lt;p&gt;Eventually, you will have a decision which is somehow &lt;em&gt;linked&lt;/em&gt; to another ADR. A great example of this is a new ADR which supersedes an older decision. First let us make a new ADR &lt;code&gt;adr new -s 2 &amp;quot;Combine modules back into one component&amp;quot;&lt;/code&gt;, which ends up superseding our earlier decision. This will actually modify the ADR&amp;rsquo;s &lt;em&gt;status&lt;/em&gt; section by adding the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="gh"&gt;# In 0002-split-up-component-xxxx-into-two-modules.md&lt;/span&gt;
Superseded by &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;3. Combine modules back into one component&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;0003-combine-modules-back-into-one-component.md&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="gh"&gt;# In 0003-combine-modules-back-into-one-component.md&lt;/span&gt;
Superseds &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;2. Split up component XXXX into two modules&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;0002-split-up-component-xxxx-into-two-modules.md&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is useful to see how ADRs relate to each other. In our example, we&amp;rsquo;re indicating one ADR that supersedes another. It is possible to use &lt;code&gt;adr link&lt;/code&gt; to specifically tailor the link to use different wording, so you can be specific in how ADRs are associated. Ultimately, linking provides additional context surrounding linked decisions.&lt;/p&gt;

&lt;h3&gt;Visualizing ADRs&lt;/h3&gt;

&lt;p&gt;With the ability to &lt;em&gt;link&lt;/em&gt; ADRs together, it now becomes possible to trace the story of a specific ADR. By following links you can understand the &lt;em&gt;bigger picture&lt;/em&gt; of how the architecture evolved over time. It can be hard to navigate one file at a time, so fortunately for us, &lt;code&gt;adr-tools&lt;/code&gt; has us covered by being able to produce a visualization of the ADRs.&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;adr generate graph | dot -Tjpg &amp;gt; graph.jpg&lt;/code&gt; we can generate the following image (using our example ADRs so far):&lt;/p&gt;

&lt;p&gt;&lt;img width="390" height="271" src="/images/2018-01-03-start-now-architecture-decision-records/graph.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;It is quite apparent to see the ADR links in this diagram. I personally have not seen how well this scales, although it still is a good technique to be aware of.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;adr generate graph&lt;/code&gt; by itself will return a &lt;a href="https://graphviz.gitlab.io/"&gt;graphviz&lt;/a&gt; output. It would be interesting to attach this to the &lt;code&gt;/doc/adr/README.md&lt;/code&gt; using the &lt;a href="https://github.com/TLmaK0/gravizo"&gt;gravizo&lt;/a&gt; service. This way, the ADR visualization is always within reach and can be apart of the normal process when adding new ADRs. I have not personally done this approach, but it looks interesting.&lt;/p&gt;

&lt;h2&gt;Searching ADRs&lt;/h2&gt;

&lt;p&gt;As we&amp;rsquo;re just dealing with markdown files, it becomes trivial to search through the ADRs. The file names are the titles, so even at a glance, it becomes easy to narrow down what you are looking for. You can even use &lt;code&gt;adr list&lt;/code&gt; to just list all the ADRs. In combination with other command line tools (i.e., grep) you can filter the list. I personally like using the &lt;a href="https://github.com/junegunn/fzf"&gt;&lt;code&gt;fzf&lt;/code&gt; command line tool&lt;/a&gt; to filter the list and open it in vim: &lt;code&gt;adr list | fzf | xargs vim&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you want to dig deeper you can search the contents of the files for what you are looking for. For example, &lt;code&gt;grep -l &amp;#39;tool&amp;#39; ./doc/adr/*.md | fzf | xargs vim&lt;/code&gt; would look for any file with &lt;em&gt;tool&lt;/em&gt; in it, and present the &lt;code&gt;fzf&lt;/code&gt; interface for further filtering.&lt;/p&gt;

&lt;p&gt;In the end, you can be creative on how you search through ADRs &amp;ndash; there is a lot of flexibility built into it. I usually use the &lt;a href="https://github.com/aykamko/tag"&gt;&lt;code&gt;tag&lt;/code&gt; command line tool&lt;/a&gt; for searching within files.&lt;/p&gt;

&lt;h2&gt;Customizing ADRs&lt;/h2&gt;

&lt;p&gt;At this point, you might be thinking &lt;em&gt;&amp;ldquo;ADRs sound great, but it doesn&amp;rsquo;t quite satisfy all my needs&amp;rdquo;&lt;/em&gt;. The concept of ADRs is very general and flexible in nature so that if you have specific needs or requirements, you can customize it. In our case, we&amp;rsquo;ve been using &lt;code&gt;adr-tools&lt;/code&gt; and it has a base template. You can change it, or use a different template. For example, it might be useful to look through &lt;a href="https://github.com/joelparkerhenderson/architecture_decision_record"&gt;other templates&lt;/a&gt; to find one that fits your needs.&lt;/p&gt;

&lt;p&gt;This post has been talking about using markdown files, but your ADRs could be held in any other medium (i.e., JIRA, Google Docs, etc&amp;hellip;). I would argue to use what works best for your team. In most cases, within a software project, the markdown approach is nice as it&amp;rsquo;s very lightweight and everything is contained in the source directory.&lt;/p&gt;

&lt;h1&gt;TL;DR&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;ADRs are a great way keep records of architectural decisions&lt;/li&gt;
&lt;li&gt;ADRs provide context surrounding architectural decisions&lt;/li&gt;
&lt;li&gt;ADRs can be lightweight as markdown files that live within your project&amp;rsquo;s repository&lt;/li&gt;
&lt;li&gt;ADRs are searchable and customizable&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The best time to start ADRs is at the start of a project; the second best time is right now&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
  </entry>
  <entry>
    <title>Slack Reminding Users and Channels</title>
    <link rel="alternate" href="https://kevinjalbert.com/slack-reminding-users-and-channels/"/>
    <id>https://kevinjalbert.com/slack-reminding-users-and-channels/</id>
    <updated>2018-07-16T22:29:47-04:00</updated>
    <published>2017-12-02T18:53:20-05:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">Slack Reminders are powerful, maybe even more so than you originally thought?! In my experience, I noticed that colleagues of mine didn't fully use reminders to their fullest extent.</description>
    <content type="html">&lt;p&gt;&lt;a href="https://slack.com/"&gt;Slack&lt;/a&gt; has taken over communication for workplace environments, at least within tech circles surrounding me. I realize there are many competitors, and I have even used some of them in the past, but to me Slack is my preferred choice. If you haven&amp;rsquo;t given Slack a try, I highly recommend it! At &lt;a href="http://company.thescore.com/"&gt;theScore&lt;/a&gt; we heavily use Slack.&lt;/p&gt;

&lt;p&gt;This post will be short and focused on &lt;a href="https://get.slack.help/hc/en-us/articles/208423427"&gt;Slack Reminders&lt;/a&gt;. From what I&amp;rsquo;ve experienced with coworkers, they only knew of and used a small subset of Slack Reminder&amp;rsquo;s feature set. This post is going to demonstrate what you can do with Slack Reminders, mainly assigning reminders to users and channels.&lt;/p&gt;

&lt;h1&gt;Reminding Myself&lt;/h1&gt;

&lt;p&gt;A common use case for reminders &amp;ndash; you want some notification in the future to remind you about something.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/remind me to work on blog post in 30 minutes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img width="587" height="109" src="/images/2017-12-02-slack-reminding-users-and-channels/slack-remind-me.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;This is the feature that most people know of with Slack Reminders.&lt;/p&gt;

&lt;h1&gt;Reminding a User&lt;/h1&gt;

&lt;p&gt;It&amp;rsquo;s not an uncommon task that you&amp;rsquo;d want to remind a colleague about a future task.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/remind @aaron.romeo deploy your changes before the weekend on friday morning
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img width="630" height="123" src="/images/2017-12-02-slack-reminding-users-and-channels/slack-remind-user.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;In this example, &lt;a href="http://www.aaronromeo.com/"&gt;@aaron.romeo&lt;/a&gt; would receive a reminder at the specified time. Aaron doesn&amp;rsquo;t actually receive any indication that he has just been assigned a reminder. The only way he can get any insight that he has a new reminder is to either wait until the specified time, or to look at his own list of reminders and see it there. You just have to be aware of this detail depending on how you plan to use reminders.&lt;/p&gt;

&lt;p&gt;Going back to our example, Aaron checks his reminders in Slack and he sees the newly assigned task, although there is no indication of who assigned it to him. Slack, if you are listening, I would like to be able to see who assigned the reminder.&lt;/p&gt;

&lt;p&gt;&lt;img width="685" height="75" src="/images/2017-12-02-slack-reminding-users-and-channels/slack-remind-target-list.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;Regardless, when the reminder does trigger, Aaron can interact with it. In this case he&amp;rsquo;ll mark it as completed.&lt;/p&gt;

&lt;p&gt;&lt;img width="615" height="100" src="/images/2017-12-02-slack-reminding-users-and-channels/slack-remind-target-trigger.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;I received confirmation that he has seen and acted on the reminder I assigned him.&lt;/p&gt;

&lt;p&gt;&lt;img width="700" height="60" src="/images/2017-12-02-slack-reminding-users-and-channels/slack-remind-target-completed.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;This asynchronous flow is awesome, as it allows you to &lt;em&gt;know&lt;/em&gt; that the reminder for that user was acted upon. I tend to use these types of reminders after hours to present information that can wait until the following day. Normally, I end up finding interesting articles that I want to pass on, so these types of reminders work perfectly for me.&lt;/p&gt;

&lt;h1&gt;Reminding a Channel&lt;/h1&gt;

&lt;p&gt;In a similar fashion to assigning a reminder to another user, you can target a channel itself. For example, you might want to remind all the online users within a channel about something.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/remind #team-ep-dev :spiral_calendar_pad: @here standup time! every weekday at 10:30am
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img width="650" height="100" src="/images/2017-12-02-slack-reminding-users-and-channels/slack-remind-channel.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;In this example, the channel &lt;code&gt;#diet-sup-dev&lt;/code&gt; will receive the message at the specified time. As you can see, I even used the &lt;code&gt;@here&lt;/code&gt; mention to make sure it gets all the active users&amp;rsquo; attention. When a channel reminder is set, the reminder is announced on the channel at the specified time.&lt;/p&gt;

&lt;p&gt;&lt;img width="698" height="82" src="/images/2017-12-02-slack-reminding-users-and-channels/slack-remind-channel-announcement.jpg" /&gt;&lt;/p&gt;

&lt;h1&gt;What are my reminders&lt;/h1&gt;

&lt;p&gt;Every now and then you might want to do a little housecleaning on your reminders. You have likely clicked the &lt;em&gt;View Reminders&lt;/em&gt;, or even just executed the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/remind list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This presents a list of the past, present, and future reminders, as well as incomplete reminders, for yourself, along with reminders for other individuals and channels.&lt;/p&gt;

&lt;p&gt;&lt;img width="684" height="123" src="/images/2017-12-02-slack-reminding-users-and-channels/slack-remind-list.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;It is a nice place to check every now and then to make sure your reminders are being actioned.&lt;/p&gt;

&lt;h1&gt;Reminders are cheap&lt;/h1&gt;

&lt;p&gt;The beauty of Slack Reminders is that they are quick to create and are actionable. You can be in any conversation in Slack and still use the &lt;code&gt;/remind&lt;/code&gt; command. The ease of making a new reminder means there is no reasons to not use them in your daily workflow.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>GitHub: Tell Me When It Closes Extension</title>
    <link rel="alternate" href="https://kevinjalbert.com/github-tell-me-when-it-closes-extension/"/>
    <id>https://kevinjalbert.com/github-tell-me-when-it-closes-extension/</id>
    <updated>2018-07-16T22:29:47-04:00</updated>
    <published>2017-11-14T18:53:20-05:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">My first foray into making and publishing a browser extension. Let me showcase a quick extension which adds a button on GitHub's pull request and issue pages that links to tellmewhenitcloses.com populated with data.</description>
    <content type="html">&lt;p&gt;&lt;a href="https://tellmewhenitcloses.com/"&gt;Tell Me When It Closes&lt;/a&gt; is an amazing service by &lt;a href="https://thoughtbot.com/"&gt;thoughtbot&lt;/a&gt;. Often I&amp;rsquo;ll find an issue or pull request on GitHub for a tool I use and I just want to know &lt;em&gt;when&lt;/em&gt; it closes what the result was. I don&amp;rsquo;t care for the back-and-forth conversations between people when if I were to subscribe, so Tell Me When It Closes is the perfect service for me.&lt;/p&gt;

&lt;p&gt;The issue I ran into was the limited ways to integrate this into my workflow. Looking at the ways you can &lt;a href="https://tellmewhenitcloses.com/subscribing"&gt;subscribe to issues and pull requests&lt;/a&gt;, it&amp;rsquo;s a bookmarklet that runs JavaScript. I don&amp;rsquo;t use the bookmark bar in my chrome browser (or browser bookmarks), so that solution wasn&amp;rsquo;t ideal.&lt;/p&gt;

&lt;p&gt;My old workflow for subscribing to an issue on Tell Me When It Closes was:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Cmd + L (move keyboard cursor to address bar)&lt;/li&gt;
&lt;li&gt;Cmd + C (copy URL)&lt;/li&gt;
&lt;li&gt;Cmd + T (open new tab)&lt;/li&gt;
&lt;li&gt;Type tellmewhenitcloses.com (autocompletes after a few characters)&lt;/li&gt;
&lt;li&gt;Enter (opens tellmewhenitcloses.com)&lt;/li&gt;
&lt;li&gt;Cmd + V (paste in issue URL)&lt;/li&gt;
&lt;li&gt;Enter (subscribe to issue)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To many manual steps for me.&lt;/p&gt;

&lt;h1&gt;Simplify and Extend&lt;/h1&gt;

&lt;p&gt;I want a way to simplify the steps to subscribe to an issue. I figured I could manipulate the webpage with JavaScript and add a button which, when, clicked would navigate to the subscription page with the URL filled in.&lt;/p&gt;

&lt;p&gt;I looked into making a browser extension, originally for Google Chrome. Upon further investigation, I found that I could target more browsers without much extra effort. I decided to use &lt;a href="https://github.com/EmailThis/extension-boilerplate"&gt;EmailThis/extension-boilerplate&lt;/a&gt; so that I could build an extension for Chrome, Opera &amp;amp; Firefox.&lt;/p&gt;

&lt;p&gt;The end result is a button which appears in the &lt;em&gt;notifications&lt;/em&gt; section of an issue or pull request page. When you click the button, it&amp;rsquo;ll open the tellmewhenitcloses.com with the appropriate URL pre-filled.&lt;/p&gt;

&lt;p&gt;&lt;img width="400" height="315" src="/images/2017-11-14-github-tell-me-when-it-closes-extension/button.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;Now my workflow for subscribing to an issue on Tell Me When It Closes is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click &lt;em&gt;Tell Me When It Closes&lt;/em&gt; button (using trackpad or &lt;a href="https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb"&gt;Vimium&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Enter (subscribe to issue)&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;Links&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kevinjalbert/github-tell-me-when-it-closes-extension"&gt;GitHub Repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/github-tell-me-when-it-cl/mfaeeelmjfbblmkbalffbhfpkhhnjalp"&gt;Chrome Extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://addons.mozilla.org/en-US/firefox/addon/github-tell-me-when-it-closes/"&gt;Firefox Add-on&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://addons.opera.com/en/extensions/details/github-tell-me-when-it-closes"&gt;Opera Add-on&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Share Highlighted Articles</title>
    <link rel="alternate" href="https://kevinjalbert.com/share-highlighted-articles/"/>
    <id>https://kevinjalbert.com/share-highlighted-articles/</id>
    <updated>2018-07-16T22:29:47-04:00</updated>
    <published>2017-10-31T19:53:20-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">We are ever consuming articles on the web. In most cases, the articles that interest me are highly technical and informative. Just like a book, you would highlight the important passages for future recollection. In this post, I present my use of the Highly highlighting service to record, retrieve, and share highlights.</description>
    <content type="html">&lt;p&gt;Here is yet another post on the topic of sharing knowledge to accompany my previous posts: &lt;em&gt;&lt;a href="/share-your-bag-of-tricks/"&gt;Share Your Bag of Tricks&lt;/a&gt;&lt;/em&gt; and &lt;em&gt;&lt;a href="/knowledge-and-screencast-culture/"&gt;Knowledge and Screencast Culture&lt;/a&gt;&lt;/em&gt;. I&amp;rsquo;ve recently made another change to my day-to-day workflow that accommodates sharing knowledge &amp;ndash; highlighting articles.&lt;/p&gt;

&lt;h1&gt;Information Recollection&lt;/h1&gt;

&lt;p&gt;In the software development world, I&amp;rsquo;m consuming a decent amount of articles from various sources. This is in a way how I keep up with the new changes in the landscape, which in its self could be an interesting short article on its own. I heavily use &lt;a href="https://getpocket.com"&gt;Pocket&lt;/a&gt; to stash articles I find throughout the day and I then slowly consume them at my own leisure. I had it such that if I &lt;em&gt;favourite&lt;/em&gt; an article in Pocket then, through &lt;a href="https://zapier.com"&gt;Zapier&lt;/a&gt; it will be saved in &lt;a href="https://evernote.com"&gt;Evernote&lt;/a&gt;. Evernote is my go-to note-taking and information recollection solution.&lt;/p&gt;

&lt;p&gt;This approach works well, although I want to &lt;em&gt;distil&lt;/em&gt; and &lt;em&gt;reinforce&lt;/em&gt; the materials I&amp;rsquo;m consuming. My hypothesis is that I&amp;rsquo;ll have more succinct notes within Evernote and thus able to take advantage of more narrow focus search efforts. I have settled on using a highlighting service to accomplish for marking important passages that end up being searchable in Evernote.&lt;/p&gt;

&lt;h1&gt;Highlighting Services&lt;/h1&gt;

&lt;p&gt;I reviewed four highlighting services to find the best one that fits my needs. I quickly passed over &lt;a href="https://diigo.com"&gt;Diigo&lt;/a&gt; and &lt;a href="https://www.lumioapp.com"&gt;Lumio&lt;/a&gt;, as they just didn&amp;rsquo;t appeal to me. These next two were my serious contenders that I evaluated.&lt;/p&gt;

&lt;h2&gt;&lt;a href="https://getliner.com"&gt;Liner&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Liner is a solid option for highlighting. The chrome extension works very well and is boiled down to the fundamentals: highlighting and comments. It offers a Pocket integration, which is nice, although not really needed. The ability to export highlights to Evernote is excellent, and as an off the shelf solution does what I need. The iOS application also is well done and works as expected. The sharing feature provides a link which renders the full article with highlightings in it, simple and effective &amp;ndash; &lt;a href="http://lnr.li/PbYky"&gt;example Liner shared link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Even though there is a subscription at $5/month or $50/year, it is not really necessary. You get folder support along with, more colours and advance search. The colours I couldn&amp;rsquo;t really care for, and the search will be covered by Evernote. Folders are also unimportant to me. Overall this means I don&amp;rsquo;t have to pay for this service.&lt;/p&gt;

&lt;p&gt;I really like Liner, and it almost made my pick. It satisfies all my needs, although it became my second choice as the next service Highly has a very neat &lt;em&gt;social&lt;/em&gt; feature.&lt;/p&gt;

&lt;h2&gt;&lt;a href="https://www.highly.co"&gt;Highly&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Highly is very similar to Liner in terms of highlighting. It is, even more, streamline as it only offers highlights and drops comments. The main benefit I noticed with Highly is the &lt;a href="https://medium.com/highlight-to-share/the-highlight-layer-45b9a8e86476"&gt;Highlight Layer&lt;/a&gt;, which when you browse articles provides a social aspect to highlighting. This is pretty awesome as I can see a summary of new articles assuming someone has marked it up before me. In addition, the interface of the extension I would argue is slightly better than Liner. Highly also offers a Pocket integration like Liner. The iOS application for highlighting is also quite nice and offers a great user experience.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Highlight Layer" width="427" height="194" src="/images/2017-10-31-share-highlighted-articles/highlight-layer.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;I was pleasantly surprised with the highlighting experience, considering I didn&amp;rsquo;t think you could improve much with highlighting. As you&amp;rsquo;ll see, the highlighting will automatically expand to fill the words in case you didn&amp;rsquo;t select them from the beginning or end:&lt;/p&gt;

&lt;p&gt;&lt;img alt="Smart Highlighting by Highly" width="577" height="147" src="/images/2017-10-31-share-highlighted-articles/highly-smart-highlighting.gif" /&gt;&lt;/p&gt;

&lt;p&gt;In contrast to how Liner displays the whole page with highlights when you share a link, Highly provides a summary page &amp;ndash; &lt;a href="https://www.highly.co/hl/FJrJO5TzhZt7d3"&gt;example Highly shared link&lt;/a&gt;. You can always drop into the context of the whole page, but this only works if you have the extension installed otherwise you get a prompt to install it.&lt;/p&gt;

&lt;p&gt;Highly does offer a subscription as well for $2/month or $20/year, but all you get is private highlights. To me, that doesn&amp;rsquo;t matter since I want everything to be public, and out in the open for others to benefit from.&lt;/p&gt;

&lt;p&gt;The Evernote storage is non-existent in Highly&amp;hellip; although I did counter this with a hacked together Zapier integration. That I&amp;rsquo;ll cover in the next section.&lt;/p&gt;

&lt;p&gt;Highly&amp;rsquo;s excellent highlighting experience along with the social aspect sold me on it. Liner is a great contender and I am going to keep my eyes on it to see what they come up with in the future. Even though Highly didn&amp;rsquo;t offer an Evernote solution, I was able to hack a more favourable one using Zapier.&lt;/p&gt;

&lt;h1&gt;Evernote Notes with Highly and Zapier&lt;/h1&gt;

&lt;p&gt;As mentioned I want Evernote integration with the highlighting service I use, and with Highly it wasn&amp;rsquo;t there. I was pleased with the rest of Highly that I was willing to make it work.&lt;/p&gt;

&lt;p&gt;First thing I was looking at was the RSS feed that Highly provides, figuring I could tie this with Zapier. Turns out that there already existed a &lt;a href="https://ifttt.com/applets/iTCzjXUP-highly-highlights-in-evernote"&gt;Highly highlights in Evernote on IFTTT&lt;/a&gt; already. The main issue is that the RSS feed has one item for each highlight. So you cannot aggregate all the highlights for a completed articled into one note. This wasn&amp;rsquo;t going to do it for me.&lt;/p&gt;

&lt;p&gt;You can email a Highly link, so I was going to just email them into Evernote. While this worked, there were a couple of issues:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Evernote&amp;rsquo;s free account only allows 5 emails per month. I was not a paying customer and wasn&amp;rsquo;t planning on taking the additional cost at the moment.&lt;/li&gt;
&lt;li&gt;The email is heavily branded with Highly, as it is meant to be a link sent to someone other than yourself.&lt;/li&gt;
&lt;li&gt;The title of the email was generic and uninformative &amp;ndash; &lt;em&gt;kevinjalbert sent you a highlight.&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img alt="Highly Share Email To Evernote" width="425" height="745" src="/images/2017-10-31-share-highlighted-articles/email-to-evernote.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;Fortunately, with Zapier, you can chain multiple actions together (limit of 3 with a free account). Zapier allows for some powerful workflows, especially since you can use JavaScript or Python to manipulate data within the flow.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Zapier Highly To Evernote Flow" width="380" height="495" src="/images/2017-10-31-share-highlighted-articles/zapier-highly-flow.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;I use a Zapier inbound email trigger, that triggers when I email the share link from Highly. I then feed the HTML formatted email into a JavaScript function where I can clean up the &lt;code&gt;inputData.rawBody&lt;/code&gt; and &lt;code&gt;inputData.htmlBody&lt;/code&gt; and return an object for the next step.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;titleRegex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/kevinjalbert's highlights&lt;/span&gt;&lt;span class="se"&gt;\s&lt;/span&gt;&lt;span class="sr"&gt;+&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;.*&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;linkRegex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;https:&lt;/span&gt;&lt;span class="se"&gt;\/\/&lt;/span&gt;&lt;span class="sr"&gt;www.highly.co&lt;/span&gt;&lt;span class="se"&gt;\/&lt;/span&gt;&lt;span class="sr"&gt;hl&lt;/span&gt;&lt;span class="se"&gt;\/&lt;/span&gt;&lt;span class="sr"&gt;.*&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;timeRegex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;.* Summary • .* Story&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;htmlBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;inputData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;htmlBody&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Remove html, head, and body&lt;/span&gt;
&lt;span class="nx"&gt;htmlBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;htmlBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;htmlBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;body"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;htmlBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;htmlBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;htmlBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastIndexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;/body&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;// Remove profile and divider&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;before&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;htmlBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;htmlBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;div class="main"&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;after&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;htmlBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;htmlBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;div class="article-meta'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;htmlBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;before&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;after&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Remove redundant text&lt;/span&gt;
&lt;span class="nx"&gt;htmlBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;htmlBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"kevinjalbert's highlights"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Remove footer&lt;/span&gt;
&lt;span class="nx"&gt;htmlBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;htmlBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;htmlBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastIndexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;div class="footer"'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;// Add wrapping div&lt;/span&gt;
&lt;span class="nx"&gt;htmlBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;div"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;htmlBody&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;/div&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Clean up nbsp&lt;/span&gt;
&lt;span class="nx"&gt;htmlBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;htmlBody&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&amp;lt;div class="split-15" height="15" style="font-size:15px;line-height:15px;height:15px;overflow:hidden;background:transparent"&amp;gt;&amp;amp;nbsp;&amp;lt;&lt;/span&gt;&lt;span class="se"&gt;\/&lt;/span&gt;&lt;span class="sr"&gt;div&amp;gt;/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;div class="split-5" height="5" style="font-size:5px;line-height:5px;height:5px;overflow:hidden;background:transparent"&amp;gt;&amp;lt;br /&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="s1"&gt;/div&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;articleTitle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;titleRegex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inputData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rawBody&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;highlyLink&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;linkRegex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inputData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rawBody&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;timeSummary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;timeRegex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inputData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rawBody&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;evernoteFormattedBody&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;htmlBody&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Cleaning up the HTML body was an interesting task to make it conform to Evernote&amp;rsquo;s &lt;a href="https://dev.evernote.com/doc/articles/enml.php"&gt;ENML&lt;/a&gt; format. The code is a hack and brittle, but it works. I also extract the title so that I can ensure that the note&amp;rsquo;s title is properly reflecting in Evernote. The final step is to put all this together into the Evernote action template.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Zapier Create Evernote Note Template" width="760" height="560" src="/images/2017-10-31-share-highlighted-articles/zapier-create-evernote-note.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;With the Zapier flow, I now get a succinct note with the highlightings for an article. It triggers instantly when I send the email from Highly.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Zapier Formatted Email To Evernote" width="425" height="500" src="/images/2017-10-31-share-highlighted-articles/zapier-formatted-to-evernote.jpg" /&gt;&lt;/p&gt;

&lt;h1&gt;Highlighting Workflow&lt;/h1&gt;

&lt;p&gt;Now armed with my highlighter I can mark the good parts that I feel are most important when consuming articles online. With the ability to share summary links, I can better ensure that the take aways from the article surfaces easier. Finally, with my Evernote Zapier integration, I know that my highlighted information is always a few keystrokes away.&lt;/p&gt;

&lt;p&gt;My goal is to highlight every article that lands in my Pocket. With Highly&amp;rsquo;s social aspects I hope that my highlights help future readers. In a similar fashion, I am always pleased when I see that someone else has already highlighted an article for the key points.&lt;/p&gt;

&lt;p&gt;Make sure to check out my highlights and &lt;a href="https://www.highly.co/by/kevinjalbert"&gt;follow me on Highly&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
</feed>
