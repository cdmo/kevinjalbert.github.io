<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kevin Jalbert</title>
  <link href="http://kevinjalbert.com"/>
  <link href="http://kevinjalbert.com/feed.xml" rel="self"/>
  <updated>2016-08-30T20:00:00-04:00</updated>
  <author>
    <name>Kevin Jalbert</name>
  </author>
  <id>http://kevinjalbert.com</id>
  <entry>
    <title>Git Evolution: How did we get Here?</title>
    <link rel="alternate" href="http://kevinjalbert.com/git-evolution-how-did-we-get-here/"/>
    <id>http://kevinjalbert.com/git-evolution-how-did-we-get-here/</id>
    <updated>2016-08-31T17:39:54-04:00</updated>
    <published>2016-08-30T20:00:00-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <content type="html">&lt;p&gt;As a developer its not uncommon to want a little more context surrounding the code snippet you are dealing with. You might have found yourself in these situations and reached for &lt;code&gt;git blame&lt;/code&gt; to get some initial context in why the code is like it is. This only scratches the surface and you might want a more context which &lt;code&gt;git log&lt;/code&gt; can provide to you. You are mostly interested in how the code evolved to this point, and really want you want is &lt;code&gt;git evolution&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I developed &lt;a href="https://github.com/kevinjalbert/git_evolution"&gt;git_evolution&lt;/a&gt; to solve a personal problem of mine while spelunking in a git repository trying to find more reasons to why the code might have evolved in this way.&lt;/p&gt;

&lt;p&gt;To best describe what and how git evolution can be used the next section (&lt;em&gt;Example Scenario&lt;/em&gt;) comes directly from &lt;code&gt;git_evolution&lt;/code&gt;&amp;rsquo;s &lt;a href="https://github.com/kevinjalbert/git_evolution#example-scenario"&gt;README&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Example Scenario&lt;/h2&gt;

&lt;p&gt;If we were interesting in the source code evolution that lead to &lt;a href="https://github.com/rails/rails/blob/7ba3a48/activesupport/lib/active_support/core_ext/array/access.rb#L70-L75"&gt;rails&amp;rsquo;s Array#forty_two&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git_evolution --range 70:75 ./rails/activesupport/lib/active_support/core_ext/array/access.rb

Commits:
utenmiki &amp;lt;utenmiki@gmail.com&amp;gt; (Thu Oct 31 23:20:15 2013 +0900) - 3f79d8423078f0671c8aa505ae199608d451663d
Add Rdoc document for Array#forty_two

Jeremy Kemper &amp;lt;jeremy@bitsweat.net&amp;gt; (Sat Mar 21 03:26:09 2009 -0700) - 83fd1ae122cf1ee4ea2c52e0bd963462163516ca
Convert array extension modules to class reopens

David Heinemeier Hansson &amp;lt;david@loudthinking.com&amp;gt; (Fri Nov 21 09:06:46 2008 +0100) - e50530ca3ab5db53ebc74314c54b62b91b932389
Reduced the number of literal aliases to the range that has actually seen personal use. With the massive savings in overhead, I was able to fit Array#forty_two

Pratik Naik &amp;lt;pratiknaik@gmail.com&amp;gt; (Sun Oct 5 22:16:26 2008 +0100) - a2932784bb71e72a78c32819ebd7ed2bed551e3e
Merge docrails

Pratik Naik &amp;lt;pratiknaik@gmail.com&amp;gt; (Mon Jul 28 12:26:59 2008 +0100) - 6e754551254a8cc64e034163f5d0dc155b450388
Merge docrails changes

David Heinemeier Hansson &amp;lt;david@loudthinking.com&amp;gt; (Tue Jun 17 13:37:57 2008 -0500) - 22af62cf486721ee2e45bb720c42ac2f4121faf4
Added Array#second through Array#tenth as aliases for Array#[1] through Array#[9] [DHH]

David Heinemeier Hansson &amp;lt;david@loudthinking.com&amp;gt; (Tue Nov 27 19:42:30 2007 +0000) - 4d177ae0d6d9f60c4000f45fb6f6df27317afbff
Added Array#from and Array#to that behaves just from String#from and String#to [DHH]

--------------------------------------------------------------------------------

Ownership (Commits):
David Heinemeier Hansson &amp;lt;david@loudthinking.com&amp;gt; - 3/7 (42.86%)
Pratik Naik &amp;lt;pratiknaik@gmail.com&amp;gt; - 2/7 (28.57%)
Jeremy Kemper &amp;lt;jeremy@bitsweat.net&amp;gt; - 1/7 (14.29%)
utenmiki &amp;lt;utenmiki@gmail.com&amp;gt; - 1/7 (14.29%)

Ownership (Changes):
David Heinemeier Hansson &amp;lt;david@loudthinking.com&amp;gt; - 53/84 (63.1%)
Pratik Naik &amp;lt;pratiknaik@gmail.com&amp;gt; - 20/84 (23.81%)
Jeremy Kemper &amp;lt;jeremy@bitsweat.net&amp;gt; - 9/84 (10.71%)
utenmiki &amp;lt;utenmiki@gmail.com&amp;gt; - 2/84 (2.38%)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;GitEvolution&lt;/code&gt; provides a succinct output of the commits which contains any changes which lead to the current state. Its quick to see that &lt;a href="https://github.com/rails/rails/commit/e50530ca3ab5db53ebc74314c54b62b91b932389"&gt;e50530ca3ab5db53ebc74314c54b62b91b932389&lt;/a&gt; was the introduction point for &lt;code&gt;Array#forty_two&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In addition we have some &lt;em&gt;ownership&lt;/em&gt; information with respect to commits and changes. The ownership information can be used to identify &lt;em&gt;who&lt;/em&gt; to follow up with for additional context. In time new metrics and analysis could be attached to the output (i.e., factoring in time for ownership, types of changes, identifying file modifications such as movement or renames, etc&amp;hellip;)&lt;/p&gt;

&lt;h2&gt;The Other (Hard) Way&lt;/h2&gt;

&lt;p&gt;If we were to identify the commit which introduced &lt;code&gt;Array#forty_two&lt;/code&gt; we have two main options &lt;code&gt;git blame&lt;/code&gt; and &lt;code&gt;git log&lt;/code&gt;:&lt;/p&gt;

&lt;h3&gt;Using &lt;code&gt;git blame&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;I highly advise against this approach as it involves a lot of manual work. You essentially use &lt;code&gt;git blame&lt;/code&gt; to identify the previous commit which effects a line of concern within the area you are looking in.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git blame --follow ./activesupport/lib/active_support/core_ext/array/access.rb

...
83fd1ae1 (Jeremy Kemper            2009-03-21 03:26:09 -0700 70)   # Equal to &amp;lt;tt&amp;gt;self[41]&amp;lt;/tt&amp;gt;. Also known as accessing "the reddit".
3f79d842 (utenmiki                 2013-10-31 23:20:15 +0900 71)   #
3f79d842 (utenmiki                 2013-10-31 23:20:15 +0900 72)   #   (1..42).to_a.forty_two # =&amp;gt; 42
83fd1ae1 (Jeremy Kemper            2009-03-21 03:26:09 -0700 73)   def forty_two
83fd1ae1 (Jeremy Kemper            2009-03-21 03:26:09 -0700 74)     self[41]
4d177ae0 (David Heinemeier Hansson 2007-11-27 19:42:30 +0000 75)   end
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can then use a similar command to blame the parent git revision at that point.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git blame --follow 83fd1ae1^ -- ./activesupport/lib/active_support/core_ext/array/access.rb

...
e50530ca (David Heinemeier Hansson 2008-11-21 09:06:46 +0100 46)         # Equal to &amp;lt;tt&amp;gt;self[41]&amp;lt;/tt&amp;gt;. Also known as accessing "the reddit".
e50530ca (David Heinemeier Hansson 2008-11-21 09:06:46 +0100 47)         def forty_two
e50530ca (David Heinemeier Hansson 2008-11-21 09:06:46 +0100 48)           self[41]
22af62cf (David Heinemeier Hansson 2008-06-17 13:37:57 -0500 49)         end
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All the while you occasionally want to inspect the commit in more detail using &lt;code&gt;git show &amp;lt;commit-sha&amp;gt;&lt;/code&gt;. Eventually you will end up where you want to be.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git show e50530ca

commit e50530ca3ab5db53ebc74314c54b62b91b932389
Author: David Heinemeier Hansson &amp;lt;david@loudthinking.com&amp;gt;
Date:   Fri Nov 21 09:06:46 2008 +0100

    Reduced the number of literal aliases to the range that has actually seen personal use. With the massive savings in overhead, I was able to fit Array#forty_two
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Using &lt;code&gt;git log&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The following &lt;code&gt;git log&lt;/code&gt; command presents the entire file history (26 commits):&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git log --follow ./activesupport/lib/active_support/core_ext/array/access.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This works, but it is a lot more information to sift through.&lt;/p&gt;

&lt;p&gt;A better approach (which is what &lt;code&gt;GitEvolution&lt;/code&gt; uses under the hood) presents the file history for only the concerned portion (7 commits):&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git log -L70,75:./activesupport/lib/active_support/core_ext/array/access.rb --follow ./activesupport/lib/active_support/core_ext/array/access.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output isn&amp;rsquo;t succinct, nor does it have ownership information. The command is also more verbose.&lt;/p&gt;

&lt;h2&gt;Advance Usage&lt;/h2&gt;

&lt;p&gt;I personally use Vim for all my editing needs, especially while editing code. As most of the projects I&amp;rsquo;m working in are version controlled with Git I made a &lt;a href="https://github.com/kevinjalbert/dotfiles/blob/eaca550/vim/vim/functions.vim#L1-L16"&gt;Vim function&lt;/a&gt; that allows me to visually select and call &lt;code&gt;git_evolution&lt;/code&gt; using &lt;code&gt;ge&lt;/code&gt; on the selected lines. This opens the output in a new buffer which I can then look through and yank commit SHAs if needed.&lt;/p&gt;

&lt;h2&gt;The Future&lt;/h2&gt;

&lt;p&gt;Similar to what I mentioned in my &lt;a href="https://kevinjalbert.com/port-mapping-development-servers/"&gt;last post about &lt;code&gt;port_map&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;git_evolution&lt;/code&gt; is a RubyGem, which is effectively tied to a specific Ruby version. When dealing with multiple Ruby version projects using &lt;a href="https://rvm.io/"&gt;rvm&lt;/a&gt;/&lt;a href="http://rbenv.org/"&gt;rbenv&lt;/a&gt; sometimes &lt;code&gt;git_evolution&lt;/code&gt; is not installed. It is a slight detour to install &lt;code&gt;git_evolution&lt;/code&gt; for the current Ruby version when I switch to a new Ruby version. Ideally &lt;code&gt;git_evolution&lt;/code&gt; would not be tied to Ruby, and instead is a transportable executable (for example one written in Bash or Go).&lt;/p&gt;

&lt;p&gt;I do want to expand on the &lt;em&gt;ownership&lt;/em&gt; aspect of &lt;code&gt;git_evolution&lt;/code&gt; as I think it&amp;rsquo;ll help quicker identify &lt;em&gt;who&lt;/em&gt; could be contacted for additional context. Currently it is simply looking at commits and change totals. Ideally there would be a better algorithm to determine ownership of selected lines.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Port Mapping Development Servers</title>
    <link rel="alternate" href="http://kevinjalbert.com/port-mapping-development-servers/"/>
    <id>http://kevinjalbert.com/port-mapping-development-servers/</id>
    <updated>2016-07-30T15:24:26-04:00</updated>
    <published>2016-07-29T20:00:00-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <content type="html">&lt;p&gt;As a developer its not uncommon to juggle multiple servers that interact with each other during development. Ensuring that each server has the correct port set while working off of &lt;code&gt;localhost&lt;/code&gt; is a cumbersome and error prone issue. &lt;a href="https://github.com/kevinjalbert/port_map"&gt;port_map&lt;/a&gt; is a ruby utility that provides a simple and almost automatic solution to this problem.&lt;/p&gt;

&lt;p&gt;I developed this utility gem to solve a personal problem of mine while dealing with multiple web servers during development. The next section (&lt;em&gt;Example Scenario&lt;/em&gt;) comes directly from &lt;code&gt;port_map&lt;/code&gt;&amp;rsquo;s &lt;a href="https://github.com/kevinjalbert/port_map#example-scenario"&gt;README&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Example Scenario&lt;/h2&gt;

&lt;p&gt;You are developing a service that uses multiple web servers. You have two rails applications and one ember application.&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Application&lt;/th&gt;
&lt;th&gt;Directory&lt;/th&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Local URL&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Rails API&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/api/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;rails server&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;http://localhost:3000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Rails Background Jobs&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/jobs/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;rails server --port 3001&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;http://localhost:3001&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ember Application&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/ember/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ember server&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;http://localhost:4200&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h3&gt;The Problem&lt;/h3&gt;

&lt;p&gt;In each of these applications there is some configuration work required to ensure that they communicate on the correct ports. There are two issues here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;As we add more web servers we have to avoid clashing on existing ports.&lt;/li&gt;
&lt;li&gt;You have to make sure that you correctly start each server with the right port number.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;&lt;code&gt;port_map&lt;/code&gt; to the Rescue!&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;re going to transform this unwieldy scenario into an organized and easy to manage one using &lt;code&gt;port_map&lt;/code&gt;.&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Application&lt;/th&gt;
&lt;th&gt;Directory&lt;/th&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Local URL&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Rails API&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/api/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;port_map rails server&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;http://api.dev&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Rails Background Jobs&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/jobs/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;port_map rails server&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;http://jobs.dev&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ember Application&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/ember/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;port_map ember server&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;http://ember.dev&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;The domain names can be configured with environment variables, but by default they are based on the directory&amp;rsquo;s name.&lt;/p&gt;

&lt;p&gt;You can close and restart each web server multiple times and they will continue to use the same domain names. &lt;code&gt;port_map&lt;/code&gt; provides an easy way to logically name each web server, as well as remove the need of specifying ports.&lt;/p&gt;

&lt;h2&gt;Putting it to the Test&lt;/h2&gt;

&lt;p&gt;I have been using &lt;code&gt;port_map&lt;/code&gt; for a little over 6 months (as of writing this), and it has served me quite well. The beauty of &lt;code&gt;port_map&lt;/code&gt; is that it works on any shell command that accepts a &lt;code&gt;--port &amp;lt;number&amp;gt;&lt;/code&gt; or &lt;code&gt;-p &amp;lt;number&amp;gt;&lt;/code&gt; flag. I enjoy finding new uses for &lt;code&gt;port_map&lt;/code&gt; in other web servers like &lt;a href="https://middlemanapp.com"&gt;middleman&lt;/a&gt; and &lt;a href="https://jekyllrb.com"&gt;jekyll&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There was one issue that I have hit, although its not a deal breaker &lt;a href="https://github.com/kevinjalbert/port_map/issues/7"&gt;kevinjalbert/port_map#7&lt;/a&gt;, although I suspect I can fix this eventually.&lt;/p&gt;

&lt;p&gt;As &lt;code&gt;port_map&lt;/code&gt; is a wrapper around the command there are interesting issues that can arise. I use &lt;a href="http://www.zsh.org/"&gt;Zsh&lt;/a&gt; as my shell along with a bunch of aliases it was necessary for &lt;code&gt;port_map&lt;/code&gt; to support running commands that contain aliases. I recently moved to &lt;a href="https://zplug.sh/"&gt;zplug&lt;/a&gt; as my Zsh plugin framework, where I encountered the following issue &lt;a href="https://github.com/zplug/zplug/issues/209"&gt;zplug/zplug#209&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One last inconvenience is that &lt;code&gt;port_map&lt;/code&gt; is a RubyGem, which is effectively tied to a specific Ruby version. When dealing with multiple Ruby version projects using &lt;a href="https://rvm.io/"&gt;rvm&lt;/a&gt;/&lt;a href="http://rbenv.org/"&gt;rbenv&lt;/a&gt; sometimes &lt;code&gt;port_map&lt;/code&gt; is not installed. It is a slight detour to install &lt;code&gt;port_map&lt;/code&gt; for the current Ruby version when I switch to a new Ruby version. Ideally &lt;code&gt;port_map&lt;/code&gt; would not be tied to Ruby, and instead is a transportable executable (for example one written in Bash or Go).&lt;/p&gt;

&lt;h2&gt;The Future&lt;/h2&gt;

&lt;p&gt;I will continue to use &lt;code&gt;port_map&lt;/code&gt; until I can spend some time to dig deeper into &lt;a href="https://www.vagrantup.com/"&gt;Vagrant&lt;/a&gt; and &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt;. These two technologies isolate and containerize environments (web services). I can see the benefits in such technologies as they are not dependant on the host environment, which in my case is my laptop.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>More Shell History</title>
    <link rel="alternate" href="http://kevinjalbert.com/more-shell-history/"/>
    <id>http://kevinjalbert.com/more-shell-history/</id>
    <updated>2016-07-30T15:24:26-04:00</updated>
    <published>2016-06-29T20:00:00-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <content type="html">&lt;p&gt;Developers who use the terminal on a daily basis have a wealth of knowledge stored in their shell&amp;rsquo;s history. It is not uncommon to need a lengthy command you used a while back. Thankfully shells provide a built in history and the functionality to &lt;em&gt;reverse search&lt;/em&gt; through it via &lt;code&gt;ctrl-r&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;Increasing History&lt;/h1&gt;

&lt;p&gt;First thing regardless of what shell try these commands and make note of their values:&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$HISTSIZE&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$SAVEHIST&lt;/span&gt; &lt;span class="c"&gt;# or $HISTFILESIZE for bash&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$HISTFILE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Across both zsh and bash these three environment variables determine the location and size of your shell history (&lt;a href="http://zsh.sourceforge.net/Guide/zshguide02.html#l17"&gt;zsh guide on setting history up&lt;/a&gt;):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HISTSIZE&lt;/code&gt; indicates how many commands from your history file are loaded into the shell&amp;rsquo;s memory&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SAVEHIST&lt;/code&gt;/&lt;code&gt;HISTFILESIZE&lt;/code&gt; indicates how many commands your history file can hold (you want this equal or larger than &lt;code&gt;HISTSIZE&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HISTFILE&lt;/code&gt; indicates the history file itself which houses your previous commands&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Its possible you might have already set some configurations related to the shell&amp;rsquo;s history, or maybe a plugin has set it for you like &lt;a href="https://github.com/robbyrussell/oh-my-zsh/blob/master/lib/history.zsh#L2-L7"&gt;oh-my-zsh&lt;/a&gt;. You should be aware of your history file and its size at the very least. This would also be a great opportunity to change it if you have not yet.&lt;/p&gt;

&lt;p&gt;In the default zsh configuration only &lt;code&gt;HISTSIZE&lt;/code&gt; is set, and it is tiny at only 30. No history file it set, which means no history is persisted. Default bash configuration has defaults history file and sizes of 500. Both of these are both small with respect to the amount of commands one might use.&lt;/p&gt;

&lt;p&gt;Recall that the effective reverse search (&lt;code&gt;ctrl-r&lt;/code&gt;) is based off of what is in your history. You don&amp;rsquo;t really want to lose anything right? So set something high!&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# In your ~/.bashrc&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;HISTSIZE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;100000
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;HISTFILESIZE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;100000

&lt;span class="c"&gt;# In your ~/.zshrc&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;HISTSIZE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;100000
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;HISTFILESIZE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;100000
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;HISTFILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/.zhistory &lt;span class="c"&gt;# Don't forget to to set this also&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From what I&amp;rsquo;ve witnessed the major downside to a large history is pretty negligible. When the shell starts it&amp;rsquo;ll read in your history file and store an amount defined by &lt;code&gt;$HISTSIZE&lt;/code&gt; in memory. More history simply means slower shell startup, although it is not that significant. In addition there might be some shell plugins which reach into your history, these can also cause slow downs (i.e., &lt;a href="https://github.com/zsh-users/zsh-history-substring-search"&gt;zsh-history-substring-search&lt;/a&gt; significantly slows down with a large history).&lt;/p&gt;

&lt;h1&gt;Cleaning History&lt;/h1&gt;

&lt;p&gt;Now we have a larger history, which by itself is a huge win. Now we want a &lt;em&gt;cleaner&lt;/em&gt; history if possible. The main benefit of a cleaner history is that stepping through your history with UP and DOWN keys will not show duplicates.&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# In your ~/.bashrc&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;HISTCONTROL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ignoredups

&lt;span class="c"&gt;# In your ~/.zshrc&lt;/span&gt;
setopt HIST_FIND_NO_DUPS
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you wanted you could go even further and actually prevent duplicates from being saved in your history file with the following:&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# In your ~/.bashrc&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;HISTCONTROL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;erasedups

&lt;span class="c"&gt;# In your ~/.zshrc&lt;/span&gt;
setopt HIST_IGNORE_ALL_DUPS
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;Sharing History&lt;/h1&gt;

&lt;p&gt;If you end up using multiple shells at a time (i.e., opening multiple zsh or bash), you might want to &lt;em&gt;share history&lt;/em&gt; between them. By default the history files are written when the shell closes. With the following you can allow the shells to write and read from the history file after each command:&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# In your ~/.bashrc&lt;/span&gt;
&lt;span class="nb"&gt;shopt&lt;/span&gt; -s histappend
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PROMPT_COMMAND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"history -a; history -c; history -r; &lt;/span&gt;&lt;span class="nv"&gt;$PROMPT_COMMAND&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="c"&gt;# In your ~/.zshrc&lt;/span&gt;
setopt inc_append_history
setopt share_history
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;Putting it Together &amp;ndash; TL;DR&lt;/h1&gt;

&lt;p&gt;If you want more history use the following:&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# In your ~/.bashrc&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;HISTSIZE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;100000
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;HISTFILESIZE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;100000

&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;HISTCONTROL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ignoredups

&lt;span class="nb"&gt;shopt&lt;/span&gt; -s histappend
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PROMPT_COMMAND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"history -a; history -c; history -r; &lt;/span&gt;&lt;span class="nv"&gt;$PROMPT_COMMAND&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="c"&gt;# In your ~/.zshrc&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;HISTSIZE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;100000
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;HISTFILESIZE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;100000
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;HISTFILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/.zhistory

setopt HIST_FIND_NO_DUPS

setopt inc_append_history
setopt share_history
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>Keep on Learning, but don't Forget to Remember</title>
    <link rel="alternate" href="http://kevinjalbert.com/keep-on-learning-but-dont-forget-to-remember/"/>
    <id>http://kevinjalbert.com/keep-on-learning-but-dont-forget-to-remember/</id>
    <updated>2016-07-30T15:24:26-04:00</updated>
    <published>2016-05-30T20:00:00-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <content type="html">&lt;p&gt;Learning is a way of life for a developer. Frequently we are exposed to techniques and tips such as: keybindings, shell commands, utilities, new functions/methods, new applications. While learning, we want to keep on remembering the previous techniques and tips that we&amp;rsquo;ve learned so that we can keep them &lt;em&gt;fresh&lt;/em&gt; and on our tool belt. It is not uncommon to forget some learned knowledge if you don&amp;rsquo;t use it often.&lt;/p&gt;

&lt;p&gt;I would like to present my own problem and solution surrounding this idea.&lt;/p&gt;

&lt;h2&gt;Problem: Customization of vim/zsh&lt;/h2&gt;

&lt;p&gt;Vim and zsh are my editor and shell of choice, both decisions I made early in my career. I have since spent countless hours using both and each are indispensable to my development process. As typical of any developer I am always looking for ways to improve my process. Near the beginning of my career I discovered that both &lt;a href="http://vimawesome.com/"&gt;vim&lt;/a&gt; and &lt;a href="https://github.com/unixorn/awesome-zsh-plugins"&gt;zsh&lt;/a&gt; have thriving plugin communities.&lt;/p&gt;

&lt;p&gt;I saw that there were &lt;a href="https://github.com/spf13/spf13-vim"&gt;popular&lt;/a&gt; vim &lt;a href="https://github.com/carlhuda/janus"&gt;distributions&lt;/a&gt; that come pre-packaged with opinionated set of keybindings, plugins and themes. I originally used one of these and immediately felt overwhelmed with the added functionality. I eventually came to terms with the error of my ways, and went back to vanilla vim. Learning from my mistake I decided to slowly incorporate features I felt were useful as I came to need them.&lt;/p&gt;

&lt;p&gt;I continue to stumble upon new plugins that simplifies tasks. I add custom keybindings to perform certain motions. I create custom vim functions. While observing colleagues I take mental notes of vim motions that I have yet to take advantage of. I occasionally look through my setup and notice features and keybindings that I have not used in a while. Sometimes I remove them, but other times I&amp;rsquo;ll keep it and make a try and use it.&lt;/p&gt;

&lt;p&gt;My use of zsh is nearly an identical story to that of my use with vim. In either case I routinely accumulate and pruning tips that I find useful. My largest gripe is &lt;em&gt;forgetting&lt;/em&gt; about new tips that I want to make part of my normal tool set. In most cases these have yet to become habit and common knowledge to me through repetitive exposure and use.&lt;/p&gt;

&lt;h2&gt;Solution&lt;/h2&gt;

&lt;p&gt;I decided to write my accumulation of tips down as one-liners in &lt;code&gt;tips.txt&lt;/code&gt; files, while using directories under &lt;code&gt;~/.tips&lt;/code&gt; for categorization:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;~/.tips❯ tree
.
├── ruby
│   └── rspec
│       └── tips.txt
├── vim
│   ├── plugins
│   │   ├── ctrlp
│   │   │   └── tips.txt
│   │   └── nerdtree
│   │       └── tips.txt
│   └── vanilla
│       └── tips.txt
└── zsh
    └── tips.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ultimately my goal is to be presented with a random tip when I open a new shell. To accomplish this the following code snippet is placed near the start of my &lt;code&gt;.zshrc&lt;/code&gt; (also works in a &lt;code&gt;.bashrc&lt;/code&gt;):&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Displays a random tip from the .tips directory when opening the shell
# Requires gshuf (brew install coreutils)
(
  TIP_PATH=$(find ~/.tips -type f -name tips.txt | gshuf -n1)    # Pick a random tips.txt file
  TIP_TILE=${TIP_PATH#"$HOME/.tips/"}                            # i.e., ~/.tips/vim/vanilla/tips.txt  ---&amp;gt;  vim/vanilla/tips.txt
  echo "From ${TIP_TILE%.txt}:"                                  # i.e., "From vim/vanilla/tips:"
  gshuf -n1 &amp;lt; "$TIP_PATH"                                        # Displays a random line from the tip file
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now throughout the day when I open many new shells, I am presented with a random recorded tip:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;From vim/plugins/nerdtree/tips:
`&amp;lt;f2&amp;gt;` toggles nerdtree open/close
~/.tips❯
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;From zsh/tips:
`j` allows you to jump to marked directories (via `jump`)
~/.tips❯
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Don&amp;rsquo;t Forget to Remember&lt;/h2&gt;

&lt;p&gt;As I continue to learn new things I&amp;rsquo;ll be added them to the appropriate &lt;code&gt;tips.txt&lt;/code&gt; within my &lt;code&gt;.tips&lt;/code&gt; directory. If I am presented with a tip that is no longer relevant I can simply remove it. Overall this seems like a great solution for recollecting tips.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Enhanced Vim Searching</title>
    <link rel="alternate" href="http://kevinjalbert.com/enhanced-vim-searching/"/>
    <id>http://kevinjalbert.com/enhanced-vim-searching/</id>
    <updated>2016-07-30T15:24:26-04:00</updated>
    <published>2016-04-29T20:00:00-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <content type="html">&lt;h2&gt;Basic Searching&lt;/h2&gt;

&lt;p&gt;Vim provides rather simple searching capabilities using the following keys while in normal mode:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/&lt;/code&gt; performs a &lt;em&gt;forward&lt;/em&gt; search of the provided pattern&lt;/li&gt;
&lt;li&gt;&lt;code&gt;?&lt;/code&gt; performs a &lt;em&gt;backward&lt;/em&gt; search of the provided pattern&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt; performs a &lt;em&gt;forward&lt;/em&gt; search of the word under the cursor&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#&lt;/code&gt; performs a &lt;em&gt;backward&lt;/em&gt; search of the word under the cursor&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt; navigates to the &lt;em&gt;next&lt;/em&gt; search occurrence&lt;/li&gt;
&lt;li&gt;&lt;code&gt;N&lt;/code&gt; navigates to the &lt;em&gt;previous&lt;/em&gt; search occurrence&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These commands alone are vital to anyone working with text in Vim. Without any customization these search commands perform simple&lt;/p&gt;

&lt;p&gt;&lt;img alt="Basic Searching" width="906" height="626" src="/images/2016-04-30-enhanced-vim-searching/basic-searching.gif" /&gt;&lt;/p&gt;

&lt;h2&gt;Better Searching&lt;/h2&gt;

&lt;p&gt;Personally, I always apply the following to make my searching slightly more responsive with visual feedback:&lt;/p&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;set&lt;/span&gt; hlsearch
&lt;span class="k"&gt;set&lt;/span&gt; incsearch

&lt;span class="c"&gt;" This unsets the 'last search pattern' register by hitting ;&lt;/span&gt;
nnoremap ; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;noh&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;:&amp;lt;&lt;/span&gt;backspace&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This allows our searches to &lt;em&gt;incrementally&lt;/em&gt; highlight the first match, providing visual feedback on our pattern matching. In addition, when proceeding with the search all the matches of the pattern are highlighted to visually indicate possible next matches.&lt;/p&gt;

&lt;p&gt;As searching is a frequently used motion, I have added a map to &lt;code&gt;;&lt;/code&gt; to clear any highlighting from the searches.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Better Searching" width="910" height="630" src="/images/2016-04-30-enhanced-vim-searching/better-searching.gif" /&gt;&lt;/p&gt;

&lt;h2&gt;Enhance Searching&lt;/h2&gt;

&lt;p&gt;We can do better! Using a mixture of two vim plugins we can achieve an enhanced form of searching within vim:&lt;/p&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="c"&gt;" All around better searching (via Vundle's plugin manager)&lt;/span&gt;
Bundle &lt;span class="s1"&gt;'haya14busa/incsearch.vim'&lt;/span&gt;
Bundle &lt;span class="s1"&gt;'osyo-manga/vim-anzu'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First, we have a bunch of maps and settings to incorporate &lt;a href="https://github.com/haya14busa/incsearch.vim"&gt;&lt;code&gt;incsearch.vim&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://github.com/osyo-manga/vim-anzu"&gt;&lt;code&gt;vim-anzu&lt;/code&gt;&lt;/a&gt; together:&lt;/p&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="c"&gt;" Use incsearch.vim for all search functions (with anzu for indication)&lt;/span&gt;
map /  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;incsearch&lt;span class="p"&gt;-&lt;/span&gt;forward&lt;span class="p"&gt;)&lt;/span&gt;
map ?  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;incsearch&lt;span class="p"&gt;-&lt;/span&gt;backward&lt;span class="p"&gt;)&lt;/span&gt;
map &lt;span class="k"&gt;g&lt;/span&gt;/ &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;incsearch&lt;span class="p"&gt;-&lt;/span&gt;stay&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;g:incsearch&lt;/span&gt;#auto_nohlsearch &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; hlsearch
map &lt;span class="k"&gt;n&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;incsearch&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;nohl&lt;/span&gt;&lt;span class="p"&gt;)&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;anzu&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;n&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;with&lt;span class="p"&gt;-&lt;/span&gt;echo&lt;span class="p"&gt;)&lt;/span&gt;
map N &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;incsearch&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;nohl&lt;/span&gt;&lt;span class="p"&gt;)&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;anzu&lt;span class="p"&gt;-&lt;/span&gt;N&lt;span class="p"&gt;-&lt;/span&gt;with&lt;span class="p"&gt;-&lt;/span&gt;echo&lt;span class="p"&gt;)&lt;/span&gt;
map * &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;incsearch&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;nohl&lt;/span&gt;&lt;span class="p"&gt;)&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;anzu&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;star&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;with&lt;span class="p"&gt;-&lt;/span&gt;echo&lt;span class="p"&gt;)&lt;/span&gt;
map # &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;incsearch&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;nohl&lt;/span&gt;&lt;span class="p"&gt;)&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;anzu&lt;span class="p"&gt;-&lt;/span&gt;sharp&lt;span class="p"&gt;-&lt;/span&gt;with&lt;span class="p"&gt;-&lt;/span&gt;echo&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;g:anzu_status_format&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"%p(%i/%l) %w"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By using &lt;code&gt;incsearch.vim&lt;/code&gt; we not only gain access to other perks that it brings in it&amp;rsquo;s toolkit, but it also handles our highlighting issue. Anytime the cursor moves after a search motion it &lt;code&gt;incsearch.vim&lt;/code&gt; will automatically remove the highlighting, which saves us from using the previously mentioned &lt;code&gt;;&lt;/code&gt; map for manually clearing the search highlighting. Secondly we have &lt;code&gt;vim-anzu&lt;/code&gt; which indicates the current &lt;em&gt;index&lt;/em&gt; of the search occurrence that you are at, it also indicates when you wrap around the bottom/top of the buffer.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Enhanced Searching" width="942" height="628" src="/images/2016-04-30-enhanced-vim-searching/enhanced-searching.gif" /&gt;&lt;/p&gt;

&lt;h2&gt;&lt;em&gt;tap tap tap&lt;/em&gt; Enhance&amp;hellip; &lt;em&gt;tap tap tap&lt;/em&gt; Enhance Searching&lt;/h2&gt;

&lt;p&gt;We can go even further to &lt;em&gt;enhance&lt;/em&gt; our searching by making use of another vim plugin, &lt;a href="https://github.com/Lokaltog/vim-easymotion"&gt;&lt;code&gt;vim-easymotion&lt;/code&gt;&lt;/a&gt; for better targeting our searches:&lt;/p&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="c"&gt;" Targeting our searching (via Vundle's plugin manager)&lt;/span&gt;
Bundle &lt;span class="s1"&gt;'Lokaltog/vim-easymotion'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default &lt;code&gt;vim-easymotion&lt;/code&gt; could be used on the common &lt;code&gt;/&lt;/code&gt; searches to provide an intelligent way to &lt;em&gt;target&lt;/em&gt; our searches. Although, this tramples over our previous work, and we lose the simplicity of our common &lt;code&gt;/&lt;/code&gt; searches. The following function and augmentations allow &lt;code&gt;vim-easymotion&lt;/code&gt; to be triggered off of a &lt;code&gt;/&lt;/code&gt; search by hooking into the search by &lt;code&gt;incsearch.vim&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="c"&gt;" Integrate incsearch and easymotion&lt;/span&gt;
&lt;span class="c"&gt;" https://github.com/Lokaltog/vim-easymotion/issues/146#issuecomment-75443473&lt;/span&gt;
&lt;span class="c"&gt;" Can use / for 'normal searching', at anytime its possible to use &amp;lt;space&amp;gt; to&lt;/span&gt;
&lt;span class="c"&gt;" pass search over to easymotion. To use spaces in search you need to apply&lt;/span&gt;
&lt;span class="c"&gt;" them via the regex approach \s.&lt;/span&gt;
augroup incsearch&lt;span class="p"&gt;-&lt;/span&gt;easymotion
  autocmd&lt;span class="p"&gt;!&lt;/span&gt;
  autocmd &lt;span class="nb"&gt;User&lt;/span&gt; IncSearchEnter autocmd&lt;span class="p"&gt;!&lt;/span&gt; incsearch&lt;span class="p"&gt;-&lt;/span&gt;easymotion&lt;span class="p"&gt;-&lt;/span&gt;impl
augroup END
augroup incsearch&lt;span class="p"&gt;-&lt;/span&gt;easymotion&lt;span class="p"&gt;-&lt;/span&gt;impl
  autocmd&lt;span class="p"&gt;!&lt;/span&gt;
augroup END
&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; IncsearchEasyMotion&lt;span class="p"&gt;()&lt;/span&gt; abort
  autocmd incsearch&lt;span class="p"&gt;-&lt;/span&gt;easymotion&lt;span class="p"&gt;-&lt;/span&gt;impl &lt;span class="nb"&gt;User&lt;/span&gt; IncSearchExecute &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="k"&gt;call&lt;/span&gt; EasyMotion#Search&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"\&amp;lt;CR&amp;gt;"&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;g:incsearch_cli_key_mappings&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="se"&gt;\&lt;/span&gt;   &lt;span class="s2"&gt;"\&amp;lt;Space&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="se"&gt;\&lt;/span&gt;       &lt;span class="s1"&gt;'key'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'IncsearchEasyMotion()'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="se"&gt;\&lt;/span&gt;       &lt;span class="s1"&gt;'noremap'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="se"&gt;\&lt;/span&gt;       &lt;span class="s1"&gt;'expr'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="se"&gt;\&lt;/span&gt;   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="se"&gt;\&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt="Targeted Searching" width="938" height="630" src="/images/2016-04-30-enhanced-vim-searching/targeted-searching.gif" /&gt;&lt;/p&gt;

&lt;p&gt;We finally have all-around better vim searching, by configuring three search related plugins to play nice with each other!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Defined Methods in Rake Tasks; _You're Gonna Have a Bad Time_</title>
    <link rel="alternate" href="http://kevinjalbert.com/defined_methods-in-rake-tasks-you-re-gonna-have-a-bad-time/"/>
    <id>http://kevinjalbert.com/defined_methods-in-rake-tasks-you-re-gonna-have-a-bad-time/</id>
    <updated>2016-07-30T15:24:26-04:00</updated>
    <published>2016-03-20T20:00:00-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <content type="html">&lt;p&gt;Rake tasks provide a nice way to handle common tasks surrounding a ruby project. Within Rails projects they are nearly unavoidable and even have their own directory from which they are autoloaded. Eventually a project will grow in size and complexity to warrant multiple &lt;em&gt;task&lt;/em&gt; files for better separation of concerns. This alone is nothing to be worried about, but it&amp;rsquo;s when you start using methods in your task files where &lt;em&gt;you&amp;rsquo;re gonna have a bad time&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s setup a dummy Rails project that has a task file that calculates and saves blog metrics.&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# lib/tasks/blog_metrics_task.rake&lt;/span&gt;
&lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="s1"&gt;'Calculate and save blog metrics'&lt;/span&gt;
&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ss"&gt;:blog_metrics&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;metrics&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calculate_blog_metrics&lt;/span&gt;
  &lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculate_blog_metrics&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Calculating blog metrics"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Saving blog metrics"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we run our task it does exactly what we wanted and expected it to do.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ rake blog_metrics
Calculating blog metrics
Saving blog Metrics
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No problem! Now lets fast-forward in time to when we want to add another task that creates a new blog post.&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# lib/tasks/create_blog_post_task.rake&lt;/span&gt;
&lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="s1"&gt;'Create and save a new blog post'&lt;/span&gt;
&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ss"&gt;:create_blog_post&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;blog_post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;generate_default_blog_post&lt;/span&gt;
  &lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blog_post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_default_blog_post&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Generating a default blog post"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blog_post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Saving defualt blog post"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we run our new task it does exactly what we wanted and expected it to do.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ rake create_blog_post
Generating a default blog post
Saving default blog post
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another success! Now here is where things get interesting. Let&amp;rsquo;s go back and run the first &lt;em&gt;correctly working&lt;/em&gt; task.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ rake blog_metrics
Calculating blog metrics
Saving default blog post
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Woah&amp;hellip; it&amp;rsquo;s the &lt;code&gt;#save&lt;/code&gt; that was defined in the other task file &amp;ndash; &lt;code&gt;create_blog_post_task.rake&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is kind of shocking and might have caught you off guard. Rails automatically loads all rake tasks (i.e., requires their file) when executing any rake task. The &lt;em&gt;gotcha&lt;/em&gt; here is that the defined methods in the loaded tasks files end up defined on the global namespace. These defined methods are therefore accessible across rake files, so it is &lt;em&gt;possible&lt;/em&gt; for methods to clash and be redefined if their signatures match.&lt;/p&gt;

&lt;p&gt;To better illustrate the order of events:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;rake blog_metrics&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Rails autoloads all rake tasks in alphanumeric order&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lib/tasks/blog_metrics_task.rake&lt;/code&gt; &lt;em&gt;is loaded and defines&lt;/em&gt; &lt;code&gt;#calculate_blog_metrics&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; &lt;code&gt;#save&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lib/tasks/create_blog_post_task.rake&lt;/code&gt; &lt;em&gt;is loaded and defines&lt;/em&gt; &lt;code&gt;# generate_default_blog_post&lt;/code&gt; &lt;em&gt;and &lt;strong&gt;redefines&lt;/strong&gt;&lt;/em&gt; &lt;code&gt;#save&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;blog_metrics&lt;/code&gt; &lt;em&gt;task is executed using last defined &lt;code&gt;#save&lt;/code&gt;, which was defined in the other task file&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;No worries right? Rake provides a &amp;lsquo;namespace&amp;rsquo; DSL. So we can modify our tasks to use this.&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="ss"&gt;:blog_metrics&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="s1"&gt;'Calculate and save blog metrics'&lt;/span&gt;
  &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ss"&gt;:run&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;metrics&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calculate_blog_metrics&lt;/span&gt;
    &lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculate_blog_metrics&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Calculating blog metrics"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Saving blog metrics"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We should be in the clear now.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ rake blog_metrics:run
Calculating blog metrics
Saving default blog post
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nope! The namespace DSL does nothing for the defined methods. So we still have the same problem.&lt;/p&gt;

&lt;p&gt;There are a couple of solutions to this problem:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Rename the methods, and ensure all future methods are uniquely named&lt;/li&gt;
&lt;li&gt;Inline the contents of the defined methods&lt;/li&gt;
&lt;li&gt;Extract the methods into a module/class and use that&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Solution #1 - Uniquely Named Methods&lt;/h2&gt;

&lt;p&gt;It is possible to simply ensure that we uniquely name our methods so that they do no clash and end up redefining each other.&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# lib/tasks/blog_metrics_task.rake&lt;/span&gt;
&lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="s1"&gt;'Calculate and save blog metrics'&lt;/span&gt;
&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ss"&gt;:blog_metrics&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;metrics&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calculate_blog_metrics&lt;/span&gt;
  &lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculate_blog_metrics&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Calculating blog metrics"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;save_blog_metrics&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Saving blog metrics"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# lib/tasks/create_blog_post_task.rake&lt;/span&gt;
&lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="s1"&gt;'Create and save a new blog post'&lt;/span&gt;
&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ss"&gt;:create_blog_post&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;blog_post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;generate_default_blog_post&lt;/span&gt;
  &lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blog_post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_default_blog_post&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Generating a default blog post"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;save_default_blog_post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blog_post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Saving defualt blog post"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This works and is a quick fix, although it is not exactly sustainable and requires you to be conscientious when naming new methods.&lt;/p&gt;

&lt;h2&gt;Solution #2 - Inline Method Contents&lt;/h2&gt;

&lt;p&gt;To ensure that method redefinition doesn&amp;rsquo;t occur we can simply remove the methods and inline their content.&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# lib/tasks/blog_metrics_task.rake&lt;/span&gt;
&lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="s1"&gt;'Calculate and save blog metrics'&lt;/span&gt;
&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ss"&gt;:blog_metrics&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Calculating blog metrics"&lt;/span&gt;
  &lt;span class="n"&gt;metrics&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="c1"&gt;# Inline calculating work&lt;/span&gt;

  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Saving blog metrics"&lt;/span&gt;
  &lt;span class="c1"&gt;# Inline saving work&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# lib/tasks/create_blog_post_task.rake&lt;/span&gt;
&lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="s1"&gt;'Create and save a new blog post'&lt;/span&gt;
&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ss"&gt;:create_blog_post&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Generating a default blog post"&lt;/span&gt;
  &lt;span class="n"&gt;blog_post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="c1"&gt;# Inline blog post generation work&lt;/span&gt;

  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Saving default blog post"&lt;/span&gt;
  &lt;span class="c1"&gt;# Inline saving work&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is also a quick fix, and might be optimal depending on the size, complexity, and reuse of the method&amp;rsquo;s content.&lt;/p&gt;

&lt;h2&gt;Solution #3 - Extract Methods into Module/Class&lt;/h2&gt;

&lt;p&gt;Removing the methods from the rake files themselves is another valid solution. The methods can be extracted into their own class or module and used within the task files.&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# lib/blog_metric_calculator.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BlogMetricCalculator&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;metrics&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Calculating blog metrics"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Saving blog metrics"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# lib/tasks/blog_metrics_task.rake&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'lib/blog_metric_calculator'&lt;/span&gt;

&lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="s1"&gt;'Calculate and save blog metrics'&lt;/span&gt;
&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ss"&gt;:blog_metrics&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;calculator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;BlogMetricCalculator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
  &lt;span class="n"&gt;calculator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;calculator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# lib/blog_post_creator.rb&lt;/span&gt;
&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;BlogPostCreator&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create_default_blog_post&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Generating a default blog post"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Saving default blog post"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# lib/tasks/create_blog_post_task.rake&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'lib/blog_post_creator'&lt;/span&gt;

&lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="s1"&gt;'Create and save a new blog post'&lt;/span&gt;
&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ss"&gt;:create_blog_post&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;blog_post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;BlogPostCreator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create_default_blog_post&lt;/span&gt;
  &lt;span class="no"&gt;BlogPostCreator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blog_post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the preferred method if there is sufficient complexity involved. By extracting the methods you begin to build up a set of related concerns within a module/class. By having an external entity outside of the rake tasks themselves you can now &lt;em&gt;test&lt;/em&gt; the defined functionality!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Vim Substitution Feedback Using `vim-over`</title>
    <link rel="alternate" href="http://kevinjalbert.com/vim-substitution-feedback-using-vim-over/"/>
    <id>http://kevinjalbert.com/vim-substitution-feedback-using-vim-over/</id>
    <updated>2016-07-30T15:24:26-04:00</updated>
    <published>2016-02-28T19:00:00-05:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <content type="html">&lt;p&gt;It is common while in vim to perform substitution tasks over the text you are editing. This is often accomplished using the following command:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:%s/&amp;lt;find&amp;gt;/&amp;lt;replacement&amp;gt;/g
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;%s&lt;/code&gt; command will perform substitution over every line within the buffer. The &lt;code&gt;/&amp;lt;find&amp;gt;/&amp;lt;replace&amp;gt;&lt;/code&gt; specifies the substitution to perform. Finally the &lt;code&gt;/g&lt;/code&gt; indicates that this should apply to multiple occurrences if they are present on the same line.&lt;/p&gt;

&lt;p&gt;This works great, although there is little affordance in determining whether the specified &lt;code&gt;&amp;lt;find&amp;gt;&lt;/code&gt; will hit the matches you are interested in. The aforementioned command is a &lt;em&gt;all-or-nothing&lt;/em&gt; with respect to execution, there is no &lt;em&gt;visual feedback&lt;/em&gt; until you execute the command.&lt;/p&gt;

&lt;h1&gt;Visual Feedback via vim-over&lt;/h1&gt;

&lt;p&gt;The &lt;a href="https://github.com/osyo-manga/vim-over"&gt;vim-over&lt;/a&gt; plugin provides a dynamic approach for visual feedback while performing substitutions. It is extremely useful while crafting specific &lt;code&gt;&amp;lt;find&amp;gt;&lt;/code&gt; patterns.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Visual Feedback Demo" width="440" height="320" src="/images/2016-02-29-vim-substitution-feedback-using-vim-over/visual-feedback-demo.gif" /&gt;&lt;/p&gt;

&lt;h1&gt;Tips and Tricks&lt;/h1&gt;

&lt;p&gt;I have three vim maps that I use to simplify and enhance my substitutions.&lt;/p&gt;

&lt;h2&gt;#1 - Substitute Word&lt;/h2&gt;

&lt;p&gt;This mapping (&lt;code&gt;&amp;lt;leader&amp;gt;s&lt;/code&gt;) will find and replace the text under the cursor using &lt;code&gt;vim-over&lt;/code&gt; for visual feedback. After the mapping has been executed you are left where you simply type the &lt;code&gt;&amp;lt;replacement&amp;gt;/g&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nnoremap &amp;lt;leader&amp;gt;s :OverCommandLine&amp;lt;CR&amp;gt; %s/&amp;lt;C-r&amp;gt;&amp;lt;C-w&amp;gt;/
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;#2 - Global Substitution&lt;/h2&gt;

&lt;p&gt;This mapping (&lt;code&gt;&amp;lt;leader&amp;gt;v&lt;/code&gt;) will perform a global substitution using &lt;code&gt;vim-over&lt;/code&gt; for visual feedback. After the mapping has been executed you are left where you type the &lt;code&gt;&amp;lt;find&amp;gt;/&amp;lt;replacement&amp;gt;/g&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function! VisualFindAndReplace()
    :OverCommandLine %s/
    :noh
endfunction
nnoremap &amp;lt;Leader&amp;gt;v :call VisualFindAndReplace()&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;#3 - Visual Substitution&lt;/h2&gt;

&lt;p&gt;This mapping (&lt;code&gt;&amp;lt;leader&amp;gt;v&lt;/code&gt; while in visual mode) will perform a substitution only within the visually selected text using &lt;code&gt;vim-over&lt;/code&gt; for visual feedback. After the mapping has been executed you are left where you type the &lt;code&gt;&amp;lt;find&amp;gt;/&amp;lt;replacement&amp;gt;/g&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function! VisualFindAndReplaceWithSelection() range
    :'&amp;lt;,'&amp;gt;OverCommandLine s/
    :noh
endfunction
xnoremap &amp;lt;Leader&amp;gt;v :call VisualFindAndReplaceWithSelection()&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>Project-Wide Search and Replace with Vim</title>
    <link rel="alternate" href="http://kevinjalbert.com/project-wide-search-and-replace-with-vim/"/>
    <id>http://kevinjalbert.com/project-wide-search-and-replace-with-vim/</id>
    <updated>2016-07-30T15:24:26-04:00</updated>
    <published>2016-01-27T19:00:00-05:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <content type="html">&lt;p&gt;There are many instances where you might want to perform a mass search and replace in Vim. The following are two commands that can help out with such a task.&lt;/p&gt;

&lt;h2&gt;List of Files&lt;/h2&gt;

&lt;p&gt;First you need to acquire a list of files in which you want to perform search and replaces on. The following Vim command &lt;code&gt;args&lt;/code&gt; allows you to store a set of file names to act on later.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:args `&amp;lt;command which generates a file list&amp;gt;`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thus we can use the following to store a list of files which match the &lt;code&gt;&amp;#39;Base::Lol::&amp;#39; .&lt;/code&gt; pattern.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:args `ag -l 'Base::Lol::' .`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If matches were not found you&amp;rsquo;ll get back something like the following &lt;em&gt;E79: Cannot expand wildcards&lt;/em&gt;. If at least one match was found the current buffer will change to one of the found files.&lt;/p&gt;

&lt;h2&gt;Act on Files&lt;/h2&gt;

&lt;p&gt;Now that you have the list of files that you want to act on, we are ready to perform our search and replace on them. The following Vim command &lt;code&gt;argdo&lt;/code&gt; allows us to specify a command to run against each of the files stored from the &lt;code&gt;args&lt;/code&gt; command.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:argdo &amp;lt;command to perform on each file stored from args&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In our running example we can replace every instance of the search we performed with a new string. We use the &lt;code&gt;%s&lt;/code&gt; command to perform this substitution (&lt;code&gt;%s/&amp;lt;original&amp;gt;/&amp;lt;new&amp;gt;&lt;/code&gt;). The &lt;code&gt;/g&lt;/code&gt; specifies that this substitution should be applied globally to the file. Finally we have &lt;code&gt;| w&lt;/code&gt; which saves the file after the substitution has been applied.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:argdo %s/Base::Lol::/Lol::Base::/g | w
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You are not only restricted to to using substitution here. Other resources indicated using macros.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Respect HTTP Caching</title>
    <link rel="alternate" href="http://kevinjalbert.com/respect-http-caching/"/>
    <id>http://kevinjalbert.com/respect-http-caching/</id>
    <updated>2016-07-30T15:24:26-04:00</updated>
    <published>2015-09-23T20:00:00-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <content type="html">&lt;p&gt;API developers place plenty of consideration on how to handle scaling. A few techniques and approaches: Application caching, sharding, larger/more servers, background queues, HTTP caching, and Content Delivery Networks (CDNs). A well architected API employs a combination of these solutions to achieve the desired scalability. Of the scaling solutions, very few are actually exposed to the consumers of an API. One strategy in which the end-users actively participate in is &lt;em&gt;HTTP Caching&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;By respecting HTTP caching on a client&amp;rsquo;s application, network communications complete quicker and in some cases are unnecessary. Network response payloads are sometimes omitted due to a 304 HTTP response. Finally if you use HTTP caching, application servers will love you.&lt;/p&gt;

&lt;h2&gt;HTTP Caching&lt;/h2&gt;

&lt;p&gt;If an endpoint is to be hit repeatedly, HTTP caching can dramatically reduce the load on the server. There are a number of ways one can use HTTP caching. Similar to other scaling techniques some of these can be used in tandem.&lt;/p&gt;

&lt;h3&gt;Cache-Control&lt;/h3&gt;

&lt;p&gt;On an HTTP response a &lt;code&gt;cache-control&lt;/code&gt; header may present. This header provides the client insight on how they should approach making similar requests. For example:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Cache-Control: max-age=60, must-revalidate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;max-age=60&lt;/code&gt; specifies that the request should be cached and used locally for a maximum duration of one minute. The &lt;code&gt;must-revalidate&lt;/code&gt; forces subsequent requests to still communicate to the server to respect the &lt;em&gt;freshness&lt;/em&gt; of the response (i.e., information which indicates that the content of the response has updated). These two simple cache-control headers provide both &lt;em&gt;non-stale&lt;/em&gt; responses with reduced payload, provided the endpoint is respecting the max-age (i.e., not changing frequently).&lt;/p&gt;

&lt;p&gt;To better understand cache-controls, our coworker at theScore, Thuva Tharam, has an &lt;a href="http://techblog.thescore.com/2014/11/19/are-your-cache-control-directives-doing-what-they-are-supposed-to-do/"&gt;excellent blog post&lt;/a&gt; written on the subject. The individual cache-control directives and their effects are described. Suggestions and examples are provided to illustrate how to use cache-control effectively.&lt;/p&gt;

&lt;h3&gt;Last-Modified&lt;/h3&gt;

&lt;p&gt;As previously mentioned, it is possible for a cached request to &lt;code&gt;re-validate&lt;/code&gt; with the server to check for &lt;em&gt;freshness&lt;/em&gt;. Subsequent requests have an additional &lt;code&gt;If-Modified-Since&lt;/code&gt; which contains the value of the response&amp;rsquo;s &lt;code&gt;Last-Modified&lt;/code&gt; header. This allows the server to compare the provided time on subsequent requests against the responses and return the full response or simply a &lt;em&gt;304 status code&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;When a server returns a full response it takes more time to compute/collect the necessary information along with rendering time for the response. With the correct &lt;code&gt;cache-control&lt;/code&gt; along with a &lt;code&gt;Last-Modified&lt;/code&gt;, a server spends less time constructing the response. A &lt;em&gt;304 status code&lt;/em&gt; response is quick, and has a small payload size compared to a normal full response.&lt;/p&gt;

&lt;h3&gt;ETags&lt;/h3&gt;

&lt;p&gt;Even when the &lt;code&gt;Last-Modified&lt;/code&gt; value has changed, the actual content might still be the same. If the server takes advantage of ETags then there will be an &lt;code&gt;ETag&lt;/code&gt; header on the response. The benefit of using ETags shines on requests that do not change often. ETag caching does not expire based on time like the previous two caching mechanisms, and is instead a function of the response&amp;rsquo;s content. This form of caching is ideal as it provides caching while still allowing for freshness of updates to the content.&lt;/p&gt;

&lt;p&gt;When a subsequent request is made a &lt;code&gt;If-None-Match&lt;/code&gt; header is sent along with the previous request&amp;rsquo;s ETag. The server will then use the &lt;em&gt;ETag&lt;/em&gt; to determine &lt;em&gt;freshness&lt;/em&gt;. If the ETag of the request match the that of the server&amp;rsquo;s response a &lt;em&gt;304 status code&lt;/em&gt; is returned.&lt;/p&gt;

&lt;h2&gt;Respecting HTTP Caching for API Consumers&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;API Consumers &amp;ndash; Client applications that makes more than one HTTP request to an external web service&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;API Consumers can take on different forms such as a browser or desktop/mobile/web application.&lt;/p&gt;

&lt;h3&gt;Browsers&lt;/h3&gt;

&lt;p&gt;Modern browsers have no problem handling HTTP caching. It is also easy to verify that they are respecting HTTP caching by using their &lt;em&gt;Developer Tools&lt;/em&gt; interface. The following image shows two requests made to the same API endpoint (https://api.github.com/users/kevinjalbert) in Google Chrome&amp;rsquo;s Network Tab of the Developer Tools:&lt;/p&gt;

&lt;p&gt;First API request results in a 200 status code (standard success response):
&lt;img alt="First Request results in a Status Code 200" width="1366" height="164" src="/images/2015-09-24-respect-http-caching/200-status-code-chrome.png" /&gt;&lt;/p&gt;

&lt;p&gt;Second API request results in a 304 status code (resource has not been modified since the last request, no body is returned in response):
&lt;img alt="Second Request results in a Status Code 304" width="1366" height="152" src="/images/2015-09-24-respect-http-caching/304-status-code-chrome.png" /&gt;&lt;/p&gt;

&lt;h3&gt;Mobile Applications&lt;/h3&gt;

&lt;p&gt;Android and iOS have native mechanisms in place that developers can use to handle HTTP caching on any outbound requests. On iOS there is &lt;a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSURLCache_Class/index.html#//apple_ref/occ/cl/NSURLCache"&gt;NSURLCache&lt;/a&gt; and on Android there is &lt;a href="http://developer.android.com/reference/android/net/http/HttpResponseCache.html"&gt;HttpResponseCache&lt;/a&gt;. If possible all HTTP requests made from mobile devices should be using the caching mechanisms.&lt;/p&gt;

&lt;h3&gt;Desktop Applications&lt;/h3&gt;

&lt;p&gt;Many programming languages can be used when creating desktop applications. In these cases it is best to check whether there is a built HTTP request caching mechanism akin to what Android and iOS have.&lt;/p&gt;

&lt;h3&gt;Web Applications&lt;/h3&gt;

&lt;p&gt;It is not uncommon to have web services talking to other web services through a defined API. In these situations there might not be a defined networking layer to push API requests through. For example, within a Ruby/Rails application one might use &lt;a href="https://github.com/lostisland/faraday"&gt;Faraday&lt;/a&gt; to handle network connections. HTTP caching is not enabled by default on Faraday and is instead an opt-in option.&lt;/p&gt;

&lt;p&gt;The following is an example of using Faraday with &lt;a href="https://github.com/plataformatec/faraday-http-cache"&gt;Faraday::HttpCache&lt;/a&gt; middleware to handle HTTP caching.&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'active_support'&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'faraday'&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'faraday-http-cache'&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;ApiConsumer&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Requester&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;cached: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="vi"&gt;@connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Faraday&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'https://api.github.com/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;cached&lt;/span&gt;
          &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;use&lt;/span&gt; &lt;span class="no"&gt;Faraday&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;HttpCache&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="ss"&gt;logger: &lt;/span&gt;&lt;span class="no"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;STDOUT&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                   &lt;span class="ss"&gt;instrumenter: &lt;/span&gt;&lt;span class="no"&gt;ActiveSupport&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Notifications&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
        &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;adapter&lt;/span&gt; &lt;span class="no"&gt;Faraday&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;default_adapter&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
      &lt;span class="n"&gt;start_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;

      &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;

      &lt;span class="n"&gt;time_taken_ms&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start_time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;
      &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Time Taken: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;time_taken_ms&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; ms"&lt;/span&gt;

      &lt;span class="n"&gt;response&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# Subscribes to all Faraday::HttpCache events&lt;/span&gt;
&lt;span class="no"&gt;ActiveSupport&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Notifications&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;subscribe&lt;/span&gt; &lt;span class="s2"&gt;"http_cache.faraday"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ActiveSupport&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Notifications&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Cache Status: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:cache_status&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Faraday with HTTP Caching"&lt;/span&gt;
&lt;span class="n"&gt;api_requester&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ApiConsumer&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Requester&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;cached: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;times&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;api_requester&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'users/kevinjalbert'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;sleep&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Faraday without HTTP Caching"&lt;/span&gt;
&lt;span class="n"&gt;api_requester&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ApiConsumer&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Requester&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;cached: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;times&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;api_requester&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'users/kevinjalbert'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;sleep&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Executing the above example produces the following log statements. With caching the time taken per request decreases tremendously on subsequent requests. By respecting the HTTP cache-controls of the API, the subsequent request can be used until the cache-control directives say otherwise (i.e., ETag/Last-Modified changes, or the cache expires exceeding the max-age).&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Faraday with HTTP Caching
D, [2015-09-20T23:06:27.570751 #15189] DEBUG -- : HTTP Cache: [GET /users/kevinjalbert] miss, store
Cache Status: miss
Time Taken: 1396.139 ms
D, [2015-09-20T23:06:29.577798 #15189] DEBUG -- : HTTP Cache: [GET /users/kevinjalbert] fresh
Cache Status: fresh
Time Taken: 1.857 ms
D, [2015-09-20T23:06:31.580719 #15189] DEBUG -- : HTTP Cache: [GET /users/kevinjalbert] fresh
Cache Status: fresh
Time Taken: 0.971 ms
D, [2015-09-20T23:06:33.585455 #15189] DEBUG -- : HTTP Cache: [GET /users/kevinjalbert] fresh
Cache Status: fresh
Time Taken: 1.139 ms
D, [2015-09-20T23:06:35.587833 #15189] DEBUG -- : HTTP Cache: [GET /users/kevinjalbert] fresh
Cache Status: fresh
Time Taken: 1.133 ms

Faraday without HTTP Caching
Time Taken: 807.486 ms
Time Taken: 277.589 ms
Time Taken: 186.115 ms
Time Taken: 475.249 ms
Time Taken: 1130.691 ms
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>Faster RSpec Regression Testing</title>
    <link rel="alternate" href="http://kevinjalbert.com/faster-rspec-regression-testing/"/>
    <id>http://kevinjalbert.com/faster-rspec-regression-testing/</id>
    <updated>2016-07-30T15:24:26-04:00</updated>
    <published>2015-09-20T20:00:00-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <content type="html">&lt;h2&gt;Testing Approaches&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Immediately&lt;/em&gt; on the code that is being developed to help guide development. Generally using a &lt;em&gt;subset&lt;/em&gt; of the test suite.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Afterwards&lt;/em&gt; on the complete codebase to ensure no regressions appear. This is always done using the &lt;em&gt;complete&lt;/em&gt; test suite.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In an ideal environment, the complete test suite is run after every meaningful code change. This approach works for a small project, but it can grow into a time consuming process. Developers may only run a subset of tests that exercise the modified source code. Faster test execution allows for tighter feedback loops between testing and developing.&lt;/p&gt;

&lt;p&gt;Eventually the active development stops as the feature is completed. A developer wants to have a high-level of confidence in the code that they wrote before committing the changes. By running the complete test suite, one can have a certain level of assurance that the code to be committed will not cause issues. Ideally this second phase of testing is carried out locally by the developer, but also on a continuous integration server to prevent regressions.&lt;/p&gt;

&lt;h2&gt;RSpecing &lt;code&gt;it&lt;/code&gt; up&lt;/h2&gt;

&lt;p&gt;RSpec tests are executed using the &lt;code&gt;it&lt;/code&gt; method. The code within the &lt;code&gt;it&lt;/code&gt; block is executed after applying context using &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;before&lt;/code&gt;, which can be seen as the pre-amble of the test. In other words, for every &lt;code&gt;it&lt;/code&gt; block the test will execute the required pre-amble before the actual &lt;code&gt;it&lt;/code&gt; block.&lt;/p&gt;

&lt;h3&gt;Many &lt;code&gt;it&lt;/code&gt; blocks&lt;/h3&gt;

&lt;p&gt;During development it is useful to use the following technique to understand as much detail of failing tests:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="c1"&gt;# A trivial example to show the verification of&lt;/span&gt;
  &lt;span class="c1"&gt;# multiple conditions using many 'it' blocks&lt;/span&gt;
  &lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;describe&lt;/span&gt; &lt;span class="s1"&gt;'test with many it blocks'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;upcase&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;upcase&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;upcase&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Failures:

  1) test with many it blocks should eq "B"
     Failure/Error: it { expect('b'.upcase).to eq('B') }

       expected: "B"
            got: "C"

  2) test with many it blocks should eq "C"
     Failure/Error: it { expect('b'.upcase).to eq('C') }

       expected: "C"
            got: "B"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The results of the testing present all of the failures. This approach is important during iterative development as fixing one test might cause others to fail.&lt;/p&gt;

&lt;h3&gt;Combining &lt;code&gt;it&lt;/code&gt; blocks&lt;/h3&gt;

&lt;p&gt;Another approach that can be used with RSpec is to combine the many &lt;code&gt;it&lt;/code&gt; blocks into one:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="c1"&gt;# A trivial example to show the verification of&lt;/span&gt;
  &lt;span class="c1"&gt;# multiple conditions using a combined 'it' block&lt;/span&gt;
  &lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;describe&lt;/span&gt; &lt;span class="s1"&gt;'test with a combined it block'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;upcase&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;upcase&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;upcase&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Failures:

  1) test with a combined it block should eq "B"
     Failure/Error: expect('c'.upcase).to eq('B')

       expected: "B"
            got: "C"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This time the results present &lt;em&gt;only the first&lt;/em&gt; failure, even though two assertions are incorrect. This approach provides less information than the first example. Although there is a different benefit, it runs less examples (tests and their complete pre-amble). This approach leads to quicker test executions, with the loss of the complete listing of failures. Arguably this approach is better suited when a feature is complete and the tests remain present to detect regressions.&lt;/p&gt;

&lt;h2&gt;Performance Impact&lt;/h2&gt;

&lt;p&gt;In the previous section, two styles of using RSpec&amp;rsquo;s &lt;code&gt;it&lt;/code&gt; blocks were illustrated. The next example showcases both approaches to understand how the testing performance changes. To simulate some pre-amble (i.e., database interactions, setting up objects) sleeps are used when accessing the values from their &lt;code&gt;let&lt;/code&gt; blocks.&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'rspec'&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AttributeObject&lt;/span&gt;
  &lt;span class="kp"&gt;attr_reader&lt;/span&gt; &lt;span class="ss"&gt;:value1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:value2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:value3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:value4&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@value1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value1&lt;/span&gt;
    &lt;span class="vi"&gt;@value2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value2&lt;/span&gt;
    &lt;span class="vi"&gt;@value3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value3&lt;/span&gt;
    &lt;span class="vi"&gt;@value4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value4&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;describe&lt;/span&gt; &lt;span class="s1"&gt;'performance using `it` blocks'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;subject&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="no"&gt;AttributeObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:value1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;sleep&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:value2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;sleep&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:value3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;sleep&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:value4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;sleep&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="s1"&gt;'slow tests due to many `it` blocks'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;value1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;value2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;value3&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;value4&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="s1"&gt;'faster tests due to a combined `it` block'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;value1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;value2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;value3&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;value4&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For this example it is possible to use both testing approaches. There are two criteria that must be satisfied to allow this transformation. For each &lt;code&gt;it&lt;/code&gt; block:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;pre-amble is the same&lt;/strong&gt;. In the example they are all instantiating the &lt;code&gt;AttributeObject&lt;/code&gt; with the four value arguments.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;contents are not mutating the environment in a different way from each other&lt;/strong&gt;. If an &lt;code&gt;it&lt;/code&gt; block mutates the environment then the many &lt;code&gt;it&lt;/code&gt; block approach might have unexpected results. In the example each &lt;code&gt;it&lt;/code&gt; block contains only a single assertion.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Many 'it' blocks
Finished in 1.67 seconds (files took 0.09327 seconds to load)
4 examples, 0 failures

# Combined 'it' block
Finished in 0.41675 seconds (files took 0.09545 seconds to load)
1 example, 0 failures
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is clear to see that the combined &lt;code&gt;it&lt;/code&gt; block executes less examples and therefore requires less time. Both of these approaches are testing the &lt;em&gt;exact same thing&lt;/em&gt;, however one does so more quickly than the other. There is still the loss of the precise failure reporting per &lt;code&gt;it&lt;/code&gt; block. It can be argued that it is not a huge loss given the code under test has been developed and the tests are for regressions.&lt;/p&gt;

&lt;h3&gt;Larger Scale Test Suite&lt;/h3&gt;

&lt;p&gt;To better illustrate the benefits of using combined &lt;code&gt;it&lt;/code&gt; blocks when possible, I have applied this technique to a larger project. The conversion between the two approaches was straight-forward and the results are satisfying. It was possible to consolidated many &lt;code&gt;it&lt;/code&gt; blocks (300 less test examples), reducing the run time by 38%.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Before
Finished in 3 minutes 6.3 seconds (files took 10.06 seconds to load)
1506 examples, 0 failures

# After
Finished in 1 minute 55.27 seconds (files took 10.11 seconds to load)
1206 examples, 0 failures
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The results are going to differ between projects and testing styles, although in most cases there will be some performance improvements.&lt;/p&gt;

&lt;h2&gt;Suggested Testing Workflow&lt;/h2&gt;

&lt;p&gt;The following workflow is the one I follow as it provides the best of both worlds:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Iteratively develop feature using many &lt;code&gt;it&lt;/code&gt; blocks for feedback locally&lt;/li&gt;
&lt;li&gt;Complete feature&lt;/li&gt;
&lt;li&gt;Convert many &lt;code&gt;it&lt;/code&gt; blocks into a combined &lt;code&gt;it&lt;/code&gt; block for regressions&lt;/li&gt;
&lt;li&gt;Merge feature into master&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Eventually some issue may come up and a regression might be found. If more work is involved to fix and understand the issue at hand I might split the combined &lt;code&gt;it&lt;/code&gt; block to provide more feedback on failures. At this point I would go back to following the workflow from the start.&lt;/p&gt;

&lt;h3&gt;Best of Both Worlds with RSpec 3.3 &lt;code&gt;aggregate_failures&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;With &lt;a href="http://rspec.info/blog/2015/06/rspec-3-3-has-been-released/"&gt;RSpec 3.3&lt;/a&gt; a new feature &lt;code&gt;aggregate_failures&lt;/code&gt; was introduced. This feature is specific to RSpec, and offers the best of both worlds with respect to the testing disscused earlier (many &lt;code&gt;it&lt;/code&gt; blocks vs. single &lt;code&gt;it&lt;/code&gt; block).&lt;/p&gt;

&lt;p&gt;In summary it is possible to wrap the asserts within a combined &lt;code&gt;it&lt;/code&gt; block with &lt;code&gt;agregate_failiures&lt;/code&gt;. This allows all the assertions to execute with a single setup similar to the combined &lt;code&gt;it&lt;/code&gt; block approach, yet any failed asserts are individually reported should they occur similar to the many &lt;code&gt;it&lt;/code&gt; block approach.&lt;/p&gt;

&lt;p&gt;The following is a code snippet from the &lt;a href="http://rspec.info/blog/2015/06/rspec-3-3-has-been-released/"&gt;RSpec 3.3&lt;/a&gt; release notes where additional ways of usage are described.&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;Client&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s2"&gt;"returns a successful JSON response"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;make_request&lt;/span&gt;

    &lt;span class="n"&gt;aggregate_failures&lt;/span&gt; &lt;span class="s2"&gt;"testing response"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;status&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="kp"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Content-Type"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"application/json"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;body&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'{"message":"Success"}'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>Share Your Bag of Tricks</title>
    <link rel="alternate" href="http://kevinjalbert.com/share-your-bag-of-tricks/"/>
    <id>http://kevinjalbert.com/share-your-bag-of-tricks/</id>
    <updated>2016-07-30T15:24:26-04:00</updated>
    <published>2015-04-30T20:00:00-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <content type="html">&lt;p&gt;Everyone has specific tips and shortcuts that they have picked up from various sources, including the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Trial &amp;amp; error or self-discovery&lt;/li&gt;
&lt;li&gt;From a friend or colleague&lt;/li&gt;
&lt;li&gt;Reading books, blog posts, articles&lt;/li&gt;
&lt;li&gt;Watching videos, conferences&lt;/li&gt;
&lt;li&gt;Formal education&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Regardless of how one has gained these skills, it is obvious that they increase their effectiveness and efficiency at tasks. With enough exposure and time, one can amass an impressive assortment of skills, tips and shortcuts. We tend to call these people &lt;em&gt;veterans&lt;/em&gt;/&lt;em&gt;experts&lt;/em&gt;/&lt;em&gt;experienced&lt;/em&gt;/&lt;em&gt;seniors&lt;/em&gt;, amongst other words of praise and respect.&lt;/p&gt;

&lt;p&gt;This post is not directed towards a specific group of individuals, as the overarching message applies to everyone. It is common to find large visible gaps with respect to skills and/or experience. For example, within a workplace environment a more experienced colleague might have customized and automated parts of their daily workflow to increase their effectiveness and efficiency.&lt;/p&gt;

&lt;h2&gt;The Bag of Tricks&lt;/h2&gt;

&lt;p&gt;In general the following is true:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Experienced individuals have something which sets them apart from the less-experienced.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let us ignore the common qualities that account for uniqueness such as personality, and focus solely on ones skills and experience. Then, it&amp;rsquo;s possible to identify their &lt;em&gt;bag of tricks&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A bag of tricks is really a simple concept. Often it is a set of small tips and shortcuts used to make certain tasks easier than they normally would be.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Bag of Tricks&lt;/strong&gt; &lt;em&gt;| bag əv triks |&lt;/em&gt;
noun&lt;/p&gt;

&lt;p&gt;1 &lt;em&gt;informal&lt;/em&gt; a set of ingenious plans, techniques, or resources: &lt;em&gt;I better pull something out of my &lt;b&gt;bag of tricks&lt;/b&gt; to finish this task quickly&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In some cases the holder of the bag of tricks clearly knows what resides in their bag. In other cases they might be forgetting some items, which occurs over time as the holder has completely integrated it into their normal repertoire.&lt;/p&gt;

&lt;h2&gt;Sharing the Bag&lt;/h2&gt;

&lt;p&gt;Often in workplaces we have various levels of experience such as: &lt;em&gt;Junior&lt;/em&gt;, &lt;em&gt;Intermediate&lt;/em&gt;, &lt;em&gt;Senior&lt;/em&gt;. In our societies we have accepted the following model:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Experienced individuals can &lt;em&gt;mentor&lt;/em&gt; the less experienced &lt;em&gt;pupils&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is a very simple learning model, and it works. It can be seen in many industries and professions as they promote formal mentorship/apprenticeship programs. These formal programs often have a cost associated with them, although that typically correlates with the quality received. Informal approaches are often executed between colleagues with little structure.&lt;/p&gt;

&lt;p&gt;Everyone has something worth showing. Someone will be interested in learning it, or improving upon it. Levels of experience does not guarantee one will always be teaching or learning. In a symbiotic relationship everyone will be sharing their bag of tricks.&lt;/p&gt;

&lt;h3&gt;Pupil&amp;rsquo;s Perspective&lt;/h3&gt;

&lt;p&gt;Getting a peek at someone&amp;rsquo;s bag of tricks is of great benefit for the pupil. If someone offers advice, there should be no hesitation to accept it. A pupil, or anyone for that matter, should always accept the offer of advice since there is no downside to hearing it out. Even if the pupil has already known about the provided advice, the act of hearing it again reinforces it. It might also be possible for the pupil to give back immediately to the mentor.&lt;/p&gt;

&lt;p&gt;The best thing a pupil can do is to provide feedback and appreciation. By questioning the mentor and asking for additional details, it forces the mentor to inspect and reflect on their bag of tricks. In some situation the tides can change and the mentor will learn from the pupil.&lt;/p&gt;

&lt;h3&gt;Mentor&amp;rsquo;s Perspective&lt;/h3&gt;

&lt;p&gt;Mentors are encouraged to share their bag of tricks, and most are willing to do so. Sharing knowledge has many benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Joy in helping someone&lt;/li&gt;
&lt;li&gt;Gained respect from pupil and others&lt;/li&gt;
&lt;li&gt;Self-improvement by going over specifics&lt;/li&gt;
&lt;li&gt;Constructive criticism&lt;/li&gt;
&lt;li&gt;Encouraging similar behaviour&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sharing and helping can bring much joy to a mentor, which in turn leads to gaining respect from the pupil and others. As previously mentioned, a mentor may not necessarily know of the content of their bag of tricks. A pupil can probe and inquire on specifics to the point where new light is shone on the bag of tricks. By mentoring a pupil, it encourages others to do the same when they have amassed their own bag of tricks.&lt;/p&gt;

&lt;h2&gt;To Share, or Not to Share?&lt;/h2&gt;

&lt;p&gt;There might be situations where an individual does not want to share their bag of tricks. One strong reason for this is that they would lose their &lt;em&gt;edge&lt;/em&gt; over their colleagues. This is understandable, although if the environment is amenable to learning then there is no real reason to hold back.&lt;/p&gt;

&lt;p&gt;If everyone in an environment is holding back on knowledge, it does not sound like a place of growth. Furthermore, if everyone is scared of losing their edge, there are probably greater issues in that environment. If there is no sharing of knowledge between colleagues, everyone is at a disadvantage compared to the alternative.&lt;/p&gt;

&lt;h2&gt;Means of Sharing&lt;/h2&gt;

&lt;p&gt;It is clear that sharing is a win-win situation. In a workplace environment sharing knowledge is simple and commonplace. Either the pupil asks for help, or the mentor decides to impart knowledge. If the environment is pro-learning then this behaviour will be encouraged and valued. There might even be an explicit mentoring process in place or less informal opportunities such as &lt;em&gt;lunch and learns&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;As mentioned before, anyone can mentor regardless of their skill and experience levels. Everyone should take every opportunity to share something from their bag of tricks. Not only will this immediately benefit others, but what goes around comes around. Sharing can take many forms, including the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Blog Posts, Public Notes, Documentation&lt;/li&gt;
&lt;li&gt;Mentoring, Pairing Sessions&lt;/li&gt;
&lt;li&gt;Talks, Presentations, Demonstrations&lt;/li&gt;
&lt;li&gt;Video/Audio Recordings&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The best way is to reach a broad audience, so that everyone can benefit from it. Thankfully the Internet is an amazing medium to communicate to the masses.&lt;/p&gt;

&lt;p&gt;Take pride and share your bag of tricks!&lt;/p&gt;
</content>
  </entry>
</feed>
