<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kevin Jalbert</title>
  <link href="http://kevinjalbert.com"/>
  <link href="http://kevinjalbert.com/feed.xml" rel="self"/>
  <updated>2016-12-20T19:00:00-05:00</updated>
  <author>
    <name>Kevin Jalbert</name>
  </author>
  <id>http://kevinjalbert.com</id>
  <entry>
    <title>Information at a Glance: `RailsRequestStats`</title>
    <link rel="alternate" href="http://kevinjalbert.com/information-at-a-glance-rails-request-stats/"/>
    <id>http://kevinjalbert.com/information-at-a-glance-rails-request-stats/</id>
    <updated>2017-01-08T14:19:32-05:00</updated>
    <published>2016-12-20T19:00:00-05:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">`RailsRequestStats` provides a simple drop-in solution to expose more statistics on requests. New information is presented in your development logs, supplying you with the required information to iteratively optimize requests by noticing subtle changes in the number of queries and average runtimes.
</description>
    <content type="html">&lt;p&gt;I developed &lt;a href="https://github.com/kevinjalbert/rails_request_stats"&gt;rails_request_stats&lt;/a&gt; to solve a personal problem of mine while optimizing certain Rails API endpoints at work. It provided me a quick way to get the required information at a glance in development logs.&lt;/p&gt;

&lt;p&gt;To best describe what and how &lt;code&gt;rails_request_stats&lt;/code&gt; can be used the, following comes directly from &lt;code&gt;rails_request_stats&lt;/code&gt;&amp;rsquo;s &lt;a href="https://github.com/kevinjalbert/rails_request_stats#railsrequeststats"&gt;README&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;During development have you ever:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Wondered how many SQL queries occurred during a request?&lt;/li&gt;
&lt;li&gt;Been curious on average view and database runtime for a request?&lt;/li&gt;
&lt;li&gt;Wanted a report containing overall statistics of all unique requests?&lt;/li&gt;
&lt;li&gt;Wanted a better way to iteratively optimize requests?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;RailsRequestStats&lt;/code&gt; provides a simple drop-in solution to expose more statistics on requests. New information is presented in your development logs, supplying you with the required information to iteratively optimize requests by noticing subtle changes in the number of queries and average runtimes.&lt;/p&gt;

&lt;h2&gt;How this Works&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;RailsRequestStats::NotificationSubscribers&lt;/code&gt; when required will subscribe to the &lt;code&gt;sql.active_record&lt;/code&gt;, &lt;code&gt;start_processing.action_controller&lt;/code&gt;, and &lt;code&gt;process_action.action_controller&lt;/code&gt; &lt;code&gt;ActionSupport::Notifications&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;sql.active_record&lt;/code&gt; event allow us to count each SQL query that passes though ActiveRecord, which we count internally.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;cache_read.active_support&lt;/code&gt; event allows us to count each read and hit to the Rails cache.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;cache_fetch_hit.active_support&lt;/code&gt; event allows us to count the cache hits to the Rails cache when using &lt;em&gt;fetch&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;start_processing.action_controller&lt;/code&gt; event allows us to clear iternal counts, as well as perform a &lt;code&gt;GC.start&lt;/code&gt; and capturing the count of objects residing in the &lt;code&gt;ObjectSpace&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;process_action.action_controller&lt;/code&gt; event provides us runtime information along with identifying controller action details, we even determine the number of generated objects since the start of processing the action. At this point we are able to synthesis the query information and runtime information and store them internally in running collection of &lt;code&gt;RailsRequestStats::RequestStats&lt;/code&gt; objects.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; the data collection is tracked and stored in class-level instance variables. Thus this is not threadsafe, as no concurrency mechanisms are used (i.e., mutex). For non-threaded and forking application servers this should be fine.&lt;/p&gt;

&lt;h2&gt;Installation&lt;/h2&gt;

&lt;p&gt;Add this line to your application&amp;rsquo;s Gemfile:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'rails_request_stats'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;group: :development&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Example Outputs&lt;/h2&gt;

&lt;p&gt;Within the console ./log/development.log you should start seeing the following statement appearing at the end of processing a request:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[RailsRequestStats] (AVG view_runtime: 163.655ms | AVG db_runtime: 15.465ms | AVG generated_object_count: 14523 | query_count: 9 | cached_query_count: 0 | cache_read_count: 3 | cache_hit_count: 3)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally when you exit the application&amp;rsquo;s server, you should see a summary report of all the data captured:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[RailsRequestStats] INDEX:html "/users" (AVG view_runtime: 128.492ms | AVG db_runtime: 9.186ms | AVG generated_object_count: 25529 | MIN query_count: 8 | MAX query_count: 9) from 4 requests
[RailsRequestStats] SHOW:html "/users/2" (AVG view_runtime: 13.0429ms | AVG db_runtime: 1.69033ms | AVG generated_object_count: 14523 | MIN query_count: 2 | MAX query_count: 2) from 3 requests
[RailsRequestStats] SHOW:html "/users/2?test=1&amp;amp;blah=2" (AVG view_runtime: 17.8252ms | AVG db_runtime: 1.621ms | AVG generated_object_count: 18511 | MIN query_count: 2 | MAX query_count: 2) from 1 requests
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Customizing Outputs&lt;/h2&gt;

&lt;h3&gt;Memory Stats&lt;/h3&gt;

&lt;p&gt;By setting the following class variable within in an initializer (&lt;code&gt;./config/initializers/rails_request_stats.rb&lt;/code&gt;):&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;RailsRequestStats&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Report&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;print_memory_stats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see the &lt;em&gt;generated objects&lt;/em&gt; within the &lt;code&gt;ObjectSpace&lt;/code&gt; for individual requests:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[RailsRequestStats] (AVG view_runtime: 93.7252ms | AVG db_runtime: 8.66075ms | AVG generated_object_count: 125282 | query_count: 8 | cached_query_count: 0 | cache_read_count: 3 | cache_hit_count: 3 | generated_objects: {:total_generated_objects=&amp;gt;111878, :object=&amp;gt;921, :class=&amp;gt;35, :module=&amp;gt;0, :float=&amp;gt;0, :string=&amp;gt;49501, :regexp=&amp;gt;1556, :array=&amp;gt;17855, :hash=&amp;gt;2087, :struct=&amp;gt;103, :bignum=&amp;gt;0, :file=&amp;gt;0, :data=&amp;gt;37682, :match=&amp;gt;373, :complex=&amp;gt;0, :node=&amp;gt;1688, :iclass=&amp;gt;0})
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Override Reports&lt;/h3&gt;

&lt;p&gt;You can manually override the output by monkey-patching in an initializer (&lt;code&gt;./config/initializers/rails_request_stats.rb&lt;/code&gt;):&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;RailsRequestStats&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Report&lt;/span&gt;
    &lt;span class="c1"&gt;# Called after every request&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;report_text&lt;/span&gt;
      &lt;span class="c1"&gt;# Access to @request_stats (instance of RequestStats)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="c1"&gt;# Called after the application server is closed (via #at_exit_handler)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;exit_report_text&lt;/span&gt;
      &lt;span class="c1"&gt;# Access to @request_stats (instance of RequestStats)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NotificationSubscribers&lt;/span&gt;
    &lt;span class="c1"&gt;# Called when the application server is closed&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;at_exit_handler&lt;/span&gt;
      &lt;span class="c1"&gt;# Access to @requests (hash of { &amp;lt;paths&amp;gt; =&amp;gt; RequestStats })&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Reflections&lt;/h2&gt;

&lt;p&gt;I have personally been using &lt;code&gt;RailsRequestStats&lt;/code&gt; at work since its inception. Reception has been quite good, it has little impact and simply provides extra information at a glance to developers during day-to-day work. I will mention that &lt;a href="https://github.com/MiniProfiler/rack-mini-profiler"&gt;rack-mini-profiler&lt;/a&gt; is an excellent gem, and kind of inspired my creation of this gem. I couldn&amp;rsquo;t find a good way to get the information I wanted when dealing with API endpoints, with &lt;code&gt;RailsRequestStats&lt;/code&gt; I was able to simply output it in the logs.&lt;/p&gt;

&lt;p&gt;In the future I might add more &lt;a href="https://github.com/kevinjalbert/rails_request_stats/issues/4"&gt;detailed memory reports&lt;/a&gt;. I also have to verify that it continues to work in Rails 5 where the default webserver is &lt;a href="http://puma.io/"&gt;Puma&lt;/a&gt; which is a concurrent webserver. This could pose issue as information is stored in class instance variable and are modified at various parts of a requests life cycle.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Deploying my Website to GitHub Pages</title>
    <link rel="alternate" href="http://kevinjalbert.com/deploying-my-website-to-github-pages/"/>
    <id>http://kevinjalbert.com/deploying-my-website-to-github-pages/</id>
    <updated>2017-01-08T14:19:32-05:00</updated>
    <published>2016-11-27T19:00:00-05:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">A little history on my website, and the underlying framework I have used -- Middleman. I walkthrough the process on how I deploy the website to GitHub pages using a deployment script.
</description>
    <content type="html">&lt;h2&gt;History of my Website&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s look back at my website back in early &lt;a href="https://web.archive.org/web/20120122125850/http://kevinjalbert.com/"&gt;2012&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It was built using &lt;a href="http://nanoc.ws/"&gt;nanoc&lt;/a&gt; as I was learning and enjoying using ruby. This static site generator seemed like a great tool when I started. It gave me a lot of control as I was able to write &lt;a href="https://github.com/kevinjalbert/website/blob/master/lib/helpers/custom_helper.rb"&gt;custom ruby helpers&lt;/a&gt; to assist in generating the website.&lt;/li&gt;
&lt;li&gt;It was focused on showcasing my academic accomplishments such as publications/posters/presentations and projects as I was still in the education system and going down the academia career track.&lt;/li&gt;
&lt;li&gt;The original &lt;a href="https://github.com/kevinjalbert/website"&gt;GitHub repository&lt;/a&gt; for this version of the website still exists, if you were interested in looking at it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After finishing my M.Sc degree I decided to work in industry instead of pursuing a Ph.D. I continued to update the website with minor changes, but for the most part it stagnated over time.&lt;/p&gt;

&lt;h2&gt;Deciding on Middleman&lt;/h2&gt;

&lt;p&gt;I eventually wanted to revamp my website to be more &lt;em&gt;relevant&lt;/em&gt; and decided going with a blog to document my technical endeavors and musings. I retired the old website and built up the new blog from scratch. I look through the &lt;a href="https://www.ruby-toolbox.com/categories/static_website_generation"&gt;Ruby Toolbox&lt;/a&gt; to see the alternatives to nanoc. Top pick seems to be &lt;a href="https://github.com/jekyll/jekyll"&gt;Jekyll&lt;/a&gt;, which is likely contributed to its painless integration with &lt;a href="https://help.github.com/articles/using-jekyll-as-a-static-site-generator-with-github-pages/"&gt;GitHub Pages&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My two main concerns with Jekyll were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The use of &lt;a href="https://jekyllrb.com/docs/templates/"&gt;Liquid Templating&lt;/a&gt; - I was personally not a fan of it.&lt;/li&gt;
&lt;li&gt;To benefit from the tight integration with GitHub, you are restricted to certain &lt;a href="https://pages.github.com/versions/"&gt;Jekyll plugin gems&lt;/a&gt; and no custom plugins.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The second contender is &lt;a href="https://middlemanapp.com/"&gt;Middleman&lt;/a&gt;. Its offering was very similar to nanoc. I decided to give Middleman a spin as it was new and different from nanoc. For hosting I could figure it out later, although I was still leaning towards a manual usage of GitHub Pages as it was a free hosting solution.&lt;/p&gt;

&lt;h2&gt;Deployment Approach&lt;/h2&gt;

&lt;p&gt;With the initial work on the new blog being completed, it was time to handle the deployment of it. As previously mentioned I was still going to use GitHub pages due to its free offering. All the work can be seen in the &lt;a href="https://github.com/kevinjalbert/kevinjalbert.github.io"&gt;kevinjalbert/kevinjalbert.github.io repository&lt;/a&gt;. A few things to note:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;User GitHub Pages at the time was only deployable from the &lt;code&gt;master&lt;/code&gt; branch of the github repository.&lt;/li&gt;
&lt;li&gt;If the website used Jekyll then GitHub would automatically generate the static site and deploy it appropriately.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To accommodate this I decided to treat &lt;code&gt;master&lt;/code&gt; as the holding ground for the generated Middleman output. With respect to where to place the actual Middleman code, I placed everything in a new branch &lt;code&gt;real-master&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After a quick setup on GitHub, anything in the &lt;code&gt;master&lt;/code&gt; branch would be deployed to the public.&lt;/p&gt;

&lt;p&gt;&lt;img alt="GitHub Configuration" width="1940" height="740" src="/images/2016-11-28-deploying-my-website-to-github-pages/github-configuration.png" /&gt;&lt;/p&gt;

&lt;p&gt;To reduce friction in deploying new changes, I created the following &lt;a href="https://github.com/kevinjalbert/kevinjalbert.github.io/blob/424c42a5bd65cefb083a01e49f94cbc2e3a73e82/deploy.rb"&gt;ruby deploy script&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'tmpdir'&lt;/span&gt;

&lt;span class="sb"&gt;`git checkout real-master`&lt;/span&gt;

&lt;span class="n"&gt;current_sha&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sb"&gt;`git rev-parse --short HEAD`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;strip&lt;/span&gt;

&lt;span class="sb"&gt;`rm -R -f ./bower_components`&lt;/span&gt;
&lt;span class="sb"&gt;`rm -R -f ./build`&lt;/span&gt;

&lt;span class="sb"&gt;`git add -f -A`&lt;/span&gt;

&lt;span class="sb"&gt;`git commit -m "Temp commit"`&lt;/span&gt;

&lt;span class="sb"&gt;`bundle install`&lt;/span&gt;
&lt;span class="sb"&gt;`bower install`&lt;/span&gt;

&lt;span class="sb"&gt;`bundle exec middleman build`&lt;/span&gt;

&lt;span class="no"&gt;Dir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;mktmpdir&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;tmp_dir&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="sb"&gt;`mv ./build/* &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;tmp_dir&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;/`&lt;/span&gt;

  &lt;span class="sb"&gt;`git checkout master`&lt;/span&gt;

  &lt;span class="sb"&gt;`cp CNAME &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;tmp_dir&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;/`&lt;/span&gt;
  &lt;span class="sb"&gt;`cp README.md &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;tmp_dir&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;

  &lt;span class="sb"&gt;`rm -R -f *`&lt;/span&gt;

  &lt;span class="sb"&gt;`cp -r &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;tmp_dir&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;/* ./`&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="sb"&gt;`git add -f -A`&lt;/span&gt;
&lt;span class="sb"&gt;`git commit -m "Update site @ &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt; with &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;current_sha&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;"`&lt;/span&gt;
&lt;span class="sb"&gt;`git push`&lt;/span&gt;

&lt;span class="sb"&gt;`git checkout real-master`&lt;/span&gt;
&lt;span class="sb"&gt;`git clean -df`&lt;/span&gt;

&lt;span class="sb"&gt;`git reset --soft HEAD~1`&lt;/span&gt;
&lt;span class="sb"&gt;`git reset`&lt;/span&gt;

&lt;span class="sb"&gt;`bower install`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, when everything is committed on &lt;code&gt;real-master&lt;/code&gt; and I&amp;rsquo;m ready to deploy I just run &lt;code&gt;ruby deploy.rb&lt;/code&gt;. The following is then carried out:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Ensure that I&amp;rsquo;m on the &lt;code&gt;real-master&lt;/code&gt; git branch&lt;/li&gt;
&lt;li&gt;Remove all the generated directories&lt;/li&gt;
&lt;li&gt;Add everything to a temporary commit&lt;/li&gt;
&lt;li&gt;Install all dependencies needed and build the Middleman website&lt;/li&gt;
&lt;li&gt;Create a temporary directory and put the built website in it along with the &lt;em&gt;CNAME and README.md&lt;/em&gt; files&lt;/li&gt;
&lt;li&gt;Clear the current directory and put everything from the temporary directory (i.e., the build website) into the current directory&lt;/li&gt;
&lt;li&gt;Add everything to git and make a new commit with the current timestamp and git SHA that was used to generate the website&lt;/li&gt;
&lt;li&gt;Push new website changes to &lt;code&gt;master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Checkout &lt;code&gt;real-master&lt;/code&gt; again, clean everything, and reset that temporary commit&lt;/li&gt;
&lt;li&gt;Reinstall dependencies so we are back in a good state&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This results in a &lt;a href="https://github.com/kevinjalbert/kevinjalbert.github.io/commits/master"&gt;formatted commit log&lt;/a&gt; on &lt;code&gt;master&lt;/code&gt; that has snapshots of each deployment of the website.&lt;/p&gt;

&lt;h2&gt;That&amp;rsquo;s All Folks&lt;/h2&gt;

&lt;p&gt;This approach is working well for me at the current moment. I&amp;rsquo;ll probably keep using Middleman for the foreseeable future. I am sure I will go through another phase of redesigning this process, in which I will document yet again.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Sidekiq: Contained Callbacks</title>
    <link rel="alternate" href="http://kevinjalbert.com/sidekiq-contained-callbacks/"/>
    <id>http://kevinjalbert.com/sidekiq-contained-callbacks/</id>
    <updated>2017-01-08T14:19:32-05:00</updated>
    <published>2016-10-30T20:00:00-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">ActiveJob in Rails provides nice benifits. The background queueing gem Sidekiq allows for tailored options that you cannot use with ActiveJob. This post looks at a project's  transition from ActiveJob to Sidekiq, and how to fill the missing functionality of ActiveJob Callbacks. By the end, we come up with a way to contain the callback logic to their own modules without modifying the concrete jobs.
</description>
    <content type="html">&lt;h2&gt;ActiveSupport Callbacks&lt;/h2&gt;

&lt;p&gt;In my &lt;a href="/lets-pry-into-ruby-objects/"&gt;last post&lt;/a&gt; I touched on &lt;code&gt;pry&lt;/code&gt; and how it helped me verify that my class had &lt;code&gt;around_perform&lt;/code&gt; ActiveSupport Callbacks attached to it. In this post I will delve further into &lt;em&gt;what&lt;/em&gt; I was trying to accomplish.&lt;/p&gt;

&lt;h2&gt;[ActiveJob, Sidekiq] - [ActiveJob]&lt;/h2&gt;

&lt;p&gt;I was working on a Rails 4.2.x project that had background job processing. We used &lt;a href="https://github.com/rails/rails/tree/4-2-stable/activejob"&gt;ActiveJob&lt;/a&gt; as our adapter to our background jobs. Behind the scenes, we were using the &lt;a href="http://sidekiq.org/"&gt;Sidekiq&lt;/a&gt; gem.&lt;/p&gt;

&lt;p&gt;We eventually needed specifics that only native Sidekiq can provide through its &lt;code&gt;sidekiq_options&lt;/code&gt;. These options that Sidekiq provides were something that we didn&amp;rsquo;t need initially. As mentioned in the &lt;a href="https://github.com/mperham/sidekiq/wiki/Active-Job#active-job-introductio://github.com/mperham/sidekiq/wiki/Active-Job#active-job-introduction"&gt;Sidekiq Wiki&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that more advanced Sidekiq features (&lt;code&gt;sidekiq_options&lt;/code&gt;) cannot be controlled or configured via ActiveJob, e.g. saving backtraces.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The time has come to take advantage of powerful sidekiq gems and options, thus we have to switch from ActiveJob to native Sidekiq.&lt;/p&gt;

&lt;h1&gt;ActiveJob&amp;rsquo;s Free Perks&lt;/h1&gt;

&lt;p&gt;ActiveJob provided certain features automatically such as using &lt;a href="http://guides.rubyonrails.org/active_job_basics.html#globalid"&gt;GlobalID&lt;/a&gt; and setting up &lt;a href="http://guides.rubyonrails.org/active_job_basics.html#callbacks"&gt;Callbacks&lt;/a&gt;, amongst others. With a native Sidekiq approach we lose those &lt;em&gt;free&lt;/em&gt; perks.&lt;/p&gt;

&lt;p&gt;The biggest thing we missed was the callbacks, specifically &lt;code&gt;around_perform&lt;/code&gt;. We had several modules that were mixed in to our job classes, with the single responsibility of augmenting the class with callbacks.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;JobMetrics&lt;/span&gt;
  &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;ActiveSupport&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Concern&lt;/span&gt;

  &lt;span class="n"&gt;included&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;around_perform&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;_job&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="no"&gt;MetricsLogger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;timing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metrics_logger_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;metrics_logger_key&lt;/span&gt;
      &lt;span class="vi"&gt;@metrics_logger_key&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="n"&gt;signature&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;underscore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This module is wrapping the actual job&amp;rsquo;s &lt;code&gt;#perform&lt;/code&gt; in a &lt;code&gt;MetricsLogger.timing&lt;/code&gt;. In a future post, I might go into further details about &lt;code&gt;MetricsLogger&lt;/code&gt;, but at its core it records a key/value and sends it off to a log aggregator. The benifit we get from this module is the ability to know timing metrics for jobs based on an identifying signature.&lt;/p&gt;

&lt;p&gt;Moving away from ActiveJob, we need another way to accomplish the same thing (&lt;em&gt;contained callbacks&lt;/em&gt;) with just Sidekiq.&lt;/p&gt;

&lt;h2&gt;Contained Callbacks&lt;/h2&gt;

&lt;p&gt;The goal is to have contained callbacks, which is just a seperate module that can be included on jobs that deifne the required callback. This approach means that little has to change while removing ActiveJob, and we can reuse all our existing contained callbacks.&lt;/p&gt;

&lt;h3&gt;Prepend a Proxy&lt;/h3&gt;

&lt;p&gt;I found out that to make use of &lt;code&gt;ActiveSupport::Callbacks&lt;/code&gt; you have to modify the executed method, which in our case would be the job&amp;rsquo;s &lt;code&gt;#perform&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
  &lt;span class="nf"&gt;def&lt;/span&gt; &lt;span class="n"&gt;perform&lt;/span&gt;
    &lt;span class="n"&gt;run_callbacks&lt;/span&gt; &lt;span class="ss"&gt;:perform&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="c1"&gt;# Actual perform's content here&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I didn&amp;rsquo;t want to modify the &lt;code&gt;#perform&lt;/code&gt; method definitions for all the jobs. So I came up with the solution of using &lt;code&gt;prepend&lt;/code&gt; to slot a proxy in front of the jobs&amp;rsquo; &lt;code&gt;#perform&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;SidekiqCallbacks&lt;/span&gt;
  &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;ActiveSupport&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Concern&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;run_callbacks&lt;/span&gt; &lt;span class="ss"&gt;:perform&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This module then can be prepended into the Sidekiq job classes and the callbacks will be executed &amp;ndash; if they are present. The next task is to support the &lt;code&gt;around_perform&lt;/code&gt; callback.&lt;/p&gt;

&lt;h3&gt;Support Setting and Running Callbacks&lt;/h3&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"active_support/callbacks"&lt;/span&gt;

&lt;span class="c1"&gt;# Following approach used by ActiveJob&lt;/span&gt;
&lt;span class="c1"&gt;# https://github.com/rails/rails/blob/93c9534c9871d4adad4bc33b5edc355672b59c61/activejob/lib/active_job/callbacks.rb&lt;/span&gt;
&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;SidekiqCallbacks&lt;/span&gt;
  &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;ActiveSupport&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Concern&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;respond_to?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:run_callbacks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;run_callbacks&lt;/span&gt; &lt;span class="ss"&gt;:perform&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;ClassMethods&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;around_perform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;blk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;set_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:perform&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:around&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;blk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now &lt;code&gt;SidekiqCallbacks&lt;/code&gt; defines the ability to add callbacks, and they will be executed before &lt;code&gt;#perform&lt;/code&gt; if defined.&lt;/p&gt;

&lt;h3&gt;Wrapping it up&lt;/h3&gt;

&lt;p&gt;The last thing I want to do is to encapsulate this Sidekiq callback logic in its own module that defines the actual callback (i.e., &lt;code&gt;JobMetrics&lt;/code&gt;). To do this, we need to further modify &lt;code&gt;SidekiqCallbacks&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"active_support/callbacks"&lt;/span&gt;

&lt;span class="c1"&gt;# Following approach used by ActiveJob&lt;/span&gt;
&lt;span class="c1"&gt;# https://github.com/rails/rails/blob/93c9534c9871d4adad4bc33b5edc355672b59c61/activejob/lib/active_job/callbacks.rb&lt;/span&gt;
&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;SidekiqCallbacks&lt;/span&gt;
  &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;ActiveSupport&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Concern&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;prepended&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ActiveSupport&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Callbacks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Check to see if we already have any callbacks for :perform&lt;/span&gt;
    &lt;span class="c1"&gt;# Prevents overwritting callbacks if we already included this module (and defined callbacks)&lt;/span&gt;
    &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;define_callbacks&lt;/span&gt; &lt;span class="ss"&gt;:perform&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;respond_to?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:_perform_callbacks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;_perform_callbacks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;present?&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;
      &lt;span class="n"&gt;prepend&lt;/span&gt; &lt;span class="no"&gt;ClassMethods&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;respond_to?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:run_callbacks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;run_callbacks&lt;/span&gt; &lt;span class="ss"&gt;:perform&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;ClassMethods&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;after_perform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;blk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;set_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:perform&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:after&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;blk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We had to include the &lt;code&gt;self.prepended&lt;/code&gt; so that the job class will have access to the defined methods through the contained callback module. The main thing to note here is that we are including &lt;code&gt;ActiveSupport::Callbacks&lt;/code&gt; on the base object that is prepending this module. We also have to ensure that the callbacks are only defined once (this is where in my &lt;a href="/lets-pry-into-ruby-objects/"&gt;last post&lt;/a&gt; I was using &lt;code&gt;pry&lt;/code&gt; figure why not all my callbacks were defined).&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;JobMetrics&lt;/span&gt;
  &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;ActiveSupport&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Concern&lt;/span&gt;

  &lt;span class="n"&gt;included&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;prepend&lt;/span&gt; &lt;span class="no"&gt;SidekiqCallbacks&lt;/span&gt;

    &lt;span class="n"&gt;around_perform&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;_job&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="no"&gt;MetricsLogger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;timing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metrics_logger_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;metrics_logger_key&lt;/span&gt;
      &lt;span class="vi"&gt;@metrics_logger_key&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="n"&gt;signature&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;underscore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we can see how &lt;code&gt;JobMetrics&lt;/code&gt; has a new &lt;code&gt;prepend SidekiqCallbacks&lt;/code&gt; and that pulls in all the required &lt;code&gt;ActiveSupport::Callback&lt;/code&gt; logic that allows for callbacks to be defined and executed.&lt;/p&gt;

&lt;h3&gt;The Win&lt;/h3&gt;

&lt;p&gt;With this approach, the benifit is that the callback implementation is completely contained within the &lt;code&gt;JobMetrics&lt;/code&gt; module. The &lt;code&gt;SidekiqCallbacks&lt;/code&gt; module provides the missing ActiveJob callback support for &lt;code&gt;around_perform&lt;/code&gt;. It is also possible to add the missing ActiveJob callbacks using this approach.&lt;/p&gt;

&lt;p&gt;In the ending, the concrete job classes just &lt;code&gt;include&lt;/code&gt; the contained callback module (i.e., &lt;code&gt;JobMetrics&lt;/code&gt;). &lt;code&gt;SidekiqCallbacks&lt;/code&gt; is designed to accomodate multiple contained callback modules being included on a single concrete job class.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Let's `pry` into Ruby Objects</title>
    <link rel="alternate" href="http://kevinjalbert.com/lets-pry-into-ruby-objects/"/>
    <id>http://kevinjalbert.com/lets-pry-into-ruby-objects/</id>
    <updated>2017-01-08T14:19:32-05:00</updated>
    <published>2016-09-29T20:00:00-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">When you are knee deep in Ruby and dealing with objects that you never created it's sometimes a little daunting to trace everything back and figure it all out. Luckly there are a couple techniques in Ruby that can aid you. In particular, `pry` is an extreamly powerful tool that you should have in your toolbox.
</description>
    <content type="html">&lt;h2&gt;Where is my &lt;code&gt;pry&lt;/code&gt;bar?&lt;/h2&gt;

&lt;p&gt;You are probably already familiar with &lt;code&gt;irb&lt;/code&gt;, an &lt;em&gt;interactive Ruby&lt;/em&gt; shell. It is pretty powerful and can help you poke around Ruby. In Rails, you might have had access to &lt;code&gt;byebug&lt;/code&gt; and used it for debugging purposes. This is great and is standard with Rails projects. I do, however, recommend looking at &lt;code&gt;pry&lt;/code&gt;, which is just a bit more powerful in what it can do. We&amp;rsquo;re just going to scratch the surface here.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;gem install pry
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;pry&lt;/code&gt; &lt;a href="https://github.com/pry/pry/wiki"&gt;wiki&lt;/a&gt; is quite detailed with a lot of accompanying resources.&lt;/p&gt;

&lt;h2&gt;Adventure Time! Using &lt;code&gt;pry&lt;/code&gt; to Open Objects&lt;/h2&gt;

&lt;p&gt;We&amp;rsquo;ll use a shortened example that I recently encountered. I was pretty deep in Rails and was dealing with &lt;code&gt;ActiveSupport::Callbacks::CallbackChain&lt;/code&gt; (lets not ask why ;P). I wanted to verify if we have any &lt;code&gt;around_perform&lt;/code&gt; &lt;em&gt;callbacks&lt;/em&gt; set on a particular class. With my trusty &lt;code&gt;pry&lt;/code&gt;, I can inspect what I&amp;rsquo;m working with in more detail.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pry(main)&amp;gt; RandomClass_perform_callbacks
=&amp;gt; #&amp;lt;ActiveSupport::Callbacks::CallbackChain:0x007fdcdddb5b20 @callbacks=nil, @chain=[], @config={:scope=&amp;gt;[:kind]}, @mutex=#&amp;lt;Thread::Mutex:0x007fdcdddb53c8&amp;gt;, @name=:perform&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point we have &lt;code&gt;ActiveSupport::Callbacks&lt;/code&gt; included in our &lt;code&gt;RandomClass&lt;/code&gt;. We also have an empty callback chain.&lt;/p&gt;

&lt;p&gt;I eventually included in a module &lt;code&gt;MagicCallbacks&lt;/code&gt; which defines our &lt;code&gt;around_perform&lt;/code&gt; upon being included. If we were to re-inspect the class, we would see that we have a callback present.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pry(main)&amp;gt; RandomClass.include(MagicCallbacks)
=&amp;gt; RandomClass

pry(main)&amp;gt; RandomClass._perform_callbacks
=&amp;gt; #&amp;lt;ActiveSupport::Callbacks::CallbackChain:0x007fdce2a22b70
 @callbacks=nil,
 @chain=
  [#&amp;lt;ActiveSupport::Callbacks::Callback:0x007fdce2a22cd8
    @chain_config={:scope=&amp;gt;[:kind]},
    @filter=#&amp;lt;Proc:0x007fdce2a22eb8@/Users/jalbert/Projects/example-rails/app/models/concerns/magic_callbacks.rb:7&amp;gt;,
    @if=[],
    @key=70293335906140,
    @kind=:around,
    @name=:perform,
    @unless=[]&amp;gt;],
 @config={:scope=&amp;gt;[:kind]},
 @mutex=#&amp;lt;Thread::Mutex:0x007fdce2a22b20&amp;gt;,
 @name=:perform&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can now see that we have a callback within the &lt;code&gt;@chain&lt;/code&gt; array! Back to the problem at hand, I was interested in programmatically determining if the class had any callbacks defined.&lt;/p&gt;

&lt;p&gt;As I was working with an unfamiliar object, I reached for my trusty &lt;code&gt;pry&lt;/code&gt;. I can use &lt;code&gt;ls&lt;/code&gt; on &lt;em&gt;any&lt;/em&gt; object and see a listing of methods and where they come from.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pry(main)&amp;gt; ls RandomClass._perform_callbacks
Enumerable#methods:
  all?     chunk        collect_concat  detect      each_cons   each_with_index   exclude?  find_index  grep      include?  lazy   max      min     minmax_by  partition  reverse_each  slice_before  sort_by  take_while  to_json                                 to_set
  any?     chunk_while  count           drop        each_entry  each_with_object  find      first       grep_v    index_by  many?  max_by   min_by  none?      reduce     select        slice_when    sum      to_a        to_json_with_active_support_encoder     zip
  as_json  collect      cycle           drop_while  each_slice  entries           find_all  flat_map    group_by  inject    map    member?  minmax  one?       reject     slice_after   sort          take     to_h        to_json_without_active_support_encoder
ActiveSupport::Callbacks::CallbackChain#methods: append  clear  compile  config  delete  each  empty?  index  insert  name  prepend
instance variables: @callbacks  @chain  @config  @mutex  @name
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is a lot of information here, but the key points to take away are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Classes/Module/Variables headers are shown in the order of &lt;code&gt;#ancestors&lt;/code&gt;.

&lt;ul&gt;
&lt;li&gt;Sent messages travel up from the bottom to the top until something can &lt;code&gt;#respond_to?&lt;/code&gt; it&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Method and variable names are listed under their owner.

&lt;ul&gt;
&lt;li&gt;This can quickly help you identify methods of interest.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;If a method is redefined in a lower level, it is only shown on the lowest level.

&lt;ul&gt;
&lt;li&gt;For example, a parent class and child class define same method.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also modify the &lt;code&gt;ls&lt;/code&gt; commnd with modifiers which you can learn more with &lt;code&gt;ls -h&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So we can see here that we have an &lt;code&gt;#empty?&lt;/code&gt; defined under &lt;code&gt;ActiveSupport::Callbacks::CallbackChain#methods&lt;/code&gt;. This sounds great, and my first thoughts is I can use &lt;code&gt;#empty?&lt;/code&gt;. My only concern is what it&amp;rsquo;s &lt;em&gt;actually&lt;/em&gt; checking. Again, &lt;code&gt;pry&lt;/code&gt; to the rescue with &lt;code&gt;show-source&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pry(main)&amp;gt; show-source ActiveSupport::Callbacks::CallbackChain#empty?

From: /Users/jalbert/.rvm/gems/ruby-2.3.0/gems/activesupport-4.2.7.1/lib/active_support/callbacks.rb @ line 529:
Owner: ActiveSupport::Callbacks::CallbackChain
Visibility: public
Number of lines: 1

def empty?;       @chain.empty?; end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we can see the implementation of &lt;code&gt;#empty?&lt;/code&gt; is a one-liner, where it&amp;rsquo;s just calling &lt;code&gt;@chain.empty?&lt;/code&gt;. Sounds legit, but let&amp;rsquo;s go further to verify this.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pry(main)&amp;gt; show-source ActiveSupport::Callbacks::CallbackChain

From: /Users/jalbert/.rvm/gems/ruby-2.3.0/gems/activesupport-4.2.7.1/lib/active_support/callbacks.rb @ line 512:
Class name: ActiveSupport::Callbacks::CallbackChain
Number of lines: 80

class CallbackChain #:nodoc:#
  include Enumerable

  attr_reader :name, :config

  def initialize(name, config)
    @name = name
    @config = {
      :scope =&amp;gt; [ :kind ]
    }.merge!(config)
    @chain = []
    @callbacks = nil
    @mutex = Mutex.new
  end
  ...
  def append(*callbacks)
    callbacks.each { |c| append_one(c) }
  end
  ...
  def append_one(callback)
    @callbacks = nil
    remove_duplicates(callback)
    @chain.push(callback)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yep! Just what I wanted to see. &lt;code&gt;@chain&lt;/code&gt; is just an array to which all the callbacks are appended. So now we can do our check for any callbacks on our class by using &lt;code&gt;!RandomClass._perform_callbacks.empty?&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pry(main)&amp;gt; RandomClass._perform_callbacks.empty?
=&amp;gt; false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A colleague of mine suggested the use of &lt;code&gt;#present?&lt;/code&gt; instead a negative conditional with &lt;code&gt;#empty?&lt;/code&gt;. This is a fair point &amp;ndash; I personally like to avoid negatives in my conditionals. Again, I want to verify it all works as expected with this change.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pry(main)&amp;gt; show-source ActiveSupport::Callbacks::CallbackChain#present?

From: /Users/jalbert/.rvm/gems/ruby-2.3.0/gems/activesupport-4.2.7.1/lib/active_support/core_ext/object/blank.rb @ line 23:
Owner: Object
Visibility: public
Number of lines: 3

def present?
  !blank?
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I can see that &lt;code&gt;#present?&lt;/code&gt; calls &lt;code&gt;!blank?&lt;/code&gt;. Now let&amp;rsquo;s now follow &lt;code&gt;#blank?&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pry(main)&amp;gt; show-source ActiveSupport::Callbacks::CallbackChain#blank?

From: /Users/jalbert/.rvm/gems/ruby-2.3.0/gems/activesupport-4.2.7.1/lib/active_support/core_ext/object/blank.rb @ line 16:
Owner: Object
Visibility: public
Number of lines: 3

def blank?
  respond_to?(:empty?) ? !!empty? : !self
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yep! That works like I suspected it would &amp;ndash; that method chain winds up calling &lt;code&gt;ActiveSupport::Callbacks::CallbackChain#empty?&lt;/code&gt; in the ending.&lt;/p&gt;

&lt;h1&gt;Wrapping up&lt;/h1&gt;

&lt;p&gt;So if you are not using &lt;code&gt;pry&lt;/code&gt;, I highly recommend it. I &lt;em&gt;barely&lt;/em&gt; scratched the surface on what it can do for you. It is a powerful tool that can help in debugging and further digging around your codebase.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Git Evolution: How did we get Here?</title>
    <link rel="alternate" href="http://kevinjalbert.com/git-evolution-how-did-we-get-here/"/>
    <id>http://kevinjalbert.com/git-evolution-how-did-we-get-here/</id>
    <updated>2017-01-08T14:19:32-05:00</updated>
    <published>2016-08-30T20:00:00-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">In a large long-lived git repository there is a lot of history behind the current state of things. `git blame` lets you scratch the surface, while `git log` lets you dig deeper. The use of `git evolution` provides a succient and yet comprhensive approach to understanding the evolution of a range of lines within a git repository.
</description>
    <content type="html">&lt;p&gt;As a developer its not uncommon to want a little more context surrounding the code snippet you are dealing with. You might have found yourself in these situations and reached for &lt;code&gt;git blame&lt;/code&gt; to get some initial context in why the code is like it is. This only scratches the surface and you might want a more context which &lt;code&gt;git log&lt;/code&gt; can provide to you. You are mostly interested in how the code evolved to this point, and really want you want is &lt;code&gt;git evolution&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I developed &lt;a href="https://github.com/kevinjalbert/git_evolution"&gt;git_evolution&lt;/a&gt; to solve a personal problem of mine while spelunking in a git repository trying to find more reasons to why the code might have evolved in this way.&lt;/p&gt;

&lt;p&gt;To best describe what and how git evolution can be used the next section (&lt;em&gt;Example Scenario&lt;/em&gt;) comes directly from &lt;code&gt;git_evolution&lt;/code&gt;&amp;rsquo;s &lt;a href="https://github.com/kevinjalbert/git_evolution#example-scenario"&gt;README&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Example Scenario&lt;/h2&gt;

&lt;p&gt;If we were interesting in the source code evolution that lead to &lt;a href="https://github.com/rails/rails/blob/7ba3a48/activesupport/lib/active_support/core_ext/array/access.rb#L70-L75"&gt;rails&amp;rsquo;s Array#forty_two&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git_evolution --range 70:75 ./rails/activesupport/lib/active_support/core_ext/array/access.rb

Commits:
utenmiki &amp;lt;utenmiki@gmail.com&amp;gt; (Thu Oct 31 23:20:15 2013 +0900) - 3f79d8423078f0671c8aa505ae199608d451663d
Add Rdoc document for Array#forty_two

Jeremy Kemper &amp;lt;jeremy@bitsweat.net&amp;gt; (Sat Mar 21 03:26:09 2009 -0700) - 83fd1ae122cf1ee4ea2c52e0bd963462163516ca
Convert array extension modules to class reopens

David Heinemeier Hansson &amp;lt;david@loudthinking.com&amp;gt; (Fri Nov 21 09:06:46 2008 +0100) - e50530ca3ab5db53ebc74314c54b62b91b932389
Reduced the number of literal aliases to the range that has actually seen personal use. With the massive savings in overhead, I was able to fit Array#forty_two

Pratik Naik &amp;lt;pratiknaik@gmail.com&amp;gt; (Sun Oct 5 22:16:26 2008 +0100) - a2932784bb71e72a78c32819ebd7ed2bed551e3e
Merge docrails

Pratik Naik &amp;lt;pratiknaik@gmail.com&amp;gt; (Mon Jul 28 12:26:59 2008 +0100) - 6e754551254a8cc64e034163f5d0dc155b450388
Merge docrails changes

David Heinemeier Hansson &amp;lt;david@loudthinking.com&amp;gt; (Tue Jun 17 13:37:57 2008 -0500) - 22af62cf486721ee2e45bb720c42ac2f4121faf4
Added Array#second through Array#tenth as aliases for Array#[1] through Array#[9] [DHH]

David Heinemeier Hansson &amp;lt;david@loudthinking.com&amp;gt; (Tue Nov 27 19:42:30 2007 +0000) - 4d177ae0d6d9f60c4000f45fb6f6df27317afbff
Added Array#from and Array#to that behaves just from String#from and String#to [DHH]

--------------------------------------------------------------------------------

Ownership (Commits):
David Heinemeier Hansson &amp;lt;david@loudthinking.com&amp;gt; - 3/7 (42.86%)
Pratik Naik &amp;lt;pratiknaik@gmail.com&amp;gt; - 2/7 (28.57%)
Jeremy Kemper &amp;lt;jeremy@bitsweat.net&amp;gt; - 1/7 (14.29%)
utenmiki &amp;lt;utenmiki@gmail.com&amp;gt; - 1/7 (14.29%)

Ownership (Changes):
David Heinemeier Hansson &amp;lt;david@loudthinking.com&amp;gt; - 53/84 (63.1%)
Pratik Naik &amp;lt;pratiknaik@gmail.com&amp;gt; - 20/84 (23.81%)
Jeremy Kemper &amp;lt;jeremy@bitsweat.net&amp;gt; - 9/84 (10.71%)
utenmiki &amp;lt;utenmiki@gmail.com&amp;gt; - 2/84 (2.38%)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;GitEvolution&lt;/code&gt; provides a succinct output of the commits which contains any changes which lead to the current state. Its quick to see that &lt;a href="https://github.com/rails/rails/commit/e50530ca3ab5db53ebc74314c54b62b91b932389"&gt;e50530ca3ab5db53ebc74314c54b62b91b932389&lt;/a&gt; was the introduction point for &lt;code&gt;Array#forty_two&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In addition we have some &lt;em&gt;ownership&lt;/em&gt; information with respect to commits and changes. The ownership information can be used to identify &lt;em&gt;who&lt;/em&gt; to follow up with for additional context. In time new metrics and analysis could be attached to the output (i.e., factoring in time for ownership, types of changes, identifying file modifications such as movement or renames, etc&amp;hellip;)&lt;/p&gt;

&lt;h2&gt;The Other (Hard) Way&lt;/h2&gt;

&lt;p&gt;If we were to identify the commit which introduced &lt;code&gt;Array#forty_two&lt;/code&gt; we have two main options &lt;code&gt;git blame&lt;/code&gt; and &lt;code&gt;git log&lt;/code&gt;:&lt;/p&gt;

&lt;h3&gt;Using &lt;code&gt;git blame&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;I highly advise against this approach as it involves a lot of manual work. You essentially use &lt;code&gt;git blame&lt;/code&gt; to identify the previous commit which effects a line of concern within the area you are looking in.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git blame --follow ./activesupport/lib/active_support/core_ext/array/access.rb

...
83fd1ae1 (Jeremy Kemper            2009-03-21 03:26:09 -0700 70)   # Equal to &amp;lt;tt&amp;gt;self[41]&amp;lt;/tt&amp;gt;. Also known as accessing "the reddit".
3f79d842 (utenmiki                 2013-10-31 23:20:15 +0900 71)   #
3f79d842 (utenmiki                 2013-10-31 23:20:15 +0900 72)   #   (1..42).to_a.forty_two # =&amp;gt; 42
83fd1ae1 (Jeremy Kemper            2009-03-21 03:26:09 -0700 73)   def forty_two
83fd1ae1 (Jeremy Kemper            2009-03-21 03:26:09 -0700 74)     self[41]
4d177ae0 (David Heinemeier Hansson 2007-11-27 19:42:30 +0000 75)   end
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can then use a similar command to blame the parent git revision at that point.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git blame --follow 83fd1ae1^ -- ./activesupport/lib/active_support/core_ext/array/access.rb

...
e50530ca (David Heinemeier Hansson 2008-11-21 09:06:46 +0100 46)         # Equal to &amp;lt;tt&amp;gt;self[41]&amp;lt;/tt&amp;gt;. Also known as accessing "the reddit".
e50530ca (David Heinemeier Hansson 2008-11-21 09:06:46 +0100 47)         def forty_two
e50530ca (David Heinemeier Hansson 2008-11-21 09:06:46 +0100 48)           self[41]
22af62cf (David Heinemeier Hansson 2008-06-17 13:37:57 -0500 49)         end
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All the while you occasionally want to inspect the commit in more detail using &lt;code&gt;git show &amp;lt;commit-sha&amp;gt;&lt;/code&gt;. Eventually you will end up where you want to be.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git show e50530ca

commit e50530ca3ab5db53ebc74314c54b62b91b932389
Author: David Heinemeier Hansson &amp;lt;david@loudthinking.com&amp;gt;
Date:   Fri Nov 21 09:06:46 2008 +0100

    Reduced the number of literal aliases to the range that has actually seen personal use. With the massive savings in overhead, I was able to fit Array#forty_two
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Using &lt;code&gt;git log&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The following &lt;code&gt;git log&lt;/code&gt; command presents the entire file history (26 commits):&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git log --follow ./activesupport/lib/active_support/core_ext/array/access.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This works, but it is a lot more information to sift through.&lt;/p&gt;

&lt;p&gt;A better approach (which is what &lt;code&gt;GitEvolution&lt;/code&gt; uses under the hood) presents the file history for only the concerned portion (7 commits):&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git log -L70,75:./activesupport/lib/active_support/core_ext/array/access.rb --follow ./activesupport/lib/active_support/core_ext/array/access.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output isn&amp;rsquo;t succinct, nor does it have ownership information. The command is also more verbose.&lt;/p&gt;

&lt;h2&gt;Advance Usage&lt;/h2&gt;

&lt;p&gt;I personally use Vim for all my editing needs, especially while editing code. As most of the projects I&amp;rsquo;m working in are version controlled with Git I made a &lt;a href="https://github.com/kevinjalbert/dotfiles/blob/eaca550/vim/vim/functions.vim#L1-L16"&gt;Vim function&lt;/a&gt; that allows me to visually select and call &lt;code&gt;git_evolution&lt;/code&gt; using &lt;code&gt;ge&lt;/code&gt; on the selected lines. This opens the output in a new buffer which I can then look through and yank commit SHAs if needed.&lt;/p&gt;

&lt;h2&gt;The Future&lt;/h2&gt;

&lt;p&gt;Similar to what I mentioned in my &lt;a href="https://kevinjalbert.com/port-mapping-development-servers/"&gt;last post about &lt;code&gt;port_map&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;git_evolution&lt;/code&gt; is a RubyGem, which is effectively tied to a specific Ruby version. When dealing with multiple Ruby version projects using &lt;a href="https://rvm.io/"&gt;rvm&lt;/a&gt;/&lt;a href="http://rbenv.org/"&gt;rbenv&lt;/a&gt; sometimes &lt;code&gt;git_evolution&lt;/code&gt; is not installed. It is a slight detour to install &lt;code&gt;git_evolution&lt;/code&gt; for the current Ruby version when I switch to a new Ruby version. Ideally &lt;code&gt;git_evolution&lt;/code&gt; would not be tied to Ruby, and instead is a transportable executable (for example one written in Bash or Go).&lt;/p&gt;

&lt;p&gt;I do want to expand on the &lt;em&gt;ownership&lt;/em&gt; aspect of &lt;code&gt;git_evolution&lt;/code&gt; as I think it&amp;rsquo;ll help quicker identify &lt;em&gt;who&lt;/em&gt; could be contacted for additional context. Currently it is simply looking at commits and change totals. Ideally there would be a better algorithm to determine ownership of selected lines.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Port Mapping Development Servers</title>
    <link rel="alternate" href="http://kevinjalbert.com/port-mapping-development-servers/"/>
    <id>http://kevinjalbert.com/port-mapping-development-servers/</id>
    <updated>2017-01-08T14:19:32-05:00</updated>
    <published>2016-07-29T20:00:00-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">As a developer its not uncommon to juggle multiple servers that interact with each other during development. Ensuring that each server has the correct port set while working off of `localhost` is a cumbersome and error prone issue. `port_map` is a ruby utility that provides a simple and almost automatic solution to this problem.
</description>
    <content type="html">&lt;p&gt;As a developer its not uncommon to juggle multiple servers that interact with each other during development. Ensuring that each server has the correct port set while working off of &lt;code&gt;localhost&lt;/code&gt; is a cumbersome and error prone issue. &lt;a href="https://github.com/kevinjalbert/port_map"&gt;port_map&lt;/a&gt; is a ruby utility that provides a simple and almost automatic solution to this problem.&lt;/p&gt;

&lt;p&gt;I developed this utility gem to solve a personal problem of mine while dealing with multiple web servers during development. The next section (&lt;em&gt;Example Scenario&lt;/em&gt;) comes directly from &lt;code&gt;port_map&lt;/code&gt;&amp;rsquo;s &lt;a href="https://github.com/kevinjalbert/port_map#example-scenario"&gt;README&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Example Scenario&lt;/h2&gt;

&lt;p&gt;You are developing a service that uses multiple web servers. You have two rails applications and one ember application.&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Application&lt;/th&gt;
&lt;th&gt;Directory&lt;/th&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Local URL&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Rails API&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/api/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;rails server&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;http://localhost:3000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Rails Background Jobs&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/jobs/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;rails server --port 3001&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;http://localhost:3001&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ember Application&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/ember/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ember server&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;http://localhost:4200&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h3&gt;The Problem&lt;/h3&gt;

&lt;p&gt;In each of these applications there is some configuration work required to ensure that they communicate on the correct ports. There are two issues here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;As we add more web servers we have to avoid clashing on existing ports.&lt;/li&gt;
&lt;li&gt;You have to make sure that you correctly start each server with the right port number.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;&lt;code&gt;port_map&lt;/code&gt; to the Rescue!&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;re going to transform this unwieldy scenario into an organized and easy to manage one using &lt;code&gt;port_map&lt;/code&gt;.&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Application&lt;/th&gt;
&lt;th&gt;Directory&lt;/th&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Local URL&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Rails API&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/api/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;port_map rails server&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;http://api.dev&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Rails Background Jobs&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/jobs/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;port_map rails server&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;http://jobs.dev&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ember Application&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/ember/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;port_map ember server&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;http://ember.dev&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;The domain names can be configured with environment variables, but by default they are based on the directory&amp;rsquo;s name.&lt;/p&gt;

&lt;p&gt;You can close and restart each web server multiple times and they will continue to use the same domain names. &lt;code&gt;port_map&lt;/code&gt; provides an easy way to logically name each web server, as well as remove the need of specifying ports.&lt;/p&gt;

&lt;h2&gt;Putting it to the Test&lt;/h2&gt;

&lt;p&gt;I have been using &lt;code&gt;port_map&lt;/code&gt; for a little over 6 months (as of writing this), and it has served me quite well. The beauty of &lt;code&gt;port_map&lt;/code&gt; is that it works on any shell command that accepts a &lt;code&gt;--port &amp;lt;number&amp;gt;&lt;/code&gt; or &lt;code&gt;-p &amp;lt;number&amp;gt;&lt;/code&gt; flag. I enjoy finding new uses for &lt;code&gt;port_map&lt;/code&gt; in other web servers like &lt;a href="https://middlemanapp.com"&gt;middleman&lt;/a&gt; and &lt;a href="https://jekyllrb.com"&gt;jekyll&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There was one issue that I have hit, although its not a deal breaker &lt;a href="https://github.com/kevinjalbert/port_map/issues/7"&gt;kevinjalbert/port_map#7&lt;/a&gt;, although I suspect I can fix this eventually.&lt;/p&gt;

&lt;p&gt;As &lt;code&gt;port_map&lt;/code&gt; is a wrapper around the command there are interesting issues that can arise. I use &lt;a href="http://www.zsh.org/"&gt;Zsh&lt;/a&gt; as my shell along with a bunch of aliases it was necessary for &lt;code&gt;port_map&lt;/code&gt; to support running commands that contain aliases. I recently moved to &lt;a href="https://zplug.sh/"&gt;zplug&lt;/a&gt; as my Zsh plugin framework, where I encountered the following issue &lt;a href="https://github.com/zplug/zplug/issues/209"&gt;zplug/zplug#209&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One last inconvenience is that &lt;code&gt;port_map&lt;/code&gt; is a RubyGem, which is effectively tied to a specific Ruby version. When dealing with multiple Ruby version projects using &lt;a href="https://rvm.io/"&gt;rvm&lt;/a&gt;/&lt;a href="http://rbenv.org/"&gt;rbenv&lt;/a&gt; sometimes &lt;code&gt;port_map&lt;/code&gt; is not installed. It is a slight detour to install &lt;code&gt;port_map&lt;/code&gt; for the current Ruby version when I switch to a new Ruby version. Ideally &lt;code&gt;port_map&lt;/code&gt; would not be tied to Ruby, and instead is a transportable executable (for example one written in Bash or Go).&lt;/p&gt;

&lt;h2&gt;The Future&lt;/h2&gt;

&lt;p&gt;I will continue to use &lt;code&gt;port_map&lt;/code&gt; until I can spend some time to dig deeper into &lt;a href="https://www.vagrantup.com/"&gt;Vagrant&lt;/a&gt; and &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt;. These two technologies isolate and containerize environments (web services). I can see the benefits in such technologies as they are not dependant on the host environment, which in my case is my laptop.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>More Shell History</title>
    <link rel="alternate" href="http://kevinjalbert.com/more-shell-history/"/>
    <id>http://kevinjalbert.com/more-shell-history/</id>
    <updated>2017-01-08T14:19:32-05:00</updated>
    <published>2016-06-29T20:00:00-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">Developers who use the terminal on a daily basis have a wealth of knowledge stored in their shell's history. It is not uncommon to need a lengthy command you used a while back. Thankfully shells provide a built in history and the functionality to _reverse search_ through it via `ctrl-r`.
</description>
    <content type="html">&lt;p&gt;Developers who use the terminal on a daily basis have a wealth of knowledge stored in their shell&amp;rsquo;s history. It is not uncommon to need a lengthy command you used a while back. Thankfully shells provide a built in history and the functionality to &lt;em&gt;reverse search&lt;/em&gt; through it via &lt;code&gt;ctrl-r&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;Increasing History&lt;/h1&gt;

&lt;p&gt;First thing regardless of what shell try these commands and make note of their values:&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$HISTSIZE&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$SAVEHIST&lt;/span&gt; &lt;span class="c"&gt;# or $HISTFILESIZE for bash&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$HISTFILE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Across both zsh and bash these three environment variables determine the location and size of your shell history (&lt;a href="http://zsh.sourceforge.net/Guide/zshguide02.html#l17"&gt;zsh guide on setting history up&lt;/a&gt;):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HISTSIZE&lt;/code&gt; indicates how many commands from your history file are loaded into the shell&amp;rsquo;s memory&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SAVEHIST&lt;/code&gt;/&lt;code&gt;HISTFILESIZE&lt;/code&gt; indicates how many commands your history file can hold (you want this equal or larger than &lt;code&gt;HISTSIZE&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HISTFILE&lt;/code&gt; indicates the history file itself which houses your previous commands&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Its possible you might have already set some configurations related to the shell&amp;rsquo;s history, or maybe a plugin has set it for you like &lt;a href="https://github.com/robbyrussell/oh-my-zsh/blob/master/lib/history.zsh#L2-L7"&gt;oh-my-zsh&lt;/a&gt;. You should be aware of your history file and its size at the very least. This would also be a great opportunity to change it if you have not yet.&lt;/p&gt;

&lt;p&gt;In the default zsh configuration only &lt;code&gt;HISTSIZE&lt;/code&gt; is set, and it is tiny at only 30. No history file it set, which means no history is persisted. Default bash configuration has defaults history file and sizes of 500. Both of these are both small with respect to the amount of commands one might use.&lt;/p&gt;

&lt;p&gt;Recall that the effective reverse search (&lt;code&gt;ctrl-r&lt;/code&gt;) is based off of what is in your history. You don&amp;rsquo;t really want to lose anything right? So set something high!&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# In your ~/.bashrc&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;HISTSIZE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;100000
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;HISTFILESIZE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;100000

&lt;span class="c"&gt;# In your ~/.zshrc&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;HISTSIZE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;100000
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;HISTFILESIZE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;100000
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;HISTFILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/.zhistory &lt;span class="c"&gt;# Don't forget to to set this also&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From what I&amp;rsquo;ve witnessed the major downside to a large history is pretty negligible. When the shell starts it&amp;rsquo;ll read in your history file and store an amount defined by &lt;code&gt;$HISTSIZE&lt;/code&gt; in memory. More history simply means slower shell startup, although it is not that significant. In addition there might be some shell plugins which reach into your history, these can also cause slow downs (i.e., &lt;a href="https://github.com/zsh-users/zsh-history-substring-search"&gt;zsh-history-substring-search&lt;/a&gt; significantly slows down with a large history).&lt;/p&gt;

&lt;h1&gt;Cleaning History&lt;/h1&gt;

&lt;p&gt;Now we have a larger history, which by itself is a huge win. Now we want a &lt;em&gt;cleaner&lt;/em&gt; history if possible. The main benefit of a cleaner history is that stepping through your history with UP and DOWN keys will not show duplicates.&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# In your ~/.bashrc&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;HISTCONTROL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ignoredups

&lt;span class="c"&gt;# In your ~/.zshrc&lt;/span&gt;
setopt HIST_FIND_NO_DUPS
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you wanted you could go even further and actually prevent duplicates from being saved in your history file with the following:&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# In your ~/.bashrc&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;HISTCONTROL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;erasedups

&lt;span class="c"&gt;# In your ~/.zshrc&lt;/span&gt;
setopt HIST_IGNORE_ALL_DUPS
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;Sharing History&lt;/h1&gt;

&lt;p&gt;If you end up using multiple shells at a time (i.e., opening multiple zsh or bash), you might want to &lt;em&gt;share history&lt;/em&gt; between them. By default the history files are written when the shell closes. With the following you can allow the shells to write and read from the history file after each command:&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# In your ~/.bashrc&lt;/span&gt;
&lt;span class="nb"&gt;shopt&lt;/span&gt; -s histappend
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PROMPT_COMMAND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"history -a; history -c; history -r; &lt;/span&gt;&lt;span class="nv"&gt;$PROMPT_COMMAND&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="c"&gt;# In your ~/.zshrc&lt;/span&gt;
setopt inc_append_history
setopt share_history
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;Putting it Together &amp;ndash; TL;DR&lt;/h1&gt;

&lt;p&gt;If you want more history use the following:&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# In your ~/.bashrc&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;HISTSIZE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;100000
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;HISTFILESIZE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;100000

&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;HISTCONTROL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ignoredups

&lt;span class="nb"&gt;shopt&lt;/span&gt; -s histappend
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PROMPT_COMMAND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"history -a; history -c; history -r; &lt;/span&gt;&lt;span class="nv"&gt;$PROMPT_COMMAND&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="c"&gt;# In your ~/.zshrc&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;HISTSIZE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;100000
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;HISTFILESIZE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;100000
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;HISTFILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/.zhistory

setopt HIST_FIND_NO_DUPS

setopt inc_append_history
setopt share_history
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
  <entry>
    <title>Keep on Learning, but don't Forget to Remember</title>
    <link rel="alternate" href="http://kevinjalbert.com/keep-on-learning-but-dont-forget-to-remember/"/>
    <id>http://kevinjalbert.com/keep-on-learning-but-dont-forget-to-remember/</id>
    <updated>2017-01-08T14:19:32-05:00</updated>
    <published>2016-05-30T20:00:00-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">As developers we are constantly learning tips, tricks and new ways to accomplish our work. We continue to accumulate these tips daily, but at the same time we potentially forget the less used but relevant ones. A system is presented that ensures that these tips are remembered.
</description>
    <content type="html">&lt;p&gt;Learning is a way of life for a developer. Frequently we are exposed to techniques and tips such as: keybindings, shell commands, utilities, new functions/methods, new applications. While learning, we want to keep on remembering the previous techniques and tips that we&amp;rsquo;ve learned so that we can keep them &lt;em&gt;fresh&lt;/em&gt; and on our tool belt. It is not uncommon to forget some learned knowledge if you don&amp;rsquo;t use it often.&lt;/p&gt;

&lt;p&gt;I would like to present my own problem and solution surrounding this idea.&lt;/p&gt;

&lt;h2&gt;Problem: Customization of vim/zsh&lt;/h2&gt;

&lt;p&gt;Vim and zsh are my editor and shell of choice, both decisions I made early in my career. I have since spent countless hours using both and each are indispensable to my development process. As typical of any developer I am always looking for ways to improve my process. Near the beginning of my career I discovered that both &lt;a href="http://vimawesome.com/"&gt;vim&lt;/a&gt; and &lt;a href="https://github.com/unixorn/awesome-zsh-plugins"&gt;zsh&lt;/a&gt; have thriving plugin communities.&lt;/p&gt;

&lt;p&gt;I saw that there were &lt;a href="https://github.com/spf13/spf13-vim"&gt;popular&lt;/a&gt; vim &lt;a href="https://github.com/carlhuda/janus"&gt;distributions&lt;/a&gt; that come pre-packaged with opinionated set of keybindings, plugins and themes. I originally used one of these and immediately felt overwhelmed with the added functionality. I eventually came to terms with the error of my ways, and went back to vanilla vim. Learning from my mistake I decided to slowly incorporate features I felt were useful as I came to need them.&lt;/p&gt;

&lt;p&gt;I continue to stumble upon new plugins that simplifies tasks. I add custom keybindings to perform certain motions. I create custom vim functions. While observing colleagues I take mental notes of vim motions that I have yet to take advantage of. I occasionally look through my setup and notice features and keybindings that I have not used in a while. Sometimes I remove them, but other times I&amp;rsquo;ll keep it and make a try and use it.&lt;/p&gt;

&lt;p&gt;My use of zsh is nearly an identical story to that of my use with vim. In either case I routinely accumulate and pruning tips that I find useful. My largest gripe is &lt;em&gt;forgetting&lt;/em&gt; about new tips that I want to make part of my normal tool set. In most cases these have yet to become habit and common knowledge to me through repetitive exposure and use.&lt;/p&gt;

&lt;h2&gt;Solution&lt;/h2&gt;

&lt;p&gt;I decided to write my accumulation of tips down as one-liners in &lt;code&gt;tips.txt&lt;/code&gt; files, while using directories under &lt;code&gt;~/.tips&lt;/code&gt; for categorization:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;~/.tips❯ tree
.
├── ruby
│   └── rspec
│       └── tips.txt
├── vim
│   ├── plugins
│   │   ├── ctrlp
│   │   │   └── tips.txt
│   │   └── nerdtree
│   │       └── tips.txt
│   └── vanilla
│       └── tips.txt
└── zsh
    └── tips.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ultimately my goal is to be presented with a random tip when I open a new shell. To accomplish this the following code snippet is placed near the start of my &lt;code&gt;.zshrc&lt;/code&gt; (also works in a &lt;code&gt;.bashrc&lt;/code&gt;):&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Displays a random tip from the .tips directory when opening the shell
# Requires gshuf (brew install coreutils)
(
  TIP_PATH=$(find ~/.tips -type f -name tips.txt | gshuf -n1)    # Pick a random tips.txt file
  TIP_TILE=${TIP_PATH#"$HOME/.tips/"}                            # i.e., ~/.tips/vim/vanilla/tips.txt  ---&amp;gt;  vim/vanilla/tips.txt
  echo "From ${TIP_TILE%.txt}:"                                  # i.e., "From vim/vanilla/tips:"
  gshuf -n1 &amp;lt; "$TIP_PATH"                                        # Displays a random line from the tip file
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now throughout the day when I open many new shells, I am presented with a random recorded tip:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;From vim/plugins/nerdtree/tips:
`&amp;lt;f2&amp;gt;` toggles nerdtree open/close
~/.tips❯
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;From zsh/tips:
`j` allows you to jump to marked directories (via `jump`)
~/.tips❯
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Don&amp;rsquo;t Forget to Remember&lt;/h2&gt;

&lt;p&gt;As I continue to learn new things I&amp;rsquo;ll be added them to the appropriate &lt;code&gt;tips.txt&lt;/code&gt; within my &lt;code&gt;.tips&lt;/code&gt; directory. If I am presented with a tip that is no longer relevant I can simply remove it. Overall this seems like a great solution for recollecting tips.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Enhanced Vim Searching</title>
    <link rel="alternate" href="http://kevinjalbert.com/enhanced-vim-searching/"/>
    <id>http://kevinjalbert.com/enhanced-vim-searching/</id>
    <updated>2017-01-08T14:19:32-05:00</updated>
    <published>2016-04-29T20:00:00-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">Vanilla vim offers farily powerful searching capabilities within a buffer. It is possible to _enhance_ vim's searching capabilities even further with vim plugins. Using several plugins, keymappings and settings, we can improve upon vim's search.</description>
    <content type="html">&lt;h2&gt;Basic Searching&lt;/h2&gt;

&lt;p&gt;Vim provides rather simple searching capabilities using the following keys while in normal mode:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/&lt;/code&gt; performs a &lt;em&gt;forward&lt;/em&gt; search of the provided pattern&lt;/li&gt;
&lt;li&gt;&lt;code&gt;?&lt;/code&gt; performs a &lt;em&gt;backward&lt;/em&gt; search of the provided pattern&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt; performs a &lt;em&gt;forward&lt;/em&gt; search of the word under the cursor&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#&lt;/code&gt; performs a &lt;em&gt;backward&lt;/em&gt; search of the word under the cursor&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt; navigates to the &lt;em&gt;next&lt;/em&gt; search occurrence&lt;/li&gt;
&lt;li&gt;&lt;code&gt;N&lt;/code&gt; navigates to the &lt;em&gt;previous&lt;/em&gt; search occurrence&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These commands alone are vital to anyone working with text in Vim. Without any customization these search commands perform simple&lt;/p&gt;

&lt;p&gt;&lt;img alt="Basic Searching" width="906" height="626" src="/images/2016-04-30-enhanced-vim-searching/basic-searching.gif" /&gt;&lt;/p&gt;

&lt;h2&gt;Better Searching&lt;/h2&gt;

&lt;p&gt;Personally, I always apply the following to make my searching slightly more responsive with visual feedback:&lt;/p&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;set&lt;/span&gt; hlsearch
&lt;span class="k"&gt;set&lt;/span&gt; incsearch

&lt;span class="c"&gt;" This unsets the 'last search pattern' register by hitting ;&lt;/span&gt;
nnoremap ; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;noh&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;:&amp;lt;&lt;/span&gt;backspace&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This allows our searches to &lt;em&gt;incrementally&lt;/em&gt; highlight the first match, providing visual feedback on our pattern matching. In addition, when proceeding with the search all the matches of the pattern are highlighted to visually indicate possible next matches.&lt;/p&gt;

&lt;p&gt;As searching is a frequently used motion, I have added a map to &lt;code&gt;;&lt;/code&gt; to clear any highlighting from the searches.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Better Searching" width="910" height="630" src="/images/2016-04-30-enhanced-vim-searching/better-searching.gif" /&gt;&lt;/p&gt;

&lt;h2&gt;Enhance Searching&lt;/h2&gt;

&lt;p&gt;We can do better! Using a mixture of two vim plugins we can achieve an enhanced form of searching within vim:&lt;/p&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="c"&gt;" All around better searching (via Vundle's plugin manager)&lt;/span&gt;
Bundle &lt;span class="s1"&gt;'haya14busa/incsearch.vim'&lt;/span&gt;
Bundle &lt;span class="s1"&gt;'osyo-manga/vim-anzu'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First, we have a bunch of maps and settings to incorporate &lt;a href="https://github.com/haya14busa/incsearch.vim"&gt;&lt;code&gt;incsearch.vim&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://github.com/osyo-manga/vim-anzu"&gt;&lt;code&gt;vim-anzu&lt;/code&gt;&lt;/a&gt; together:&lt;/p&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="c"&gt;" Use incsearch.vim for all search functions (with anzu for indication)&lt;/span&gt;
map /  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;incsearch&lt;span class="p"&gt;-&lt;/span&gt;forward&lt;span class="p"&gt;)&lt;/span&gt;
map ?  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;incsearch&lt;span class="p"&gt;-&lt;/span&gt;backward&lt;span class="p"&gt;)&lt;/span&gt;
map &lt;span class="k"&gt;g&lt;/span&gt;/ &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;incsearch&lt;span class="p"&gt;-&lt;/span&gt;stay&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;g:incsearch&lt;/span&gt;#auto_nohlsearch &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; hlsearch
map &lt;span class="k"&gt;n&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;incsearch&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;nohl&lt;/span&gt;&lt;span class="p"&gt;)&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;anzu&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;n&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;with&lt;span class="p"&gt;-&lt;/span&gt;echo&lt;span class="p"&gt;)&lt;/span&gt;
map N &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;incsearch&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;nohl&lt;/span&gt;&lt;span class="p"&gt;)&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;anzu&lt;span class="p"&gt;-&lt;/span&gt;N&lt;span class="p"&gt;-&lt;/span&gt;with&lt;span class="p"&gt;-&lt;/span&gt;echo&lt;span class="p"&gt;)&lt;/span&gt;
map * &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;incsearch&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;nohl&lt;/span&gt;&lt;span class="p"&gt;)&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;anzu&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;star&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;with&lt;span class="p"&gt;-&lt;/span&gt;echo&lt;span class="p"&gt;)&lt;/span&gt;
map # &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;incsearch&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;nohl&lt;/span&gt;&lt;span class="p"&gt;)&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;anzu&lt;span class="p"&gt;-&lt;/span&gt;sharp&lt;span class="p"&gt;-&lt;/span&gt;with&lt;span class="p"&gt;-&lt;/span&gt;echo&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;g:anzu_status_format&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"%p(%i/%l) %w"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By using &lt;code&gt;incsearch.vim&lt;/code&gt; we not only gain access to other perks that it brings in it&amp;rsquo;s toolkit, but it also handles our highlighting issue. Anytime the cursor moves after a search motion it &lt;code&gt;incsearch.vim&lt;/code&gt; will automatically remove the highlighting, which saves us from using the previously mentioned &lt;code&gt;;&lt;/code&gt; map for manually clearing the search highlighting. Secondly we have &lt;code&gt;vim-anzu&lt;/code&gt; which indicates the current &lt;em&gt;index&lt;/em&gt; of the search occurrence that you are at, it also indicates when you wrap around the bottom/top of the buffer.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Enhanced Searching" width="942" height="628" src="/images/2016-04-30-enhanced-vim-searching/enhanced-searching.gif" /&gt;&lt;/p&gt;

&lt;h2&gt;&lt;em&gt;tap tap tap&lt;/em&gt; Enhance&amp;hellip; &lt;em&gt;tap tap tap&lt;/em&gt; Enhance Searching&lt;/h2&gt;

&lt;p&gt;We can go even further to &lt;em&gt;enhance&lt;/em&gt; our searching by making use of another vim plugin, &lt;a href="https://github.com/Lokaltog/vim-easymotion"&gt;&lt;code&gt;vim-easymotion&lt;/code&gt;&lt;/a&gt; for better targeting our searches:&lt;/p&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="c"&gt;" Targeting our searching (via Vundle's plugin manager)&lt;/span&gt;
Bundle &lt;span class="s1"&gt;'Lokaltog/vim-easymotion'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default &lt;code&gt;vim-easymotion&lt;/code&gt; could be used on the common &lt;code&gt;/&lt;/code&gt; searches to provide an intelligent way to &lt;em&gt;target&lt;/em&gt; our searches. Although, this tramples over our previous work, and we lose the simplicity of our common &lt;code&gt;/&lt;/code&gt; searches. The following function and augmentations allow &lt;code&gt;vim-easymotion&lt;/code&gt; to be triggered off of a &lt;code&gt;/&lt;/code&gt; search by hooking into the search by &lt;code&gt;incsearch.vim&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="c"&gt;" Integrate incsearch and easymotion&lt;/span&gt;
&lt;span class="c"&gt;" https://github.com/Lokaltog/vim-easymotion/issues/146#issuecomment-75443473&lt;/span&gt;
&lt;span class="c"&gt;" Can use / for 'normal searching', at anytime its possible to use &amp;lt;space&amp;gt; to&lt;/span&gt;
&lt;span class="c"&gt;" pass search over to easymotion. To use spaces in search you need to apply&lt;/span&gt;
&lt;span class="c"&gt;" them via the regex approach \s.&lt;/span&gt;
augroup incsearch&lt;span class="p"&gt;-&lt;/span&gt;easymotion
  autocmd&lt;span class="p"&gt;!&lt;/span&gt;
  autocmd &lt;span class="nb"&gt;User&lt;/span&gt; IncSearchEnter autocmd&lt;span class="p"&gt;!&lt;/span&gt; incsearch&lt;span class="p"&gt;-&lt;/span&gt;easymotion&lt;span class="p"&gt;-&lt;/span&gt;impl
augroup END
augroup incsearch&lt;span class="p"&gt;-&lt;/span&gt;easymotion&lt;span class="p"&gt;-&lt;/span&gt;impl
  autocmd&lt;span class="p"&gt;!&lt;/span&gt;
augroup END
&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; IncsearchEasyMotion&lt;span class="p"&gt;()&lt;/span&gt; abort
  autocmd incsearch&lt;span class="p"&gt;-&lt;/span&gt;easymotion&lt;span class="p"&gt;-&lt;/span&gt;impl &lt;span class="nb"&gt;User&lt;/span&gt; IncSearchExecute &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="k"&gt;call&lt;/span&gt; EasyMotion#Search&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"\&amp;lt;CR&amp;gt;"&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;g:incsearch_cli_key_mappings&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="se"&gt;\&lt;/span&gt;   &lt;span class="s2"&gt;"\&amp;lt;Space&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="se"&gt;\&lt;/span&gt;       &lt;span class="s1"&gt;'key'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'IncsearchEasyMotion()'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="se"&gt;\&lt;/span&gt;       &lt;span class="s1"&gt;'noremap'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="se"&gt;\&lt;/span&gt;       &lt;span class="s1"&gt;'expr'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="se"&gt;\&lt;/span&gt;   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="se"&gt;\&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img alt="Targeted Searching" width="938" height="630" src="/images/2016-04-30-enhanced-vim-searching/targeted-searching.gif" /&gt;&lt;/p&gt;

&lt;p&gt;We finally have all-around better vim searching, by configuring three search related plugins to play nice with each other!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Defined Methods in Rake Tasks; _You're Gonna Have a Bad Time_</title>
    <link rel="alternate" href="http://kevinjalbert.com/defined_methods-in-rake-tasks-you-re-gonna-have-a-bad-time/"/>
    <id>http://kevinjalbert.com/defined_methods-in-rake-tasks-you-re-gonna-have-a-bad-time/</id>
    <updated>2017-01-08T14:19:32-05:00</updated>
    <published>2016-03-20T20:00:00-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">Do you define methods within your Rake tasks? You might want to reconsider that, or _you're gonna have a bad time down the road_. Walkthrough an example which illustrates a tricky gotcha and solutions to avoiding it.</description>
    <content type="html">&lt;p&gt;Rake tasks provide a nice way to handle common tasks surrounding a ruby project. Within Rails projects they are nearly unavoidable and even have their own directory from which they are autoloaded. Eventually a project will grow in size and complexity to warrant multiple &lt;em&gt;task&lt;/em&gt; files for better separation of concerns. This alone is nothing to be worried about, but it&amp;rsquo;s when you start using methods in your task files where &lt;em&gt;you&amp;rsquo;re gonna have a bad time&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s setup a dummy Rails project that has a task file that calculates and saves blog metrics.&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# lib/tasks/blog_metrics_task.rake&lt;/span&gt;
&lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="s1"&gt;'Calculate and save blog metrics'&lt;/span&gt;
&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ss"&gt;:blog_metrics&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;metrics&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calculate_blog_metrics&lt;/span&gt;
  &lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculate_blog_metrics&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Calculating blog metrics"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Saving blog metrics"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we run our task it does exactly what we wanted and expected it to do.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ rake blog_metrics
Calculating blog metrics
Saving blog Metrics
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;No problem! Now lets fast-forward in time to when we want to add another task that creates a new blog post.&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# lib/tasks/create_blog_post_task.rake&lt;/span&gt;
&lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="s1"&gt;'Create and save a new blog post'&lt;/span&gt;
&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ss"&gt;:create_blog_post&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;blog_post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;generate_default_blog_post&lt;/span&gt;
  &lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blog_post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_default_blog_post&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Generating a default blog post"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blog_post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Saving defualt blog post"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we run our new task it does exactly what we wanted and expected it to do.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ rake create_blog_post
Generating a default blog post
Saving default blog post
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another success! Now here is where things get interesting. Let&amp;rsquo;s go back and run the first &lt;em&gt;correctly working&lt;/em&gt; task.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ rake blog_metrics
Calculating blog metrics
Saving default blog post
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Woah&amp;hellip; it&amp;rsquo;s the &lt;code&gt;#save&lt;/code&gt; that was defined in the other task file &amp;ndash; &lt;code&gt;create_blog_post_task.rake&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is kind of shocking and might have caught you off guard. Rails automatically loads all rake tasks (i.e., requires their file) when executing any rake task. The &lt;em&gt;gotcha&lt;/em&gt; here is that the defined methods in the loaded tasks files end up defined on the global namespace. These defined methods are therefore accessible across rake files, so it is &lt;em&gt;possible&lt;/em&gt; for methods to clash and be redefined if their signatures match.&lt;/p&gt;

&lt;p&gt;To better illustrate the order of events:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;rake blog_metrics&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Rails autoloads all rake tasks in alphanumeric order&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lib/tasks/blog_metrics_task.rake&lt;/code&gt; &lt;em&gt;is loaded and defines&lt;/em&gt; &lt;code&gt;#calculate_blog_metrics&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; &lt;code&gt;#save&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lib/tasks/create_blog_post_task.rake&lt;/code&gt; &lt;em&gt;is loaded and defines&lt;/em&gt; &lt;code&gt;# generate_default_blog_post&lt;/code&gt; &lt;em&gt;and &lt;strong&gt;redefines&lt;/strong&gt;&lt;/em&gt; &lt;code&gt;#save&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;blog_metrics&lt;/code&gt; &lt;em&gt;task is executed using last defined &lt;code&gt;#save&lt;/code&gt;, which was defined in the other task file&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;No worries right? Rake provides a &amp;lsquo;namespace&amp;rsquo; DSL. So we can modify our tasks to use this.&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="ss"&gt;:blog_metrics&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="s1"&gt;'Calculate and save blog metrics'&lt;/span&gt;
  &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ss"&gt;:run&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;metrics&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calculate_blog_metrics&lt;/span&gt;
    &lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculate_blog_metrics&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Calculating blog metrics"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Saving blog metrics"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We should be in the clear now.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ rake blog_metrics:run
Calculating blog metrics
Saving default blog post
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nope! The namespace DSL does nothing for the defined methods. So we still have the same problem.&lt;/p&gt;

&lt;p&gt;There are a couple of solutions to this problem:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Rename the methods, and ensure all future methods are uniquely named&lt;/li&gt;
&lt;li&gt;Inline the contents of the defined methods&lt;/li&gt;
&lt;li&gt;Extract the methods into a module/class and use that&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Solution #1 - Uniquely Named Methods&lt;/h2&gt;

&lt;p&gt;It is possible to simply ensure that we uniquely name our methods so that they do no clash and end up redefining each other.&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# lib/tasks/blog_metrics_task.rake&lt;/span&gt;
&lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="s1"&gt;'Calculate and save blog metrics'&lt;/span&gt;
&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ss"&gt;:blog_metrics&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;metrics&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calculate_blog_metrics&lt;/span&gt;
  &lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculate_blog_metrics&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Calculating blog metrics"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;save_blog_metrics&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Saving blog metrics"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# lib/tasks/create_blog_post_task.rake&lt;/span&gt;
&lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="s1"&gt;'Create and save a new blog post'&lt;/span&gt;
&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ss"&gt;:create_blog_post&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;blog_post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;generate_default_blog_post&lt;/span&gt;
  &lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blog_post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_default_blog_post&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Generating a default blog post"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;save_default_blog_post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blog_post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Saving defualt blog post"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This works and is a quick fix, although it is not exactly sustainable and requires you to be conscientious when naming new methods.&lt;/p&gt;

&lt;h2&gt;Solution #2 - Inline Method Contents&lt;/h2&gt;

&lt;p&gt;To ensure that method redefinition doesn&amp;rsquo;t occur we can simply remove the methods and inline their content.&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# lib/tasks/blog_metrics_task.rake&lt;/span&gt;
&lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="s1"&gt;'Calculate and save blog metrics'&lt;/span&gt;
&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ss"&gt;:blog_metrics&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Calculating blog metrics"&lt;/span&gt;
  &lt;span class="n"&gt;metrics&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="c1"&gt;# Inline calculating work&lt;/span&gt;

  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Saving blog metrics"&lt;/span&gt;
  &lt;span class="c1"&gt;# Inline saving work&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# lib/tasks/create_blog_post_task.rake&lt;/span&gt;
&lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="s1"&gt;'Create and save a new blog post'&lt;/span&gt;
&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ss"&gt;:create_blog_post&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Generating a default blog post"&lt;/span&gt;
  &lt;span class="n"&gt;blog_post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="c1"&gt;# Inline blog post generation work&lt;/span&gt;

  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Saving default blog post"&lt;/span&gt;
  &lt;span class="c1"&gt;# Inline saving work&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is also a quick fix, and might be optimal depending on the size, complexity, and reuse of the method&amp;rsquo;s content.&lt;/p&gt;

&lt;h2&gt;Solution #3 - Extract Methods into Module/Class&lt;/h2&gt;

&lt;p&gt;Removing the methods from the rake files themselves is another valid solution. The methods can be extracted into their own class or module and used within the task files.&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# lib/blog_metric_calculator.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BlogMetricCalculator&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;metrics&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Calculating blog metrics"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Saving blog metrics"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# lib/tasks/blog_metrics_task.rake&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'lib/blog_metric_calculator'&lt;/span&gt;

&lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="s1"&gt;'Calculate and save blog metrics'&lt;/span&gt;
&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ss"&gt;:blog_metrics&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;calculator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;BlogMetricCalculator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
  &lt;span class="n"&gt;calculator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;calculator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# lib/blog_post_creator.rb&lt;/span&gt;
&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;BlogPostCreator&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create_default_blog_post&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Generating a default blog post"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Saving default blog post"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# lib/tasks/create_blog_post_task.rake&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'lib/blog_post_creator'&lt;/span&gt;

&lt;span class="n"&gt;desc&lt;/span&gt; &lt;span class="s1"&gt;'Create and save a new blog post'&lt;/span&gt;
&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ss"&gt;:create_blog_post&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;blog_post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;BlogPostCreator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create_default_blog_post&lt;/span&gt;
  &lt;span class="no"&gt;BlogPostCreator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blog_post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the preferred method if there is sufficient complexity involved. By extracting the methods you begin to build up a set of related concerns within a module/class. By having an external entity outside of the rake tasks themselves you can now &lt;em&gt;test&lt;/em&gt; the defined functionality!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Vim Substitution Feedback Using `vim-over`</title>
    <link rel="alternate" href="http://kevinjalbert.com/vim-substitution-feedback-using-vim-over/"/>
    <id>http://kevinjalbert.com/vim-substitution-feedback-using-vim-over/</id>
    <updated>2017-01-08T14:19:32-05:00</updated>
    <published>2016-02-28T19:00:00-05:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">Vim substitutions offer little affordance in whether the search will match the desired text. `vim-over` is a vim plugin that provides visual feedback while working with substitutions.</description>
    <content type="html">&lt;p&gt;It is common while in vim to perform substitution tasks over the text you are editing. This is often accomplished using the following command:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:%s/&amp;lt;find&amp;gt;/&amp;lt;replacement&amp;gt;/g
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;%s&lt;/code&gt; command will perform substitution over every line within the buffer. The &lt;code&gt;/&amp;lt;find&amp;gt;/&amp;lt;replace&amp;gt;&lt;/code&gt; specifies the substitution to perform. Finally the &lt;code&gt;/g&lt;/code&gt; indicates that this should apply to multiple occurrences if they are present on the same line.&lt;/p&gt;

&lt;p&gt;This works great, although there is little affordance in determining whether the specified &lt;code&gt;&amp;lt;find&amp;gt;&lt;/code&gt; will hit the matches you are interested in. The aforementioned command is a &lt;em&gt;all-or-nothing&lt;/em&gt; with respect to execution, there is no &lt;em&gt;visual feedback&lt;/em&gt; until you execute the command.&lt;/p&gt;

&lt;h1&gt;Visual Feedback via vim-over&lt;/h1&gt;

&lt;p&gt;The &lt;a href="https://github.com/osyo-manga/vim-over"&gt;vim-over&lt;/a&gt; plugin provides a dynamic approach for visual feedback while performing substitutions. It is extremely useful while crafting specific &lt;code&gt;&amp;lt;find&amp;gt;&lt;/code&gt; patterns.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Visual Feedback Demo" width="440" height="320" src="/images/2016-02-29-vim-substitution-feedback-using-vim-over/visual-feedback-demo.gif" /&gt;&lt;/p&gt;

&lt;h1&gt;Tips and Tricks&lt;/h1&gt;

&lt;p&gt;I have three vim maps that I use to simplify and enhance my substitutions.&lt;/p&gt;

&lt;h2&gt;#1 - Substitute Word&lt;/h2&gt;

&lt;p&gt;This mapping (&lt;code&gt;&amp;lt;leader&amp;gt;s&lt;/code&gt;) will find and replace the text under the cursor using &lt;code&gt;vim-over&lt;/code&gt; for visual feedback. After the mapping has been executed you are left where you simply type the &lt;code&gt;&amp;lt;replacement&amp;gt;/g&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nnoremap &amp;lt;leader&amp;gt;s :OverCommandLine&amp;lt;CR&amp;gt; %s/&amp;lt;C-r&amp;gt;&amp;lt;C-w&amp;gt;/
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;#2 - Global Substitution&lt;/h2&gt;

&lt;p&gt;This mapping (&lt;code&gt;&amp;lt;leader&amp;gt;v&lt;/code&gt;) will perform a global substitution using &lt;code&gt;vim-over&lt;/code&gt; for visual feedback. After the mapping has been executed you are left where you type the &lt;code&gt;&amp;lt;find&amp;gt;/&amp;lt;replacement&amp;gt;/g&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function! VisualFindAndReplace()
    :OverCommandLine %s/
    :noh
endfunction
nnoremap &amp;lt;Leader&amp;gt;v :call VisualFindAndReplace()&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;#3 - Visual Substitution&lt;/h2&gt;

&lt;p&gt;This mapping (&lt;code&gt;&amp;lt;leader&amp;gt;v&lt;/code&gt; while in visual mode) will perform a substitution only within the visually selected text using &lt;code&gt;vim-over&lt;/code&gt; for visual feedback. After the mapping has been executed you are left where you type the &lt;code&gt;&amp;lt;find&amp;gt;/&amp;lt;replacement&amp;gt;/g&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function! VisualFindAndReplaceWithSelection() range
    :'&amp;lt;,'&amp;gt;OverCommandLine s/
    :noh
endfunction
xnoremap &amp;lt;Leader&amp;gt;v :call VisualFindAndReplaceWithSelection()&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>
</feed>
