<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kevin Jalbert</title>
  <link href="https://kevinjalbert.com"/>
  <updated>2017-06-30T19:53:20-04:00</updated>
  <author>
    <name>Kevin Jalbert</name>
  </author>
  <id>https://kevinjalbert.com</id>
  <entry>
    <title>Make the most of your Chat Channels</title>
    <link rel="alternate" href="https://kevinjalbert.com/make-the-most-of-your-chat-channels/"/>
    <id>https://kevinjalbert.com/make-the-most-of-your-chat-channels/</id>
    <updated>2017-06-30T13:17:25-04:00</updated>
    <published>2017-06-30T19:53:20-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">Persisted chat channels communication platform, which by its nature, has little guidance in how you organize channels. To ensure that everyone is making the most of channels, I'll provided some tips and suggestions based on my experiences.</description>
    <content type="html">&lt;p&gt;&lt;img width="2048" height="1371" src="/images/2017-06-30-make-the-most-of-your-chat-channels/communication-tower.jpg" /&gt;
&lt;em&gt;&lt;a href="https://flic.kr/p/finMno"&gt;Communication Tower&lt;/a&gt; by &lt;a href="https://www.flickr.com/photos/95876508@N02/"&gt;Cocoy Pusung&lt;/a&gt;, on Flickr&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Organizations tend to use some instant messaging platform in addition to email. Ideally, the chosen platform permeates throughout the ranks of the organization instead of having fractured communication between members. The real-time and group collaborative nature of these messaging platforms are quite appealing.&lt;/p&gt;

&lt;p&gt;I have personally used a couple of messaging platform so far (i.e., Hipchat, Gitter, Discord, Slack). Overall, they all offer the concept of channels. Channels are simply persisted chat &lt;em&gt;rooms&lt;/em&gt; in which members can communicate asynchronously. Topics and names of channels are left up to the members who use them.&lt;/p&gt;

&lt;p&gt;My goal is to outline some steps to better foster an effective use of channels in your messaging platform of choice. I am currently using Slack at theScore, and so the context of this post will be within Slack.&lt;/p&gt;

&lt;h1&gt;The Cleanse&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Macaitis recommends that if no one has used a channel for sixty days, itâ€™s best to archive it. &amp;ndash; &lt;a href="https://expand.openviewpartners.com/former-slack-cmo-bill-macaitis-on-how-slack-uses-slack-868ffb495b71"&gt;Former Slack CMO, Bill Macaitis, on How Slack Uses Slack&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;An organization that uses chat channels for communication will accrue an abundance of such. Some of these channels are used more frequently than others. To keep things slightly under control, you should routinely clean the channels. As to &lt;em&gt;who&lt;/em&gt; should be doing this, I would say everyone should try to keep their communication platform clean. There are a few benefits to this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Keeps a more narrow focus within the organization&lt;/li&gt;
&lt;li&gt;Easier for users to keep a handle on their channels&lt;/li&gt;
&lt;li&gt;Newcomers feel less overwhelmed at the number of channels&lt;/li&gt;
&lt;li&gt;Less ambiguity on where conversations/information should be put&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Archiving channels doesn&amp;rsquo;t have to be perfect, although there will be clear choices. If the need of the channel arises again, it can be recreated/unarchived as needed.&lt;/p&gt;

&lt;h1&gt;Types of Channels&lt;/h1&gt;

&lt;p&gt;Channels tend to fall under specific categories that define their behaviour or purpose. For example, &lt;a href="https://slack.global.ssl.fastly.net/5ccb/pdfs/admins_guide.pdf"&gt;Slack provides a guideline&lt;/a&gt; on what these channel types are:&lt;/p&gt;

&lt;h2&gt;Global&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;i.e., #general, #announcements, #everyone&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A global channel is one that &lt;em&gt;everyone&lt;/em&gt; is apart of. Normally this would be a general channel, however productivity can be limited depending on the number of members &amp;ndash; it&amp;rsquo;s more of a social channel. A common use case for using a global channel is for organizational announcements.&lt;/p&gt;

&lt;h2&gt;Location&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;i.e., #toronto, #ontario, #canada&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;An organization might be spread across many locations. These channels offer a way to group conversations that pertain to specific locations. How to name these channels depends on how your organization is structured geographically &amp;ndash; it might be based on cities, regions, or even offices within a city.&lt;/p&gt;

&lt;h2&gt;Team&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;i.e., #engineering, #engineering-ios, #sales, #designers&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These channels are rather important in facilitating communication within teams. Realistically you would have high-level groups such as &lt;em&gt;#engineering&lt;/em&gt; that all your engineers are apart of. It would also be ideal to create &lt;em&gt;sub-teams&lt;/em&gt; to accommodate specializations such as &lt;em&gt;#engineering-android&lt;/em&gt; and &lt;em&gt;#engineering-web&lt;/em&gt;. By following this naming convention for teams and sub-teams, the channels are &lt;em&gt;grouped&lt;/em&gt; and sorted through the naming convention.&lt;/p&gt;

&lt;h2&gt;Project&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;i.e., #sports-app, #chat-bot, #squadup&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Often projects are underway. To help communication within that project, which might include individuals across different teams, a project channel is useful. As projects come and go, it might be worth archiving channels for projects that are no longer current.&lt;/p&gt;

&lt;h2&gt;Topical&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;i.e., #soccer, #javascript, #anime&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To me, these are the interesting channels! The previously mentioned channels types were more geared towards business communication, and generally are easily formed around the business needs. Topical channels could be on anything that interests a group of people. Generally, these channels are organically formed within an organization.&lt;/p&gt;

&lt;h2&gt;Temporary&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;i.e., #xmas-party, #offsite-retreat, #brainstorm-session&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These channels are short-lived and generally used for time-sensitive events. They have a specific purpose, and rarely offer much value after that purpose is completed. These channels could be deleted or archived when they are no longer needed. Channels are &lt;em&gt;cheap&lt;/em&gt; to create, and so people shouldn&amp;rsquo;t be worried about making one-off channels to help them accomplish specific tasks.&lt;/p&gt;

&lt;h1&gt;Organizing Channels&lt;/h1&gt;

&lt;p&gt;As we saw there are many categories of channels. To help with the organization of the multiple channels, a naming convention could be used.&lt;/p&gt;

&lt;p&gt;One suggestion is to prefix all team channels with &lt;code&gt;team-&lt;/code&gt; (i.e., &lt;em&gt;#team-engineering&lt;/em&gt;). The same could be done with project channels using &lt;code&gt;project-&lt;/code&gt; (i.e., &lt;em&gt;#project-esports&lt;/em&gt;). The actual prefix doesn&amp;rsquo;t matter as long as it is unique (enough) and consistent. A benefit is that channels are ordered alphanumerically, making it easier to browse active teams/projects. If you wanted, you could even take the same approach with topics (i.e., &lt;em&gt;#topic-soccer&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Another idea is to have a &lt;em&gt;#meta&lt;/em&gt; channel where you can talk about improving the use of the platform itself. For example, new topic channels can be posted there, same with renames and such. Ensure everyone is a part of the channel so information travels. If there is support for it, you could also pin/sticky some guidelines on the platform (i.e., link to this article).&lt;/p&gt;

&lt;h1&gt;Topical Channels (at theScore)&lt;/h1&gt;

&lt;p&gt;As previously mentioned, topical channels are the interesting channels that I want to touch on more here. I&amp;rsquo;ll just say that this is coming from an software organization&amp;rsquo;s perspective, as I am a part of theScore engineering team.&lt;/p&gt;

&lt;p&gt;Here are a few of our topical channels:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;#ping-pong&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;#overwatch&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;#pokemon-go&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;#podcasts&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;#board-games&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;#food&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While these channels do provide topical information on their specific topics, we didn&amp;rsquo;t really have engineering topic channels.&lt;/p&gt;

&lt;h2&gt;Birth of Engineering Topical Channels&lt;/h2&gt;

&lt;p&gt;We were doing some recent work with &lt;a href="https://facebook.github.io/react/"&gt;React&lt;/a&gt; and &lt;a href="http://graphql.org/"&gt;GraphQL&lt;/a&gt;, and we saw the birth of two engineering topical channels:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;#graphql&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;#react&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before this work, we did not &lt;em&gt;really&lt;/em&gt; have engineering topical channels. This caused slight inefficiencies in the flow of knowledge through our engineering team. We made these new channels known at the engineering level, and also invited people who are actively working in the areas. This approach injected people who cared about the topic into the channel. As we go about our day and we find something interesting related to one of these topics, it becomes easy to drop that information into the channel. In addition, more specific questions can be asked in these channels as their topic is fairly narrow.&lt;/p&gt;

&lt;p&gt;Eventually, you end up seeing people who are not &lt;em&gt;directly&lt;/em&gt; working in that topic area, but are still in the channel. To me this suggests people have an interest.&lt;/p&gt;

&lt;h2&gt;Educational Value of Topical Communication&lt;/h2&gt;

&lt;p&gt;These specific topical channels on programming languages/frameworks/concepts are extremely beneficial to individuals, and the organization.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Provides a place for focused conversations to take place. For example, if someone had a general GraphQL question where do you go to ask it? Possibly in one our engineering channels, or maybe a specific team that is using it? In this case, having a dedicated topical channel for &lt;em&gt;#graphql&lt;/em&gt; would be beneficial.&lt;/li&gt;
&lt;li&gt;Promotes people to widen their interests, as they can simply join a channel and &lt;em&gt;slowly&lt;/em&gt; absorb information. For example, if I was interested in &lt;em&gt;#machine-learning&lt;/em&gt;, I could join the channel and occasionally I&amp;rsquo;ll see people post links to articles, conference talks, and just general conversation on the topic.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is great educational value in these channels, especially in larger organizations where there are many teams and projects. These channels offer a place to share findings and communication to prevent knowledge silos.&lt;/p&gt;

&lt;h2&gt;Effective Slack Plan&lt;/h2&gt;

&lt;p&gt;Now at theScore, this is our plan in improving our usage of Slack channels:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Archive channels with no activity in the last 60 days&lt;/li&gt;
&lt;li&gt;Rename team channels with the &lt;code&gt;team-&lt;/code&gt; prefix&lt;/li&gt;
&lt;li&gt;Rename project channels with the &lt;code&gt;proj-&lt;/code&gt; prefix&lt;/li&gt;
&lt;li&gt;Create a 2-level hierarchy for teams (i.e., &lt;em&gt;#eng&lt;/em&gt;, #eng-ios)&lt;/li&gt;
&lt;li&gt;Create engineering topical channels (i.e., &lt;em&gt;#rails&lt;/em&gt;, &lt;em&gt;#android&lt;/em&gt;, &lt;em&gt;#swift&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Create a &lt;em&gt;#meta&lt;/em&gt; channel (along with a note to some channel conventions)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With routine maintenance, we will keep our Slack channels focused and organized. Hopefully we will see the benifit to education/knowledge sharing with the increased organization of our chat channels.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Create your own Pronto Runner</title>
    <link rel="alternate" href="https://kevinjalbert.com/create-your-own-pronto-runner/"/>
    <id>https://kevinjalbert.com/create-your-own-pronto-runner/</id>
    <updated>2017-06-30T13:18:17-04:00</updated>
    <published>2017-05-30T19:53:20-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">Pronto runners provides an automatic mechanism to find offenses in code reviews. Learn the essentials of pronto runners so that you can build your own.</description>
    <content type="html">&lt;p&gt;&lt;img width="1280" height="857" src="/images/2017-05-30-create-your-own-pronto-runner/robot.jpg" /&gt;
&lt;em&gt;By Vanillase (Own work) &lt;a href="http://creativecommons.org/licenses/by-sa/3.0"&gt;CC BY-SA 3.0&lt;/a&gt;, via &lt;a href="https://commons.wikimedia.org/wiki/File:ASIMO_Conducting_Pose_on_4.14.2008.jpg"&gt;Wikimedia Commons&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;What is Pronto?&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://github.com/prontolabs/pronto"&gt;Pronto&lt;/a&gt; is a tool that provides an automated code review over new changes in a git branch. It is typically used in continuous integration as a way to provide feedback on a pull/merge request. It is configurable in how it provides feedback, through the use of &lt;em&gt;formatters&lt;/em&gt;. For example, pronto on GitHub could &lt;a href="https://github.com/prontolabs/pronto/blob/master/lib/pronto/formatter/github_pull_request_formatter.rb"&gt;comment directly on the offending line&lt;/a&gt;, use &lt;a href="https://github.com/prontolabs/pronto/blob/master/lib/pronto/formatter/github_status_formatter.rb"&gt;pull request status checks&lt;/a&gt;, or even the recent &lt;a href="https://github.com/prontolabs/pronto/blob/master/lib/pronto/formatter/github_pull_request_review_formatter.rb"&gt;pull request review&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Pronto uses the concept of &lt;em&gt;runners&lt;/em&gt; to indicate what pronto will use to look for offenses during a code review. Generally, runners act as wrappers around existing tools. There are a number of &lt;a href="https://github.com/prontolabs/pronto#runners"&gt;open source runners&lt;/a&gt; available, and for the most part they will provide what you need. In some cases you&amp;rsquo;ll want something different, which does not &lt;em&gt;yet&lt;/em&gt; exist as a runner. This is where you can create a new runner to fill the gap.&lt;/p&gt;

&lt;h1&gt;What is a Runner&amp;rsquo;s Job?&lt;/h1&gt;

&lt;p&gt;Pronto runners are responsible for parsing out offenses and matching them with lines from a git patch. These offenses normally are the result of a tool that the runner is using (i.e., a linter). The end goal is that the runner sends messages containing the patch line change and the offense to pronto. There are two methods that I&amp;rsquo;ve seen when approaching a pronto runner, and are dictated by the following constraints:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The tool can be run on individual files.&lt;/li&gt;
&lt;li&gt;The tool needs be run with the context of the whole code base.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The second option could be used regardless, although when the size of your codebase increases the number of files that have to be processed would grow as well. Ideally, you would want the runner to be as quick as possible, so running the tool over the least amount of files would help accomplish that. In addition, there would be less error noise produced from non-changed files.&lt;/p&gt;

&lt;p&gt;In my experience, when creating &lt;a href="https://github.com/kevinjalbert/pronto-stylelint"&gt;pronto-stylelint&lt;/a&gt; and &lt;a href="https://github.com/kevinjalbert/pronto-flow"&gt;pronto-flow&lt;/a&gt;, I used existing pronto runners as my base. I would recommend the same when starting a new runner. Pick one as your base (which follows the approach you need) and modify as necessary. Again, most pronto runners are fairly straight forward, and usually consist of one file.&lt;/p&gt;

&lt;h1&gt;Examining a Runner&lt;/h1&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at &lt;a href="https://github.com/prontolabs/pronto-rubocop/blob/v0.8.1/lib/pronto/rubocop.rb"&gt;pronto-rubocop&lt;/a&gt; and make a few notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The class inherits from &lt;code&gt;Pronto::Runner&lt;/code&gt;, which provides the patch information along with &lt;a href="https://github.com/prontolabs/pronto/blob/v0.8.2/lib/pronto/runner.rb"&gt;other methods&lt;/a&gt; that you can use within your runner.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#initialize&lt;/code&gt; is setting up any custom configurations, as well as creating the &lt;code&gt;Rubocop::Runner&lt;/code&gt; instance.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#run&lt;/code&gt; is the &lt;a href="https://github.com/prontolabs/pronto/blob/v0.8.2/lib/pronto/runners.rb#L20"&gt;entry point of the runner&lt;/a&gt; &amp;ndash; this is where all your logic can start to come into play.&lt;/li&gt;
&lt;li&gt;In pronto-rubocop, &lt;code&gt;#run&lt;/code&gt; is selecting all the patch information that pronto provides it, and only processing (i.e., run rubocop and send messages) those which are valid (i.e., ruby file that has a change).&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;#inspect&lt;/code&gt; method processes each patch with rubocop. The reported offenses from rubocop get matched up with the patch file/line. When a match is found then &lt;code&gt;#new_message&lt;/code&gt; is called.&lt;/li&gt;
&lt;li&gt;The output of a pronto runner is to create instances of &lt;code&gt;Pronto::Message&lt;/code&gt;, which requires &lt;a href="https://github.com/prontolabs/pronto/blob/master/lib/pronto/message.rb#L7-L19"&gt;specific data inputs&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following is a stripped down and commented version of pronto-rubocop:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'pronto'&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'rubocop'&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Pronto&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Rubocop&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Runner&lt;/span&gt;
    &lt;span class="sr"&gt;//&lt;/span&gt; &lt;span class="no"&gt;Required&lt;/span&gt; &lt;span class="sb"&gt;`#run`&lt;/span&gt; &lt;span class="nb"&gt;method&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="vi"&gt;@patches&lt;/span&gt;

      &lt;span class="sr"&gt;//&lt;/span&gt; &lt;span class="no"&gt;Loop&lt;/span&gt; &lt;span class="n"&gt;over&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;patches&lt;/span&gt; &lt;span class="n"&gt;passed&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;pronto&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="nb"&gt;select&lt;/span&gt; &lt;span class="n"&gt;valid&lt;/span&gt; &lt;span class="n"&gt;ones&lt;/span&gt;
      &lt;span class="sr"&gt;//&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;inspect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;possibly&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
      &lt;span class="vi"&gt;@patches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;valid_patch?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;inspect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;compact&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;valid_patch?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;additions&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

      &lt;span class="sr"&gt;//&lt;/span&gt; &lt;span class="no"&gt;Return&lt;/span&gt; &lt;span class="n"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;determine&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;valid&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;runner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
      &lt;span class="nf"&gt;/&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;,&lt;/span&gt; &lt;span class="n"&gt;whether&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;included&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;runner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="nf"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inspect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="sr"&gt;//&lt;/span&gt; &lt;span class="no"&gt;Process&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;acquire&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;generated&lt;/span&gt; &lt;span class="n"&gt;offenses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
      &lt;span class="nf"&gt;processed_source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;processed_source_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;offences&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@inspector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:inspect_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;processed_source&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;first&lt;/span&gt;

      &lt;span class="sr"&gt;//&lt;/span&gt; &lt;span class="no"&gt;Filter&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;offenses&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;those&lt;/span&gt; &lt;span class="n"&gt;which&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt;
      &lt;span class="sr"&gt;//&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="no"&gt;If&lt;/span&gt; &lt;span class="n"&gt;so&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;said&lt;/span&gt; &lt;span class="n"&gt;information&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
      &lt;span class="nf"&gt;offences&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="ss"&gt;:disabled?&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;offence&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;added_lines&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new_lineno&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;offence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;line&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;new_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;offence&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;new_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;offence&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new_file&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:path&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="n"&gt;level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;offence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;severity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="sr"&gt;//&lt;/span&gt; &lt;span class="no"&gt;Symbol&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;offence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

      &lt;span class="nf"&gt;/&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="no"&gt;Required&lt;/span&gt; &lt;span class="n"&gt;construct&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;pronto&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
      &lt;span class="nf"&gt;/&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="no"&gt;The&lt;/span&gt; &lt;span class="sb"&gt;`line`&lt;/span&gt; &lt;span class="n"&gt;here&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="n"&gt;extracted&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="vi"&gt;@patch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
      &lt;span class="no"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;offence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;processed_source_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="sr"&gt;//&lt;/span&gt; &lt;span class="no"&gt;Rubocop&lt;/span&gt; &lt;span class="n"&gt;processing&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
    &lt;span class="nf"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;Building a Runner&lt;/h1&gt;

&lt;p&gt;As previously mentioned, most pronto runners are simply wrappers for an existing tool and the whole runner itself is quite small. Given that you inherit from &lt;code&gt;Pronto::Runner&lt;/code&gt;, the only method you need to implement is &lt;code&gt;#run&lt;/code&gt;. There is a lot of flexibility in what your runner can do.&lt;/p&gt;

&lt;p&gt;Together let&amp;rsquo;s build a runner that flags lines that contain one of the &lt;a href="https://en.wikipedia.org/wiki/Seven_dirty_words"&gt;seven dirty words&lt;/a&gt;. I decided to use &lt;a href="https://github.com/kevinjalbert/pronto-stylelint"&gt;pronto-stylelint&lt;/a&gt; as my base, which I then pulled out everything except the essentials:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'pronto'&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'shellwords'&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Pronto&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DirtyWords&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Runner&lt;/span&gt;
    &lt;span class="no"&gt;DIRTY_WORDS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'shit'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'piss'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'fuck'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'cunt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'cocksucker'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'motherfucker'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'tits'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="vi"&gt;@patches&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="vi"&gt;@patches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;zero?&lt;/span&gt;

      &lt;span class="vi"&gt;@patches&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;additions&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;inspect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;compact&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="kp"&gt;private&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;git_repo_path&lt;/span&gt;
      &lt;span class="vi"&gt;@git_repo_path&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="no"&gt;Rugged&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Repository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;discover&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;expand_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Dir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;pwd&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;workdir&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inspect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;offending_line_numbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="n"&gt;patch&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;added_lines&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new_lineno&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;line_number&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;new_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Avoid using one of the seven dirty words'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;new_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;offence&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new_file&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:path&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="n"&gt;level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:warning&lt;/span&gt;

      &lt;span class="no"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;offence&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;offending_line_numbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;line_numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

      &lt;span class="no"&gt;Dir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;git_repo_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="n"&gt;escaped_file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Shellwords&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;escape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new_file_full_path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;escaped_file_path&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;with_index&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_num&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
          &lt;span class="n"&gt;line_numbers&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;line_num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="no"&gt;DIRTY_WORDS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;any?&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;downcase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;

        &lt;span class="n"&gt;line_numbers&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;#offending_line_numbers&lt;/code&gt; methods is where the check for a &lt;em&gt;dirty word&lt;/em&gt; occurs. When an offending line is found, we flag the line number for that file to be used in &lt;code&gt;#new_message&lt;/code&gt;. Overall, it is not that hard to put together a simple pronto runner. To look at the end result of this pronto runner, it is open sourced at &lt;a href="https://github.com/kevinjalbert/pronto-dirty_words"&gt;pronto-dirty_words&lt;/a&gt;. Never forget it is always possible to add configuration files and external tools to a runner.&lt;/p&gt;

&lt;h1&gt;Pronto all the things&lt;/h1&gt;

&lt;p&gt;To this date, I have created two useful pronto runners (&lt;em&gt;dirty words&lt;/em&gt; was more of a demo for this post). I have personally been using pronto for several years, and I will continue to use it. The ecosystem of runners continues to grow. I hope that this post helps others in creating new runners that will benefit everyone. Keep an eye out for tools that could be wrapped in a pronto runner &amp;ndash; maybe you can help add to the set of runners!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Bluetooth Connection/Battery Script for macOS</title>
    <link rel="alternate" href="https://kevinjalbert.com/bluetooth-connection-battery-script-for-macos/"/>
    <id>https://kevinjalbert.com/bluetooth-connection-battery-script-for-macos/</id>
    <updated>2017-06-30T13:18:17-04:00</updated>
    <published>2017-04-08T19:53:20-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">Using AppleScript to simplify connecting bluetooth earphones to macOS.</description>
    <content type="html">&lt;p&gt;&lt;img width="4032" height="3024" src="/images/2017-04-09-bluetooth-connection-battery-script-for-macos/beatsx.jpg" /&gt;
&lt;em&gt;My BeatsX Earphones&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I recently purchased a pair of &lt;a href="http://www.apple.com/ca/shop/product/MLYE2LL/A/beatsx-earphones-black"&gt;BeatsX Earphones&lt;/a&gt; as I wanted to stop dealing with wired earbuds. For some reason, the wired connections always stopped working properly after a number of months. I supect it is just the stress on the wire while in my pocket during my commute.&lt;/p&gt;

&lt;p&gt;When arriving at work, or really anytime I am transitioning from iPhone to MacBook Pro, I have to manually connect my BeatsX to the MacBook Pro. I wanted to automate this process, down to a simple command. If the BeatsX are in range and on they would initiate the connection process to my machine. In addition, it would be nice to have a way to monitor the battery level using a similar process.&lt;/p&gt;

&lt;p&gt;Looking around, I couldn&amp;rsquo;t find any way through a command-line interface to do what I wanted. I eventually figured out that I could use macOS&amp;rsquo;s &lt;a href="https://en.wikipedia.org/wiki/AppleScript"&gt;AppleScript&lt;/a&gt; to automate the menu navigation.&lt;/p&gt;

&lt;p&gt;The following script will attempt to connect to the desired device (i.e., BeatsX by name). If it is already connected then it will retrieve the battery level.&lt;/p&gt;
&lt;pre class="highlight applescript"&gt;&lt;code&gt;&lt;span class="nb"&gt;activate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"SystemUIServer"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;deviceName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Kevin Jalbert's BeatsX"&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;tell&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"System Events"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="k"&gt;tell&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;process&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"SystemUIServer"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;bluetoothMenu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;menu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;bar&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;item&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;menu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;bar&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;whose&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;description&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;contains&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"bluetooth"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="k"&gt;tell&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;bluetoothMenu&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nv"&gt;click&lt;/span&gt;&lt;span class="w"&gt;

      &lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;deviceMenuItem&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;menu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;item&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;deviceName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;menu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="k"&gt;tell&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;deviceMenuItem&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nv"&gt;click&lt;/span&gt;&lt;span class="w"&gt;

        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;exists&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;menu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;item&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Connect"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;menu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nv"&gt;click&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;menu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;item&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Connect"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;menu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Connecting..."&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;batteryLevelMenuItem&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;menu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;item&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;menu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="k"&gt;tell&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;batteryLevelMenuItem&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;batteryLevelText&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;batteryLevelMenuItem&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;tell&lt;/span&gt;&lt;span class="w"&gt;

          &lt;/span&gt;&lt;span class="na"&gt;key code&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;-- esc key&lt;/span&gt;&lt;span class="w"&gt;

          &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;batteryLevelText&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;tell&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;tell&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;tell&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;tell&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This on its own is a nice win and works as desired. Now, I&amp;rsquo;m a heavy user of &lt;a href="https://www.alfredapp.com/"&gt;Alfred&lt;/a&gt; and I quickly threw together a workflow that uses this script. I now get a notification during connection, and repeated invokations will display the battery level.&lt;/p&gt;

&lt;p&gt;&lt;img width="2104" height="632" src="/images/2017-04-09-bluetooth-connection-battery-script-for-macos/alfred-workflow.gif" /&gt;
&lt;em&gt;My BeatsX Alfred workflow&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Cut Code Review Noise on GitHub</title>
    <link rel="alternate" href="https://kevinjalbert.com/cut-code-review-noise-on-github/"/>
    <id>https://kevinjalbert.com/cut-code-review-noise-on-github/</id>
    <updated>2017-06-30T13:18:17-04:00</updated>
    <published>2017-03-28T19:53:20-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">Code reviews on GitHub can be noisy and contain a lot of unnecessary chatter. We explore how to effectively coordinate code reviewing a pull request using GitHub's reactions and request review features.</description>
    <content type="html">&lt;p&gt;&lt;img width="1024" height="682" src="/images/2017-03-28-cut-code-review-noise-on-github/scissors.jpg" /&gt;
&lt;em&gt;&lt;a href="https://www.flickr.com/photos/9918311@N02/4268582634/in/photostream/"&gt;Painting scissors with light 4 by Zechariah  Judy, on Flickr&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For this post I&amp;rsquo;m not going to detail my preferred approach for working through a source code change using GitHub&amp;rsquo;s pull requests &amp;ndash; another post will likely contain this. I&amp;rsquo;m instead going to touch on GitHub&amp;rsquo;s review requests feature, and present an effective and efficient way to handle code reviews with GitHub&amp;rsquo;s interface.&lt;/p&gt;

&lt;h1&gt;GitHub Review Requests and Reactions&lt;/h1&gt;

&lt;p&gt;GitHub, in late 2016, introduced &lt;a href="https://github.com/blog/2291-introducing-review-requests"&gt;review requests&lt;/a&gt; to their platform. This was a welcome addition to code reviewing pull requests. It exposed a mechanism to request reviews without using &lt;em&gt;@mention&lt;/em&gt; or chat to get people&amp;rsquo;s attention.&lt;/p&gt;

&lt;p&gt;GitHub made it easier to identify pull requests that require your attention by &lt;a href="https://github.com/blog/2306-filter-pull-request-reviews-and-review-requests"&gt;filtering review requests&lt;/a&gt;. Additionally, GitHub also allowed review requests to integrate with their &lt;a href="https://github.com/blog/2051-protected-branches-and-required-status-checks"&gt;protected branches&lt;/a&gt; feature. It became possible to prevent merging a pull request until at least one reviewer approved that pull request.&lt;/p&gt;

&lt;p&gt;Last year GitHub released &lt;a href="https://github.com/blog/2119-add-reactions-to-pull-requests-issues-and-comments"&gt;reactions&lt;/a&gt; to simply reduce noise in large issues and pull requests. With this now you can simply add an emoji reaction instead of a new comment.&lt;/p&gt;

&lt;p&gt;Overall, these are all incremental steps in the right direction towards the goal of a collaborative environment within GitHub. More and more, I find myself using review requests to communicate with other developers. Requesting a review now sends the appropriate notification to the individual. In the past, I would have pasted a link to the pull request in our chat room, or made an &lt;em&gt;@mention&lt;/em&gt; comment. By moving away from the old style of getting reviews, I find there is less &lt;em&gt;chatter&lt;/em&gt; and &lt;em&gt;noise&lt;/em&gt; for coordinating code reviews.&lt;/p&gt;

&lt;h1&gt;Committed Reviewers&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;m going to introduce the concept of &lt;em&gt;committed reviewers&lt;/em&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A &lt;em&gt;reviewer&lt;/em&gt; who is &lt;em&gt;committed&lt;/em&gt; to the overall quality and correctness of the pull request.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This implies that committed reviewers are individuals who give the final &lt;em&gt;approval&lt;/em&gt; for the pull request before merging.&lt;/p&gt;

&lt;p&gt;This concept might not be applicable for various projects or organizations. I do recommend it, however, as it tends to promote higher quality code ending up in your codebase.&lt;/p&gt;

&lt;p&gt;With GitHub&amp;rsquo;s request reviewers feature, this means that if you are requested, you are now a committed reviewer. The pull request cannot be merged until all committed reviewers approve it. This prevents a scenario where a reviewer could still be working through a pull request when it&amp;rsquo;s merged, wasting time and potentially missing issues. I have seen this happen when authors request numerous reviewers just to expedite the process.&lt;/p&gt;

&lt;h1&gt;Coordinating Code Reviews&lt;/h1&gt;

&lt;p&gt;Imagine we&amp;rsquo;re on a team of 4 people. You just created a pull request in GitHub. Now you want some eyes on the new changes you are proposing to put into the codebase.&lt;/p&gt;

&lt;p&gt;You recall the old ways of using an &lt;em&gt;@mention&lt;/em&gt; just to get reviewers, same with pasting the link in our chat. You don&amp;rsquo;t want to disturb the team with unnecessary noise. Instead, it is time to use the new request reviewers interface in GitHub.&lt;/p&gt;

&lt;p&gt;&lt;img width="280" height="190" src="/images/2017-03-28-cut-code-review-noise-on-github/reviewers-state-1.png" /&gt;&lt;/p&gt;

&lt;p&gt;You decide to directly request reviews from Jane and Bob, as you know they are familiar with this part of the system. You decided to request only two reviews as we have an informal rule of requiring two approvals before merging in any pull request.&lt;/p&gt;

&lt;p&gt;&lt;img width="280" height="190" src="/images/2017-03-28-cut-code-review-noise-on-github/reviewers-state-2.png" /&gt;&lt;/p&gt;

&lt;p&gt;Bob leaves a request for changes inquiring on one aspect of your code. In one of his comments he indicates that Mary had encountered a similar problem and her solution was slightly different from yours.&lt;/p&gt;

&lt;p&gt;&lt;img width="280" height="190" src="/images/2017-03-28-cut-code-review-noise-on-github/reviewers-state-3.png" /&gt;&lt;/p&gt;

&lt;p&gt;You read over the requested changes from Bob and make the corrections.&lt;/p&gt;

&lt;p&gt;Mary chimes in regarding that comment and leaves some insight there for you. You read it over and leave a GitHub Reaction to express your thanks, which indicates that you acknowledged her comment.&lt;/p&gt;

&lt;p&gt;&lt;img width="280" height="190" src="/images/2017-03-28-cut-code-review-noise-on-github/reviewers-state-4.png" /&gt;&lt;/p&gt;

&lt;p&gt;You now need to signal to Bob that you addressed his concerns so he can look at the new changes you added. Instead of getting his attention via chat or a &lt;em&gt;@mention&lt;/em&gt; comment, you can remove and request him again for a review.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Unfortunately, GitHub does not provide a one button click to request a review again from someone who is already a reviewer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Bob receives a notification that he has been requested for a review and looks over the changes, finally approving it.&lt;/p&gt;

&lt;p&gt;Jane gets back and also approves your pull request.&lt;/p&gt;

&lt;p&gt;&lt;img width="280" height="190" src="/images/2017-03-28-cut-code-review-noise-on-github/reviewers-state-5.png" /&gt;&lt;/p&gt;

&lt;p&gt;At this specific point you have the two approvals that we as a team decided is required before merging a pull requests. Mary&amp;rsquo;s in a &lt;em&gt;comment&lt;/em&gt; state, which is fine as it indicates that she is not a &lt;em&gt;committed reviewer&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;You finally get around to merging in your pull request when you notice that Mary has added herself as a reviewer. She decided to give your pull request a complete review now as a committed reviewer. The intent was communicated through the request review.&lt;/p&gt;

&lt;p&gt;&lt;img width="280" height="190" src="/images/2017-03-28-cut-code-review-noise-on-github/reviewers-state-6.png" /&gt;&lt;/p&gt;

&lt;p&gt;Even though you got two approvals, you know that Mary is committed to reviewing your pull requests. At this point you wait for her results as to not waste her time, or to potentially miss any issues she might raise.&lt;/p&gt;

&lt;p&gt;&lt;img width="280" height="190" src="/images/2017-03-28-cut-code-review-noise-on-github/reviewers-state-7.png" /&gt;&lt;/p&gt;

&lt;p&gt;Everything looks great. You have approvals across the board, so hit that merge button!&lt;/p&gt;

&lt;h2&gt;Less Noise and Wasted Time&lt;/h2&gt;

&lt;p&gt;A couple of things you might have noticed as we ran through that code review scenario:&lt;/p&gt;

&lt;p&gt;No unnecessary commenting on the pull request to indicate that an individual has acknowledged something. GitHub Reactions provide an unobtrusive way for an individual to express themselves. Often reactions are replacing low-value comments (i.e,. &lt;em&gt;+1&lt;/em&gt;, &lt;em&gt;LGTM&lt;/em&gt;, &lt;em&gt;awesome!&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;No unnecessary &lt;em&gt;@mention&lt;/em&gt; comments to indicate that someone should review the pull request. In the past, we would have &lt;em&gt;@mention&lt;/em&gt; possible reviewers in the description or as comments in the pull request. The reviewers are now clearly indicated in the reviewers section of the pull request.&lt;/p&gt;

&lt;p&gt;No unnecessary &lt;em&gt;@mention&lt;/em&gt; is needed to indicate a reviewer&amp;rsquo;s request for change has been addressed. Previously, it was common to &lt;em&gt;@mention&lt;/em&gt; a reviewer when their concerns were addressed, thus causing noise with comments.&lt;/p&gt;

&lt;p&gt;With the above points on &lt;em&gt;@mention&lt;/em&gt; you could also factor in that this communication could have been in chat (public channels or privately).&lt;/p&gt;

&lt;p&gt;Another scenario that we have encountered in the past is that the reviewer would come back preemptively to review the pull request as they noticed new commits. The problem is that sometimes new changes are still being worked on and pushed up incrementally. This can potentially waste the reviewer&amp;rsquo;s time as they have to look over more changes soon after.&lt;/p&gt;

&lt;p&gt;As a reviewer, you know that you will receive a notification via GitHub when your attention is needed for a pull request. It also becomes easier to scan pull requests for where your action is required.&lt;/p&gt;

&lt;h1&gt;Dealing with Notifications&lt;/h1&gt;

&lt;p&gt;There are a couple of options when dealing with notifications surrounding GitHub:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Built-in web notification&lt;/li&gt;
&lt;li&gt;Email notifications&lt;/li&gt;
&lt;li&gt;Third-party application (depends on operating system)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I personally never got much benefit from the web notification, however, this could just be how I consume information. Without an actual notification appearing in my notification center (macOS), information doesn&amp;rsquo;t reach me well.&lt;/p&gt;

&lt;p&gt;Email notifications are currently my preferred approach, as I can receive request review notifications via email. In addition, with email you can get fancy with filters to further reduce notification to only what you want.&lt;/p&gt;

&lt;p&gt;I use &lt;a href="https://ptsochantaris.github.io/trailer/"&gt;Trailer.app&lt;/a&gt; in addition to email. With Trailer I am able to target specific repositories for native notification. Prior to review requests, this would have been my ideal approach for dealing with notifications at my work machine. There is active development to support the recent addition of GitHub review requests and reactions.&lt;/p&gt;

&lt;p&gt;Regardless of delivery mechanism, take some time to figure how to deal with notifications. Each user will have different needs. For my case, I&amp;rsquo;m really only interested in emails about &lt;em&gt;Comments on Issues and Pull Requests&lt;/em&gt; and &lt;em&gt;Pull Request reviews&lt;/em&gt; on my &lt;em&gt;Participated Conversations&lt;/em&gt; (configured via &lt;a href="https://github.com/settings/notifications"&gt;GitHub&amp;rsquo;s Notifications&lt;/a&gt;).&lt;/p&gt;

&lt;h1&gt;Keeping it all in GitHub&lt;/h1&gt;

&lt;p&gt;Going back to the above scenario, no use of direct form of communication was used to facilitate the code review, everything was kept within GitHub. Of course, deeper discussions should use those mediums, but the key is that the coordination of the code review was kept entirely in the GitHub platform. This reduces chatter and noise that we receive throughout the day, and keeps the GitHub pull request succinct.&lt;/p&gt;

&lt;p&gt;Using review requests clearly states the next action for the reviewer and author. With both parties actively using the provided utilities in GitHub, code review collaboration becomes much more manageable.&lt;/p&gt;

&lt;hr&gt;

&lt;h1&gt;TL;DR&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;The idea is to reduce the unnecessary noise within a pull request using GitHub&amp;rsquo;s features.&lt;/li&gt;
&lt;li&gt;GitHub review requests keep state of each reviewer during the code review process.&lt;/li&gt;
&lt;li&gt;Make use of re-requesting a review when you have addressed a reviewer&amp;rsquo;s concerns.&lt;/li&gt;
&lt;li&gt;Make use of reactions to acknowledge a comment if possible.&lt;/li&gt;
&lt;li&gt;Be aware of committed reviewers and ensure everyone knows of their roles.&lt;/li&gt;
&lt;li&gt;Ensure that all committed reviewers have approved the pull request before merging.&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Find and Bury Dead Code</title>
    <link rel="alternate" href="https://kevinjalbert.com/find-and-bury-dead-code/"/>
    <id>https://kevinjalbert.com/find-and-bury-dead-code/</id>
    <updated>2017-06-30T13:18:17-04:00</updated>
    <published>2017-02-26T18:53:20-05:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">Dead code has no reason to be in a project. Dead code wastes a developerâ€™s time and energy. Going from this it makes sense to remove the dead code and put it rest with a delete keystroke. The main problem is how to identify dead code in a living project?</description>
    <content type="html">&lt;p&gt;Dead code has no reason to be in a project. When you know itâ€™s there, it simply nags at you to be removed. Sometimes you arenâ€™t even sure that you have dead code. It might just be the case that every line of your codebase is being executed, which if true is great! The other scenario is that there is some dead code wasting developersâ€™ time as they maintain it and work with it.
Going from this it makes sense to remove the dead code and put it rest with a delete keystroke. The main problem is how to identify dead code in a living project?&lt;/p&gt;

&lt;h1&gt;Finding Dead Code&lt;/h1&gt;

&lt;p&gt;In smaller projects, itâ€™s possible to simply see and know what is dead code just from the usage and familiarity you might have with the project. Within larger projects, identifying dead code is not as straight forward. Luckily, we have tools and systems that can aid us. For the most part, we will be looking at this problem from a dynamic language perspective, primarily Ruby.&lt;/p&gt;

&lt;h2&gt;Static Analysis Tools&lt;/h2&gt;

&lt;p&gt;Static analysis tools do not run the application and only examine the source code itself. A general property of these tools is the speed and ease of use, although they come at a price of precision (i.e., missing and incorrect results). Iâ€™ll will first present a Ruby specific tool called &lt;strong&gt;&lt;em&gt;debride&lt;/em&gt;&lt;/strong&gt; and then a language agnostic tool called &lt;strong&gt;&lt;em&gt;unused&lt;/em&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/seattlerb/debride"&gt;&lt;strong&gt;&lt;em&gt;debride&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;â€Š&amp;ndash;â€ŠThis tool analyzes your Ruby source code and detects uncalled or dead methods. It knows of Ruby on Rails method definitions, as they are not defined in your codebase. In addition, you can provide a whitelist of methods that you know should not be flagged by the tool. This is a specific tool that is tailored to work on Ruby and Rails projects.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/joshuaclayton/unused"&gt;&lt;strong&gt;&lt;em&gt;unused&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; &amp;ndash; This tool is language agnostic. It first requires a &lt;a href="http://ctags.sourceforge.net/"&gt;&lt;em&gt;ctags&lt;/em&gt;&lt;/a&gt; file for your project, containing all the project class/method definitions and their locations. With this, &lt;em&gt;unused&lt;/em&gt; is able to scan through your project using &lt;a href="https://github.com/ggreer/the_silver_searcher"&gt;&lt;em&gt;ag&lt;/em&gt;&lt;/a&gt; for statements calling these definitions. Throughout the search, if no usage of the class/method definition is found, then that code is probably unused. In addition, there is a configuration file for further customization to reduce false positives.&lt;/p&gt;

&lt;p&gt;With both of these static analysis tools, there is a precision issue of whether or not the detected code is actually used during the execution of your project. This does not strum up immediate confidence in the results and often requires deeper investigation. Another large concern when dealing with dynamic language is class/method defined at runtime or methods that are invoked via meta programming.&lt;/p&gt;

&lt;h2&gt;Dynamic Analysis Tools&lt;/h2&gt;

&lt;p&gt;Dynamic analysis tools, unlike their static counterparts, actually need to run the source code. A general property of these tools is that they provide richer and more accurate results, although at the cost of performance (i.e., slower due to measuring at runtime). Iâ€™ll present first a Ruby specific tool called &lt;strong&gt;&lt;em&gt;coverband&lt;/em&gt;&lt;/strong&gt; and then a language agnostic tool called &lt;strong&gt;&lt;em&gt;scythe&lt;/em&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/danmayer/coverband"&gt;&lt;strong&gt;&lt;em&gt;coverband&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;â€Š&amp;ndash;â€ŠThe approach that &lt;em&gt;coverband&lt;/em&gt; uses could be applied to other languages, although it is a Ruby specific implementation. This tool borrows the results format of test suite coverage (i.e., how much code is exercised by your test suite), however it measures code coverage during the runtime of your application. A nice use case that &lt;em&gt;coverband&lt;/em&gt; accounts for is multiple instances of your application, it uses a &lt;em&gt;redis&lt;/em&gt; instance to hold the coverage results. There is some performance cost for using &lt;em&gt;coverband&lt;/em&gt;, as it records each line executed. If you are measuring a web application, the tool allows you to instrument a percentage of your requests. The coverage information keeps tracks of the number of times each line is hit, and this can indicate hot spots in your application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/michaelfeathers/scythe"&gt;&lt;strong&gt;&lt;em&gt;scythe&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;â€Šâ€”â€ŠThe approach that &lt;em&gt;scythe&lt;/em&gt; uses is language agnostic. The basic idea is to place probes within your source code that when triggered, record the date and time to a file matching the probeâ€™s  name. At its heart, &lt;em&gt;scythe&lt;/em&gt; is a command-line utility that reports on these files, giving you an indication of how long since the probe was last called. Currently, there are probe implementations for Java, Python and Ruby. Due to the simple contract (files which are updated when probes are triggered), it is not difficult to make &lt;em&gt;scythe&lt;/em&gt; work for other languages. The overhead using the probes is minimal and can be placed anywhere in your source code. Unfortunately, we have to use a manual process in placing and inspecting the probes.&lt;/p&gt;

&lt;p&gt;Both of the above tools took different approaches for dead code identification. In either case, the underlying source code must be executed, and usually there is setup required for the tool to work in conjunction with the running application.&lt;/p&gt;

&lt;h1&gt;Burying the Dead&lt;/h1&gt;

&lt;p&gt;Now that we know that there is a class of tools for detecting dead code, the next set of questions revolve around removing the dead code.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The tool indicates this code is dead. Can we remove it?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Recall that static vs. dynamic analysis can inspire different levels of confidence. Tools like &lt;em&gt;scythe&lt;/em&gt; or &lt;em&gt;coverband&lt;/em&gt; actually determine whether the source code in question was executed in a real environment. The problem is whether or not the tool collected enough data during execution to ensure the code in question could have been ran. It is hard to know whether or not flagged dead code is just code that is rarely ran, but still alive.&lt;/p&gt;

&lt;p&gt;With sufficient time, it should be possible to make the decision to remove the dead code. As with any change, be observant to any signals that could indicate that the removal was of live code. Given the complex scope of usage, it can be difficult to detect dead code if there are third parties using your codebase. A side bonus of removing dead code, is that any associated tests can be removedâ€Š&amp;ndash;â€Šeffectively speeding up your test suite.&lt;/p&gt;

&lt;h1&gt;Moving on&lt;/h1&gt;

&lt;p&gt;By removing dead code the scale of the source code shrinks ever so slightly. There is little to no point in having extra code in your project if it does not add value. There is possible arguments that if it works, there is no need to change it. I would counter that by saying that keeping dead code around is lugging around a mental burden that developers have to deal with. Dead code wastes a developerâ€™s time and energy. Imagine having to upgrade a dependency and making changes in dead codeâ€Š&amp;ndash;â€Šwhat a waste.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Dead code wastes a developerâ€™s time and energy.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Do be aware that there is some initial time investment in getting a system in place and learning how to identify dead code in your specific projects. In the long run, however, it is bound to save headaches in a long running project.&lt;/p&gt;

&lt;hr&gt;

&lt;h1&gt;TL;DR&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Dead code is code that is never exercised during the execution of the application.&lt;/li&gt;
&lt;li&gt;Two types of tools exist for finding dead code: Static and Dynamic analysis tools

&lt;ul&gt;
&lt;li&gt;Dead code static analysis tools observe the source code and attempt to deduce methods that are never used.&lt;/li&gt;
&lt;li&gt;Dead code dynamic analysis tools instrument the running state of the source code and record what is executed.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Only remove dead code when you are confident that it is no longer used (deeper investigation and/or let dynamic analysis tools run for longer).&lt;/li&gt;
&lt;li&gt;Less code relieves mental burden, and reduces time wasted while working in a codebase.&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Simplify the Styles, Drop the Distractions</title>
    <link rel="alternate" href="https://kevinjalbert.com/simplify-the-styles-drop-the-distractions/"/>
    <id>https://kevinjalbert.com/simplify-the-styles-drop-the-distractions/</id>
    <updated>2017-06-30T13:18:17-04:00</updated>
    <published>2017-01-31T18:53:20-05:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">During development, everyone has a preference of coding style. For the most part these preferences have no effect on the functionality of the application. It is possible that they can become a large time sink, especially in larger teams and projects. In this article we will determine how minor style differences cause negative effects, and how we can mitigate them.</description>
    <content type="html">&lt;p&gt;Everyone has preferences in how code should be structured from an aesthetic standpoint. Having creative freedom in finding your own style is a powerful and rewarding feeling. Seeing that new class/file completely written in your style can put a smile on your face. The problem is we&amp;rsquo;re often not the only developer on a project. In a team or open-source environment, it is unlikely that &lt;em&gt;everyone&lt;/em&gt; is on board with the exact coding style. It is not uncommon to see different styles in a project just because everyone has their own.&lt;/p&gt;

&lt;h1&gt;Why Care?&lt;/h1&gt;

&lt;p&gt;You might be asking &lt;em&gt;&amp;ldquo;Why Care?&amp;rdquo;&lt;/em&gt; about styles. As developers, we want to enjoy working in our codebase. If we&amp;rsquo;re constantly dealing with inconsistent styles, it becomes a mental burden. Also, during code reviews everyone might be imposing their own styles on the reviewed code. After all is said and done, it really comes down to dropping the distractions in a codebase. With a consistent style there are no stylistic arguments in code reviews, and readability increases as the taxing effort of dealing with multiple styles in the same file disappears.&lt;/p&gt;

&lt;p&gt;The following is an extreme case of stylistic inconsistencies with two functionally identical code snippets &amp;ndash; one follows a styleguide while the other does not.&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="cm"&gt;=begin
This method checks if the two args are equal
it then returns the combined value
=end&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;method_one&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;first_arg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;second_arg&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Executing method_one"&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;first_arg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;eql?&lt;/span&gt; &lt;span class="n"&gt;second_arg&lt;/span&gt;
          &lt;span class="nb"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'first_arg is the same as second_arg'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_arg&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;second_arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# This method checks if the two args are equal&lt;/span&gt;
&lt;span class="c1"&gt;# it then returns the combined value&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;method_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_arg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;second_arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'Executing method_one'&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;first_arg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;eql?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;second_arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s1"&gt;'first_arg is the same as second_arg'&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;first_arg&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;second_arg&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hopefully, you found the second snippet more pleasant and easier to read. The second one follows a styleguide while the first one had a mis-match of style.&lt;/p&gt;

&lt;h1&gt;Starting with Styles&lt;/h1&gt;

&lt;p&gt;&lt;img alt="Mixing tabs and spaces" width="717" height="325" src="/images/2017-01-31-simplify-the-styles-drop-the-distractions/tabs-spaces-both.png" /&gt;
&lt;em&gt;[Image from the &lt;a href="http://www.emacswiki.org/emacs/TabsSpacesBoth"&gt;EmacsWiki&lt;/a&gt;, original comic by &lt;a href="http://www.duelinganalogs.com/comic/2007/04/02/hello-im-linux/"&gt;Steve Napierski&lt;/a&gt;]&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Many basic style decisions are made early when a project is started. One of two things happen:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Styles are &lt;strong&gt;implicitly determined&lt;/strong&gt; by the creator&lt;/li&gt;
&lt;li&gt;Styles are &lt;strong&gt;explicitly established&lt;/strong&gt; upfront by the creator or collaborators&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Even if the project starts with an implicit determined style, the end goal is to make it explicit. The more people that contribute to a project, the more chance their coding styles will conflict. Also, your personal coding style evolves over time and it is likely that styles within a project will &lt;em&gt;drift&lt;/em&gt;, even with a single contributor.&lt;/p&gt;

&lt;p&gt;To reduce wasted time dealing with style issues, just explicitly set a style for your project.&lt;/p&gt;

&lt;h2&gt;Picking an Explicit Style&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m willing to bet that all languages have community styleguides (if not, then that&amp;rsquo;s a great opportunity to start one!). The following are some example styleguides:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;Python - PEP8 Styleguide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bbatsov/ruby-style-guide"&gt;Ruby - Community Styleguide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/airbnb/javascript"&gt;Javascript - Airbnb Styleguide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://google.github.io/styleguide/jsguide.html"&gt;Javascript - Google Styleguide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When picking a type of style, I recommend to just pick one of the already established styleguides. You might be tempted to start completely fresh and make your own styleguide individually or with other contributors. The problem with creating a fresh styleguide is that eventually there will be the discussion, &lt;em&gt;&amp;ldquo;I want the style to look like this&amp;rdquo;&lt;/em&gt;, and there will be time wasted trying to make everyone happy (which possibly will never happen). When new developers get started in a codebase they might say, &lt;em&gt;&amp;ldquo;Why do we have the style like this?&amp;rdquo;&lt;/em&gt;. This leads to a discussion regarding whether or not the styleguide should be revised, which again is a potential waste of time.&lt;/p&gt;

&lt;p&gt;You can deflect all styleguide questions if you just select a community styleguide to begin with. These styleguides have already gone through rigorous discussions within the community. One more bonus of using a popular styleguide is that it is likely that other open-source projects are using the same styleguide.&lt;/p&gt;

&lt;h2&gt;Using Linters&lt;/h2&gt;

&lt;p&gt;Linters are styleguide checkers that often provide a command line interface and editor integrations. Like previously mentioned with styleguides, there is probably one for each language (if not, what a great opportunity!). The following are some example linters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://batsov.com/rubocop/"&gt;Ruby - Rubocop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://eslint.org/"&gt;Javascript - ESLint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stylelint.io/"&gt;CSS/SCSS/LESS - Stylelint&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A styleguide and linter work hand-in-hand. Together they ensure that code that violates the styleguide is flagged before it is committed to the codebase. There really is no downside to using a linter, and in most cases the benefits far outweigh the effort to set up in your editor. I highly recommend that everyone takes advantage of linters within your editor.&lt;/p&gt;

&lt;h2&gt;Deviating from the Styleguides&lt;/h2&gt;

&lt;p&gt;If your team is completely set on having customized styles that differ from a popular styleguide, I would still encourage using one as a base. In an ideal scenario it is possible to use inheritance, where you can then inherit the rules from your choice of popular styleguide. If this isn&amp;rsquo;t possible, then the next best option is to simply copy the whole guide and use that as your base and make modifications to it.&lt;/p&gt;

&lt;p&gt;Each styleguide/linter has their own implementation and handling of their configurations. You will have to explore each and see how to deal with the inheritance. For example, &lt;a href="http://eslint.org/docs/user-guide/configuring#extending-configuration-files"&gt;ESLint&lt;/a&gt; and &lt;a href="http://rubocop.readthedocs.io/en/latest/configuration/#inheritance"&gt;Rubocop&lt;/a&gt; define how to extend/inherit from other styleguides.&lt;/p&gt;

&lt;h2&gt;Reduce the Distractions&lt;/h2&gt;

&lt;p&gt;Using a styleguide and linter, it becomes easy to identify and cut off the distractions of inconsistent styles early. If you can fix stylistic changes as you modify the underlying code, then the future you or your teammates won&amp;rsquo;t have to deal with it later. In addition, during code reviews everyone knows that all stylistic changes &lt;em&gt;should&lt;/em&gt; be taken care of, thus reducing the mental burden.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Just use a styleguide!" width="1480" height="517" src="/images/2017-01-31-simplify-the-styles-drop-the-distractions/xkcd-code-quality.png" /&gt;
&lt;em&gt;[Image from &lt;a href="https://xkcd.com/1513/"&gt;xkcd&lt;/a&gt;]&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;Applying to an Existing Project&lt;/h1&gt;

&lt;p&gt;It&amp;rsquo;s great that you want to get a consistent style in an existing project. Now comes an important decision, &lt;em&gt;&amp;ldquo;Do we apply all the style fixes immediately, or as we encounter them?&amp;rdquo;&lt;/em&gt; The answer is situational and many factors can influence what works best for your project and team.&lt;/p&gt;

&lt;p&gt;With a sweeping change, a lot of code might be modified, although nothing should be functionally different, as we are just dealing with stylistic edits. This can impact the effectiveness of &lt;code&gt;git blame&lt;/code&gt; as the latest commit might simply be &lt;em&gt;&amp;ldquo;Sweeping Style Changes&amp;rdquo;&lt;/em&gt;, and not the actual commit you were hoping for. Fortunately, there are ways to look deeper into the &lt;code&gt;git log&lt;/code&gt; and find the actual content you are looking for (i.e., &lt;a href="/git-evolution-how-did-we-get-here/"&gt;Git Evolution&lt;/a&gt;). With a sweeping change of style fixes, the project afterwards would be in a consistent state of styles.&lt;/p&gt;

&lt;p&gt;By fixing style issues as you encounter them, it leaves a lot to interpretation by team members. &lt;em&gt;&amp;ldquo;Do I fix the whole file when I touch a line within it?&amp;rdquo;&lt;/em&gt;, &lt;em&gt;&amp;ldquo;Do I only fix styles for the lines I touch?&amp;rdquo;&lt;/em&gt;. In either case the commits will contain two concepts now going forward: feature/bug changes and style changes. Not only does this muddy the usefulness of looking back in the commit history, but code reviews now also contain the style element that everyone has to look at. Overall, the distractions of incrementally dealing with style changes never stop. Even while editing or reading the codebase you will subconsciously see the inconsistent style changes which leads to more distractions.&lt;/p&gt;

&lt;p&gt;In my personal opinion, rip the band-aid off and just make a sweeping change of style fixes to put your project in a pristine state. In a legacy system, it might make sense to simply do the incremental approach as it would not be often that one would make changes in the battle-tested system.&lt;/p&gt;

&lt;h1&gt;TL;DR&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Use a styleguide and linter for any software project to help reduce distractions on styles:

&lt;ul&gt;
&lt;li&gt;If possible pick a popular styleguide to avoid arguments/discussions on styles.&lt;/li&gt;
&lt;li&gt;Use a linter in your editor to cut off stylistic distractions early (i.e., before code reviews).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The sooner a project completely adheres to the styleguide:

&lt;ul&gt;
&lt;li&gt;The less stylistic distractions are encountered while reading through the codebase, and&lt;/li&gt;
&lt;li&gt;The less work in keeping up the proper styles.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;If possible, use a sweeping approach to applying style fixes:

&lt;ul&gt;
&lt;li&gt;The minimal impact on &lt;code&gt;git blame&lt;/code&gt; can be resolved with proper tools.&lt;/li&gt;
&lt;li&gt;Opposed to using the incremental style of fixes, the distractions are reduced within code reviews and edits.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Information at a Glance: RailsRequestStats</title>
    <link rel="alternate" href="https://kevinjalbert.com/information-at-a-glance-rails-request-stats/"/>
    <id>https://kevinjalbert.com/information-at-a-glance-rails-request-stats/</id>
    <updated>2017-06-30T13:18:17-04:00</updated>
    <published>2016-12-21T18:53:20-05:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">RailsRequestStats provides a simple drop-in solution to expose more statistics on requests. New information is presented in your development logs, supplying you with the required information to iteratively optimize requests by noticing subtle changes in the number of queries and average runtimes.</description>
    <content type="html">&lt;p&gt;I developed &lt;a href="https://github.com/kevinjalbert/rails_request_stats"&gt;rails_request_stats&lt;/a&gt; to solve a personal problem of mine while optimizing certain Rails API endpoints at work. It provided me a quick way to get the required information at a glance in development logs.&lt;/p&gt;

&lt;p&gt;To best describe what and how &lt;code&gt;rails_request_stats&lt;/code&gt; can be used the, following comes directly from &lt;code&gt;rails_request_stats&lt;/code&gt;&amp;rsquo;s &lt;a href="https://github.com/kevinjalbert/rails_request_stats#railsrequeststats"&gt;README&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;During development have you ever:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Wondered how many SQL queries occurred during a request?&lt;/li&gt;
&lt;li&gt;Been curious on average view and database runtime for a request?&lt;/li&gt;
&lt;li&gt;Wanted a report containing overall statistics of all unique requests?&lt;/li&gt;
&lt;li&gt;Wanted a better way to iteratively optimize requests?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;RailsRequestStats&lt;/code&gt; provides a simple drop-in solution to expose more statistics on requests. New information is presented in your development logs, supplying you with the required information to iteratively optimize requests by noticing subtle changes in the number of queries and average runtimes.&lt;/p&gt;

&lt;h1&gt;How this Works&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;RailsRequestStats::NotificationSubscribers&lt;/code&gt; when required will subscribe to the &lt;code&gt;sql.active_record&lt;/code&gt;, &lt;code&gt;start_processing.action_controller&lt;/code&gt;, and &lt;code&gt;process_action.action_controller&lt;/code&gt; &lt;code&gt;ActionSupport::Notifications&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;sql.active_record&lt;/code&gt; event allow us to count each SQL query that passes though ActiveRecord, which we count internally.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;cache_read.active_support&lt;/code&gt; event allows us to count each read and hit to the Rails cache.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;cache_fetch_hit.active_support&lt;/code&gt; event allows us to count the cache hits to the Rails cache when using &lt;em&gt;fetch&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;start_processing.action_controller&lt;/code&gt; event allows us to clear internal counts, as well as perform a &lt;code&gt;GC.start&lt;/code&gt; and capturing the count of objects residing in the &lt;code&gt;ObjectSpace&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;process_action.action_controller&lt;/code&gt; event provides us runtime information along with identifying controller action details, we even determine the number of generated objects since the start of processing the action. At this point we are able to synthesis the query information and runtime information and store them internally in running collection of &lt;code&gt;RailsRequestStats::RequestStats&lt;/code&gt; objects.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; the data collection is tracked and stored in class-level instance variables. Thus this is not threadsafe, as no concurrency mechanisms are used (i.e., mutex). For non-threaded and forking application servers this should be fine.&lt;/p&gt;

&lt;h1&gt;Installation&lt;/h1&gt;

&lt;p&gt;Add this line to your application&amp;rsquo;s Gemfile:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;'rails_request_stats'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;group: :development&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;Example Outputs&lt;/h1&gt;

&lt;p&gt;Within the console ./log/development.log you should start seeing the following statement appearing at the end of processing a request:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[RailsRequestStats] (AVG view_runtime: 163.655ms | AVG db_runtime: 15.465ms | AVG generated_object_count: 14523 | query_count: 9 | cached_query_count: 0 | cache_read_count: 3 | cache_hit_count: 3)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally when you exit the application&amp;rsquo;s server, you should see a summary report of all the data captured:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[RailsRequestStats] INDEX:html "/users" (AVG view_runtime: 128.492ms | AVG db_runtime: 9.186ms | AVG generated_object_count: 25529 | MIN query_count: 8 | MAX query_count: 9) from 4 requests
[RailsRequestStats] SHOW:html "/users/2" (AVG view_runtime: 13.0429ms | AVG db_runtime: 1.69033ms | AVG generated_object_count: 14523 | MIN query_count: 2 | MAX query_count: 2) from 3 requests
[RailsRequestStats] SHOW:html "/users/2?test=1&amp;amp;blah=2" (AVG view_runtime: 17.8252ms | AVG db_runtime: 1.621ms | AVG generated_object_count: 18511 | MIN query_count: 2 | MAX query_count: 2) from 1 requests
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;Customizing Outputs&lt;/h1&gt;

&lt;h2&gt;Memory Stats&lt;/h2&gt;

&lt;p&gt;By setting the following class variable within in an initializer (&lt;code&gt;./config/initializers/rails_request_stats.rb&lt;/code&gt;):&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;RailsRequestStats&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Report&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;print_memory_stats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see the &lt;em&gt;generated objects&lt;/em&gt; within the &lt;code&gt;ObjectSpace&lt;/code&gt; for individual requests:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[RailsRequestStats] (AVG view_runtime: 93.7252ms | AVG db_runtime: 8.66075ms | AVG generated_object_count: 125282 | query_count: 8 | cached_query_count: 0 | cache_read_count: 3 | cache_hit_count: 3 | generated_objects: {:total_generated_objects=&amp;gt;111878, :object=&amp;gt;921, :class=&amp;gt;35, :module=&amp;gt;0, :float=&amp;gt;0, :string=&amp;gt;49501, :regexp=&amp;gt;1556, :array=&amp;gt;17855, :hash=&amp;gt;2087, :struct=&amp;gt;103, :bignum=&amp;gt;0, :file=&amp;gt;0, :data=&amp;gt;37682, :match=&amp;gt;373, :complex=&amp;gt;0, :node=&amp;gt;1688, :iclass=&amp;gt;0})
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Override Reports&lt;/h2&gt;

&lt;p&gt;You can manually override the output by monkey-patching in an initializer (&lt;code&gt;./config/initializers/rails_request_stats.rb&lt;/code&gt;):&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;RailsRequestStats&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Report&lt;/span&gt;
    &lt;span class="c1"&gt;# Called after every request&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;report_text&lt;/span&gt;
      &lt;span class="c1"&gt;# Access to @request_stats (instance of RequestStats)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="c1"&gt;# Called after the application server is closed (via #at_exit_handler)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;exit_report_text&lt;/span&gt;
      &lt;span class="c1"&gt;# Access to @request_stats (instance of RequestStats)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NotificationSubscribers&lt;/span&gt;
    &lt;span class="c1"&gt;# Called when the application server is closed&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;at_exit_handler&lt;/span&gt;
      &lt;span class="c1"&gt;# Access to @requests (hash of { &amp;lt;paths&amp;gt; =&amp;gt; RequestStats })&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;Reflections&lt;/h1&gt;

&lt;p&gt;I have personally been using &lt;code&gt;RailsRequestStats&lt;/code&gt; at work since its inception. Reception has been quite good, it has little impact and simply provides extra information at a glance to developers during day-to-day work. I will mention that &lt;a href="https://github.com/MiniProfiler/rack-mini-profiler"&gt;rack-mini-profiler&lt;/a&gt; is an excellent gem, and kind of inspired my creation of this gem. I couldn&amp;rsquo;t find a good way to get the information I wanted when dealing with API endpoints, with &lt;code&gt;RailsRequestStats&lt;/code&gt; I was able to simply output it in the logs.&lt;/p&gt;

&lt;p&gt;In the future I might add more &lt;a href="https://github.com/kevinjalbert/rails_request_stats/issues/4"&gt;detailed memory reports&lt;/a&gt;. I also have to verify that it continues to work in Rails 5 where the default webserver is &lt;a href="http://puma.io/"&gt;Puma&lt;/a&gt; which is a concurrent webserver. This could pose issue as information is stored in class instance variable and are modified at various parts of a requests life cycle.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Deploying my Website to GitHub Pages</title>
    <link rel="alternate" href="https://kevinjalbert.com/deploying-my-website-to-github-pages/"/>
    <id>https://kevinjalbert.com/deploying-my-website-to-github-pages/</id>
    <updated>2017-06-30T13:18:17-04:00</updated>
    <published>2016-11-28T18:53:20-05:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">A little history on my website, and the underlying framework I have used -- Middleman. I walkthrough the process on how I deploy the website to GitHub pages using a deployment script.</description>
    <content type="html">&lt;h1&gt;History of my Website&lt;/h1&gt;

&lt;p&gt;Let&amp;rsquo;s look back at my website back in early &lt;a href="https://web.archive.org/web/20120122125850/http://kevinjalbert.com/"&gt;2012&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It was built using &lt;a href="http://nanoc.ws/"&gt;nanoc&lt;/a&gt; as I was learning and enjoying using ruby. This static site generator seemed like a great tool when I started. It gave me a lot of control as I was able to write &lt;a href="https://github.com/kevinjalbert/website/blob/master/lib/helpers/custom_helper.rb"&gt;custom ruby helpers&lt;/a&gt; to assist in generating the website.&lt;/li&gt;
&lt;li&gt;It was focused on showcasing my academic accomplishments such as publications/posters/presentations and projects as I was still in the education system and going down the academia career track.&lt;/li&gt;
&lt;li&gt;The original &lt;a href="https://github.com/kevinjalbert/website"&gt;GitHub repository&lt;/a&gt; for this version of the website still exists, if you were interested in looking at it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After finishing my M.Sc degree I decided to work in industry instead of pursuing a Ph.D. I continued to update the website with minor changes, but for the most part it stagnated over time.&lt;/p&gt;

&lt;h1&gt;Deciding on Middleman&lt;/h1&gt;

&lt;p&gt;I eventually wanted to revamp my website to be more &lt;em&gt;relevant&lt;/em&gt; and decided going with a blog to document my technical endeavors and musings. I retired the old website and built up the new blog from scratch. I look through the &lt;a href="https://www.ruby-toolbox.com/categories/static_website_generation"&gt;Ruby Toolbox&lt;/a&gt; to see the alternatives to nanoc. Top pick seems to be &lt;a href="https://github.com/jekyll/jekyll"&gt;Jekyll&lt;/a&gt;, which is likely contributed to its painless integration with &lt;a href="https://help.github.com/articles/using-jekyll-as-a-static-site-generator-with-github-pages/"&gt;GitHub Pages&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My two main concerns with Jekyll were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The use of &lt;a href="https://jekyllrb.com/docs/templates/"&gt;Liquid Templating&lt;/a&gt; - I was personally not a fan of it.&lt;/li&gt;
&lt;li&gt;To benefit from the tight integration with GitHub, you are restricted to certain &lt;a href="https://pages.github.com/versions/"&gt;Jekyll plugin gems&lt;/a&gt; and no custom plugins.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The second contender is &lt;a href="https://middlemanapp.com/"&gt;Middleman&lt;/a&gt;. Its offering was very similar to nanoc. I decided to give Middleman a spin as it was new and different from nanoc. For hosting I could figure it out later, although I was still leaning towards a manual usage of GitHub Pages as it was a free hosting solution.&lt;/p&gt;

&lt;h1&gt;Deployment Approach&lt;/h1&gt;

&lt;p&gt;With the initial work on the new blog being completed, it was time to handle the deployment of it. As previously mentioned I was still going to use GitHub pages due to its free offering. All the work can be seen in the &lt;a href="https://github.com/kevinjalbert/kevinjalbert.github.io"&gt;kevinjalbert/kevinjalbert.github.io repository&lt;/a&gt;. A few things to note:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;User GitHub Pages at the time was only deployable from the &lt;code&gt;master&lt;/code&gt; branch of the github repository.&lt;/li&gt;
&lt;li&gt;If the website used Jekyll then GitHub would automatically generate the static site and deploy it appropriately.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To accommodate this I decided to treat &lt;code&gt;master&lt;/code&gt; as the holding ground for the generated Middleman output. With respect to where to place the actual Middleman code, I placed everything in a new branch &lt;code&gt;real-master&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After a quick setup on GitHub, anything in the &lt;code&gt;master&lt;/code&gt; branch would be deployed to the public.&lt;/p&gt;

&lt;p&gt;&lt;img alt="GitHub Configuration" width="1940" height="740" src="/images/2016-11-28-deploying-my-website-to-github-pages/github-configuration.png" /&gt;&lt;/p&gt;

&lt;p&gt;To reduce friction in deploying new changes, I created the following &lt;a href="https://github.com/kevinjalbert/kevinjalbert.github.io/blob/424c42a5bd65cefb083a01e49f94cbc2e3a73e82/deploy.rb"&gt;ruby deploy script&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'tmpdir'&lt;/span&gt;

&lt;span class="sb"&gt;`git checkout real-master`&lt;/span&gt;

&lt;span class="n"&gt;current_sha&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sb"&gt;`git rev-parse --short HEAD`&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;strip&lt;/span&gt;

&lt;span class="sb"&gt;`rm -R -f ./bower_components`&lt;/span&gt;
&lt;span class="sb"&gt;`rm -R -f ./build`&lt;/span&gt;

&lt;span class="sb"&gt;`git add -f -A`&lt;/span&gt;

&lt;span class="sb"&gt;`git commit -m "Temp commit"`&lt;/span&gt;

&lt;span class="sb"&gt;`bundle install`&lt;/span&gt;
&lt;span class="sb"&gt;`bower install`&lt;/span&gt;

&lt;span class="sb"&gt;`bundle exec middleman build`&lt;/span&gt;

&lt;span class="no"&gt;Dir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;mktmpdir&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;tmp_dir&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="sb"&gt;`mv ./build/* &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;tmp_dir&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;/`&lt;/span&gt;

  &lt;span class="sb"&gt;`git checkout master`&lt;/span&gt;

  &lt;span class="sb"&gt;`cp CNAME &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;tmp_dir&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;/`&lt;/span&gt;
  &lt;span class="sb"&gt;`cp README.md &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;tmp_dir&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;

  &lt;span class="sb"&gt;`rm -R -f *`&lt;/span&gt;

  &lt;span class="sb"&gt;`cp -r &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;tmp_dir&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;/* ./`&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="sb"&gt;`git add -f -A`&lt;/span&gt;
&lt;span class="sb"&gt;`git commit -m "Update site @ &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt; with &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;current_sha&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sb"&gt;"`&lt;/span&gt;
&lt;span class="sb"&gt;`git push`&lt;/span&gt;

&lt;span class="sb"&gt;`git checkout real-master`&lt;/span&gt;
&lt;span class="sb"&gt;`git clean -df`&lt;/span&gt;

&lt;span class="sb"&gt;`git reset --soft HEAD~1`&lt;/span&gt;
&lt;span class="sb"&gt;`git reset`&lt;/span&gt;

&lt;span class="sb"&gt;`bower install`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, when everything is committed on &lt;code&gt;real-master&lt;/code&gt; and I&amp;rsquo;m ready to deploy I just run &lt;code&gt;ruby deploy.rb&lt;/code&gt;. The following is then carried out:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Ensure that I&amp;rsquo;m on the &lt;code&gt;real-master&lt;/code&gt; git branch&lt;/li&gt;
&lt;li&gt;Remove all the generated directories&lt;/li&gt;
&lt;li&gt;Add everything to a temporary commit&lt;/li&gt;
&lt;li&gt;Install all dependencies needed and build the Middleman website&lt;/li&gt;
&lt;li&gt;Create a temporary directory and put the built website in it along with the &lt;em&gt;CNAME and README.md&lt;/em&gt; files&lt;/li&gt;
&lt;li&gt;Clear the current directory and put everything from the temporary directory (i.e., the build website) into the current directory&lt;/li&gt;
&lt;li&gt;Add everything to git and make a new commit with the current timestamp and git SHA that was used to generate the website&lt;/li&gt;
&lt;li&gt;Push new website changes to &lt;code&gt;master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Checkout &lt;code&gt;real-master&lt;/code&gt; again, clean everything, and reset that temporary commit&lt;/li&gt;
&lt;li&gt;Reinstall dependencies so we are back in a good state&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This results in a &lt;a href="https://github.com/kevinjalbert/kevinjalbert.github.io/commits/master"&gt;formatted commit log&lt;/a&gt; on &lt;code&gt;master&lt;/code&gt; that has snapshots of each deployment of the website.&lt;/p&gt;

&lt;h1&gt;That&amp;rsquo;s All Folks&lt;/h1&gt;

&lt;p&gt;This approach is working well for me at the current moment. I&amp;rsquo;ll probably keep using Middleman for the foreseeable future. I am sure I will go through another phase of redesigning this process, in which I will document yet again.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Sidekiq: Contained Callbacks</title>
    <link rel="alternate" href="https://kevinjalbert.com/sidekiq-contained-callbacks/"/>
    <id>https://kevinjalbert.com/sidekiq-contained-callbacks/</id>
    <updated>2017-06-30T13:18:17-04:00</updated>
    <published>2016-10-31T19:53:20-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">ActiveJob in Rails provides nice benefits. The background queueing gem Sidekiq allows for tailored options that you cannot use with ActiveJob. This post looks at a project's transition from ActiveJob to Sidekiq, and how to fill the missing functionality of ActiveJob Callbacks. By the end, we come up with a way to contain the callback logic to their own modules without modifying the concrete jobs.</description>
    <content type="html">&lt;h1&gt;ActiveSupport Callbacks&lt;/h1&gt;

&lt;p&gt;In my &lt;a href="/lets-pry-into-ruby-objects/"&gt;last post&lt;/a&gt; I touched on &lt;code&gt;pry&lt;/code&gt; and how it helped me verify that my class had &lt;code&gt;around_perform&lt;/code&gt; ActiveSupport Callbacks attached to it. In this post I will delve further into &lt;em&gt;what&lt;/em&gt; I was trying to accomplish.&lt;/p&gt;

&lt;h1&gt;[ActiveJob, Sidekiq] - [ActiveJob]&lt;/h1&gt;

&lt;p&gt;I was working on a Rails 4.2.x project that had background job processing. We used &lt;a href="https://github.com/rails/rails/tree/4-2-stable/activejob"&gt;ActiveJob&lt;/a&gt; as our adapter to our background jobs. Behind the scenes, we were using the &lt;a href="http://sidekiq.org/"&gt;Sidekiq&lt;/a&gt; gem.&lt;/p&gt;

&lt;p&gt;We eventually needed specifics that only native Sidekiq can provide through its &lt;code&gt;sidekiq_options&lt;/code&gt;. These options that Sidekiq provides were something that we didn&amp;rsquo;t need initially. As mentioned in the &lt;a href="https://github.com/mperham/sidekiq/wiki/Active-Job#active-job-introductio://github.com/mperham/sidekiq/wiki/Active-Job#active-job-introduction"&gt;Sidekiq Wiki&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that more advanced Sidekiq features (&lt;code&gt;sidekiq_options&lt;/code&gt;) cannot be controlled or configured via ActiveJob, e.g. saving backtraces.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The time has come to take advantage of powerful sidekiq gems and options, thus we have to switch from ActiveJob to native Sidekiq.&lt;/p&gt;

&lt;h1&gt;ActiveJob&amp;rsquo;s Free Perks&lt;/h1&gt;

&lt;p&gt;ActiveJob provided certain features automatically such as using &lt;a href="http://guides.rubyonrails.org/active_job_basics.html#globalid"&gt;GlobalID&lt;/a&gt; and setting up &lt;a href="http://guides.rubyonrails.org/active_job_basics.html#callbacks"&gt;Callbacks&lt;/a&gt;, amongst others. With a native Sidekiq approach we lose those &lt;em&gt;free&lt;/em&gt; perks.&lt;/p&gt;

&lt;p&gt;The biggest thing we missed was the callbacks, specifically &lt;code&gt;around_perform&lt;/code&gt;. We had several modules that were mixed in to our job classes, with the single responsibility of augmenting the class with callbacks.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;JobMetrics&lt;/span&gt;
  &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;ActiveSupport&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Concern&lt;/span&gt;

  &lt;span class="n"&gt;included&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;around_perform&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;_job&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="no"&gt;MetricsLogger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;timing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metrics_logger_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;metrics_logger_key&lt;/span&gt;
      &lt;span class="vi"&gt;@metrics_logger_key&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="n"&gt;signature&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;underscore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This module is wrapping the actual job&amp;rsquo;s &lt;code&gt;#perform&lt;/code&gt; in a &lt;code&gt;MetricsLogger.timing&lt;/code&gt;. In a future post, I might go into further details about &lt;code&gt;MetricsLogger&lt;/code&gt;, but at its core it records a key/value and sends it off to a log aggregator. The benefit we get from this module is the ability to know timing metrics for jobs based on an identifying signature.&lt;/p&gt;

&lt;p&gt;Moving away from ActiveJob, we need another way to accomplish the same thing (&lt;em&gt;contained callbacks&lt;/em&gt;) with just Sidekiq.&lt;/p&gt;

&lt;h1&gt;Contained Callbacks&lt;/h1&gt;

&lt;p&gt;The goal is to have contained callbacks, which is just a separate module that can be included on jobs that define the required callback. This approach means that little has to change while removing ActiveJob, and we can reuse all our existing contained callbacks.&lt;/p&gt;

&lt;h2&gt;Prepend a Proxy&lt;/h2&gt;

&lt;p&gt;I found out that to make use of &lt;code&gt;ActiveSupport::Callbacks&lt;/code&gt; you have to modify the executed method, which in our case would be the job&amp;rsquo;s &lt;code&gt;#perform&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
  &lt;span class="nf"&gt;def&lt;/span&gt; &lt;span class="n"&gt;perform&lt;/span&gt;
    &lt;span class="n"&gt;run_callbacks&lt;/span&gt; &lt;span class="ss"&gt;:perform&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="c1"&gt;# Actual perform's content here&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I didn&amp;rsquo;t want to modify the &lt;code&gt;#perform&lt;/code&gt; method definitions for all the jobs. So I came up with the solution of using &lt;code&gt;prepend&lt;/code&gt; to slot a proxy in front of the jobs&amp;rsquo; &lt;code&gt;#perform&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;SidekiqCallbacks&lt;/span&gt;
  &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;ActiveSupport&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Concern&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;run_callbacks&lt;/span&gt; &lt;span class="ss"&gt;:perform&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This module then can be prepended into the Sidekiq job classes and the callbacks will be executed &amp;ndash; if they are present. The next task is to support the &lt;code&gt;around_perform&lt;/code&gt; callback.&lt;/p&gt;

&lt;h2&gt;Support Setting and Running Callbacks&lt;/h2&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"active_support/callbacks"&lt;/span&gt;

&lt;span class="c1"&gt;# Following approach used by ActiveJob&lt;/span&gt;
&lt;span class="c1"&gt;# https://github.com/rails/rails/blob/93c9534c9871d4adad4bc33b5edc355672b59c61/activejob/lib/active_job/callbacks.rb&lt;/span&gt;
&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;SidekiqCallbacks&lt;/span&gt;
  &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;ActiveSupport&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Concern&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;respond_to?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:run_callbacks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;run_callbacks&lt;/span&gt; &lt;span class="ss"&gt;:perform&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;ClassMethods&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;around_perform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;blk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;set_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:perform&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:around&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;blk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now &lt;code&gt;SidekiqCallbacks&lt;/code&gt; defines the ability to add callbacks, and they will be executed before &lt;code&gt;#perform&lt;/code&gt; if defined.&lt;/p&gt;

&lt;h2&gt;Wrapping it up&lt;/h2&gt;

&lt;p&gt;The last thing I want to do is to encapsulate this Sidekiq callback logic in its own module that defines the actual callback (i.e., &lt;code&gt;JobMetrics&lt;/code&gt;). To do this, we need to further modify &lt;code&gt;SidekiqCallbacks&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"active_support/callbacks"&lt;/span&gt;

&lt;span class="c1"&gt;# Following approach used by ActiveJob&lt;/span&gt;
&lt;span class="c1"&gt;# https://github.com/rails/rails/blob/93c9534c9871d4adad4bc33b5edc355672b59c61/activejob/lib/active_job/callbacks.rb&lt;/span&gt;
&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;SidekiqCallbacks&lt;/span&gt;
  &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;ActiveSupport&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Concern&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;prepended&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ActiveSupport&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Callbacks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Check to see if we already have any callbacks for :perform&lt;/span&gt;
    &lt;span class="c1"&gt;# Prevents overwriting callbacks if we already included this module (and defined callbacks)&lt;/span&gt;
    &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;define_callbacks&lt;/span&gt; &lt;span class="ss"&gt;:perform&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;respond_to?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:_perform_callbacks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;_perform_callbacks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;present?&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;
      &lt;span class="n"&gt;prepend&lt;/span&gt; &lt;span class="no"&gt;ClassMethods&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;perform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;respond_to?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:run_callbacks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;run_callbacks&lt;/span&gt; &lt;span class="ss"&gt;:perform&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;ClassMethods&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;after_perform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;blk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;set_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:perform&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:after&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;blk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We had to include the &lt;code&gt;self.prepended&lt;/code&gt; so that the job class will have access to the defined methods through the contained callback module. The main thing to note here is that we are including &lt;code&gt;ActiveSupport::Callbacks&lt;/code&gt; on the base object that is prepending this module. We also have to ensure that the callbacks are only defined once (this is where in my &lt;a href="/lets-pry-into-ruby-objects/"&gt;last post&lt;/a&gt; I was using &lt;code&gt;pry&lt;/code&gt; figure why not all my callbacks were defined).&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;JobMetrics&lt;/span&gt;
  &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;ActiveSupport&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Concern&lt;/span&gt;

  &lt;span class="n"&gt;included&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;prepend&lt;/span&gt; &lt;span class="no"&gt;SidekiqCallbacks&lt;/span&gt;

    &lt;span class="n"&gt;around_perform&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;_job&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="no"&gt;MetricsLogger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;timing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metrics_logger_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;metrics_logger_key&lt;/span&gt;
      &lt;span class="vi"&gt;@metrics_logger_key&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="n"&gt;signature&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;underscore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we can see how &lt;code&gt;JobMetrics&lt;/code&gt; has a new &lt;code&gt;prepend SidekiqCallbacks&lt;/code&gt; and that pulls in all the required &lt;code&gt;ActiveSupport::Callback&lt;/code&gt; logic that allows for callbacks to be defined and executed.&lt;/p&gt;

&lt;h1&gt;The Win&lt;/h1&gt;

&lt;p&gt;With this approach, the benefit is that the callback implementation is completely contained within the &lt;code&gt;JobMetrics&lt;/code&gt; module. The &lt;code&gt;SidekiqCallbacks&lt;/code&gt; module provides the missing ActiveJob callback support for &lt;code&gt;around_perform&lt;/code&gt;. It is also possible to add the missing ActiveJob callbacks using this approach.&lt;/p&gt;

&lt;p&gt;In the ending, the concrete job classes just &lt;code&gt;include&lt;/code&gt; the contained callback module (i.e., &lt;code&gt;JobMetrics&lt;/code&gt;). &lt;code&gt;SidekiqCallbacks&lt;/code&gt; is designed to accommodate multiple contained callback modules being included on a single concrete job class.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Let's pry into Ruby Objects</title>
    <link rel="alternate" href="https://kevinjalbert.com/lets-pry-into-ruby-objects/"/>
    <id>https://kevinjalbert.com/lets-pry-into-ruby-objects/</id>
    <updated>2017-06-30T13:18:17-04:00</updated>
    <published>2016-09-30T19:53:20-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">When you are knee deep in Ruby and dealing with objects that you never created it's sometimes a little daunting to trace everything back and figure it all out. Luckly there are a couple techniques in Ruby that can aid you. In particular, pry is an extreamly powerful tool that you should have in your toolbox.</description>
    <content type="html">&lt;h1&gt;Where is my &lt;code&gt;pry&lt;/code&gt;bar?&lt;/h1&gt;

&lt;p&gt;You are probably already familiar with &lt;code&gt;irb&lt;/code&gt;, an &lt;em&gt;interactive Ruby&lt;/em&gt; shell. It is pretty powerful and can help you poke around Ruby. In Rails, you might have had access to &lt;code&gt;byebug&lt;/code&gt; and used it for debugging purposes. This is great and is standard with Rails projects. I do, however, recommend looking at &lt;code&gt;pry&lt;/code&gt;, which is just a bit more powerful in what it can do. We&amp;rsquo;re just going to scratch the surface here.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;gem install pry
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;pry&lt;/code&gt; &lt;a href="https://github.com/pry/pry/wiki"&gt;wiki&lt;/a&gt; is quite detailed with a lot of accompanying resources.&lt;/p&gt;

&lt;h1&gt;Adventure Time! Using &lt;code&gt;pry&lt;/code&gt; to Open Objects&lt;/h1&gt;

&lt;p&gt;We&amp;rsquo;ll use a shortened example that I recently encountered. I was pretty deep in Rails and was dealing with &lt;code&gt;ActiveSupport::Callbacks::CallbackChain&lt;/code&gt; (lets not ask why ;P). I wanted to verify if we have any &lt;code&gt;around_perform&lt;/code&gt; &lt;em&gt;callbacks&lt;/em&gt; set on a particular class. With my trusty &lt;code&gt;pry&lt;/code&gt;, I can inspect what I&amp;rsquo;m working with in more detail.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pry(main)&amp;gt; RandomClass_perform_callbacks
=&amp;gt; #&amp;lt;ActiveSupport::Callbacks::CallbackChain:0x007fdcdddb5b20 @callbacks=nil, @chain=[], @config={:scope=&amp;gt;[:kind]}, @mutex=#&amp;lt;Thread::Mutex:0x007fdcdddb53c8&amp;gt;, @name=:perform&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point we have &lt;code&gt;ActiveSupport::Callbacks&lt;/code&gt; included in our &lt;code&gt;RandomClass&lt;/code&gt;. We also have an empty callback chain.&lt;/p&gt;

&lt;p&gt;I eventually included in a module &lt;code&gt;MagicCallbacks&lt;/code&gt; which defines our &lt;code&gt;around_perform&lt;/code&gt; upon being included. If we were to re-inspect the class, we would see that we have a callback present.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pry(main)&amp;gt; RandomClass.include(MagicCallbacks)
=&amp;gt; RandomClass

pry(main)&amp;gt; RandomClass._perform_callbacks
=&amp;gt; #&amp;lt;ActiveSupport::Callbacks::CallbackChain:0x007fdce2a22b70
 @callbacks=nil,
 @chain=
  [#&amp;lt;ActiveSupport::Callbacks::Callback:0x007fdce2a22cd8
    @chain_config={:scope=&amp;gt;[:kind]},
    @filter=#&amp;lt;Proc:0x007fdce2a22eb8@/Users/jalbert/Projects/example-rails/app/models/concerns/magic_callbacks.rb:7&amp;gt;,
    @if=[],
    @key=70293335906140,
    @kind=:around,
    @name=:perform,
    @unless=[]&amp;gt;],
 @config={:scope=&amp;gt;[:kind]},
 @mutex=#&amp;lt;Thread::Mutex:0x007fdce2a22b20&amp;gt;,
 @name=:perform&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can now see that we have a callback within the &lt;code&gt;@chain&lt;/code&gt; array! Back to the problem at hand, I was interested in programmatically determining if the class had any callbacks defined.&lt;/p&gt;

&lt;p&gt;As I was working with an unfamiliar object, I reached for my trusty &lt;code&gt;pry&lt;/code&gt;. I can use &lt;code&gt;ls&lt;/code&gt; on &lt;em&gt;any&lt;/em&gt; object and see a listing of methods and where they come from.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pry(main)&amp;gt; ls RandomClass._perform_callbacks
Enumerable#methods:
  all?     chunk        collect_concat  detect      each_cons   each_with_index   exclude?  find_index  grep      include?  lazy   max      min     minmax_by  partition  reverse_each  slice_before  sort_by  take_while  to_json                                 to_set
  any?     chunk_while  count           drop        each_entry  each_with_object  find      first       grep_v    index_by  many?  max_by   min_by  none?      reduce     select        slice_when    sum      to_a        to_json_with_active_support_encoder     zip
  as_json  collect      cycle           drop_while  each_slice  entries           find_all  flat_map    group_by  inject    map    member?  minmax  one?       reject     slice_after   sort          take     to_h        to_json_without_active_support_encoder
ActiveSupport::Callbacks::CallbackChain#methods: append  clear  compile  config  delete  each  empty?  index  insert  name  prepend
instance variables: @callbacks  @chain  @config  @mutex  @name
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is a lot of information here, but the key points to take away are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Classes/Module/Variables headers are shown in the order of &lt;code&gt;#ancestors&lt;/code&gt;.

&lt;ul&gt;
&lt;li&gt;Sent messages travel up from the bottom to the top until something can &lt;code&gt;#respond_to?&lt;/code&gt; it&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Method and variable names are listed under their owner.

&lt;ul&gt;
&lt;li&gt;This can quickly help you identify methods of interest.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;If a method is redefined in a lower level, it is only shown on the lowest level.

&lt;ul&gt;
&lt;li&gt;For example, a parent class and child class define same method.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also modify the &lt;code&gt;ls&lt;/code&gt; command with modifiers which you can learn more with &lt;code&gt;ls -h&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So we can see here that we have an &lt;code&gt;#empty?&lt;/code&gt; defined under &lt;code&gt;ActiveSupport::Callbacks::CallbackChain#methods&lt;/code&gt;. This sounds great, and my first thoughts is I can use &lt;code&gt;#empty?&lt;/code&gt;. My only concern is what it&amp;rsquo;s &lt;em&gt;actually&lt;/em&gt; checking. Again, &lt;code&gt;pry&lt;/code&gt; to the rescue with &lt;code&gt;show-source&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pry(main)&amp;gt; show-source ActiveSupport::Callbacks::CallbackChain#empty?

From: /Users/jalbert/.rvm/gems/ruby-2.3.0/gems/activesupport-4.2.7.1/lib/active_support/callbacks.rb @ line 529:
Owner: ActiveSupport::Callbacks::CallbackChain
Visibility: public
Number of lines: 1

def empty?;       @chain.empty?; end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we can see the implementation of &lt;code&gt;#empty?&lt;/code&gt; is a one-liner, where it&amp;rsquo;s just calling &lt;code&gt;@chain.empty?&lt;/code&gt;. Sounds legit, but let&amp;rsquo;s go further to verify this.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pry(main)&amp;gt; show-source ActiveSupport::Callbacks::CallbackChain

From: /Users/jalbert/.rvm/gems/ruby-2.3.0/gems/activesupport-4.2.7.1/lib/active_support/callbacks.rb @ line 512:
Class name: ActiveSupport::Callbacks::CallbackChain
Number of lines: 80

class CallbackChain #:nodoc:#
  include Enumerable

  attr_reader :name, :config

  def initialize(name, config)
    @name = name
    @config = {
      :scope =&amp;gt; [ :kind ]
    }.merge!(config)
    @chain = []
    @callbacks = nil
    @mutex = Mutex.new
  end
  ...
  def append(*callbacks)
    callbacks.each { |c| append_one(c) }
  end
  ...
  def append_one(callback)
    @callbacks = nil
    remove_duplicates(callback)
    @chain.push(callback)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yep! Just what I wanted to see. &lt;code&gt;@chain&lt;/code&gt; is just an array to which all the callbacks are appended. So now we can do our check for any callbacks on our class by using &lt;code&gt;!RandomClass._perform_callbacks.empty?&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pry(main)&amp;gt; RandomClass._perform_callbacks.empty?
=&amp;gt; false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A colleague of mine suggested the use of &lt;code&gt;#present?&lt;/code&gt; instead a negative conditional with &lt;code&gt;#empty?&lt;/code&gt;. This is a fair point &amp;ndash; I personally like to avoid negatives in my conditionals. Again, I want to verify it all works as expected with this change.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pry(main)&amp;gt; show-source ActiveSupport::Callbacks::CallbackChain#present?

From: /Users/jalbert/.rvm/gems/ruby-2.3.0/gems/activesupport-4.2.7.1/lib/active_support/core_ext/object/blank.rb @ line 23:
Owner: Object
Visibility: public
Number of lines: 3

def present?
  !blank?
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I can see that &lt;code&gt;#present?&lt;/code&gt; calls &lt;code&gt;!blank?&lt;/code&gt;. Now let&amp;rsquo;s now follow &lt;code&gt;#blank?&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pry(main)&amp;gt; show-source ActiveSupport::Callbacks::CallbackChain#blank?

From: /Users/jalbert/.rvm/gems/ruby-2.3.0/gems/activesupport-4.2.7.1/lib/active_support/core_ext/object/blank.rb @ line 16:
Owner: Object
Visibility: public
Number of lines: 3

def blank?
  respond_to?(:empty?) ? !!empty? : !self
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yep! That works like I suspected it would &amp;ndash; that method chain winds up calling &lt;code&gt;ActiveSupport::Callbacks::CallbackChain#empty?&lt;/code&gt; in the ending.&lt;/p&gt;

&lt;h1&gt;Wrapping up&lt;/h1&gt;

&lt;p&gt;So if you are not using &lt;code&gt;pry&lt;/code&gt;, I highly recommend it. I &lt;em&gt;barely&lt;/em&gt; scratched the surface on what it can do for you. It is a powerful tool that can help in debugging and further digging around your codebase.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Git Evolution: How did we get Here?</title>
    <link rel="alternate" href="https://kevinjalbert.com/git-evolution-how-did-we-get-here/"/>
    <id>https://kevinjalbert.com/git-evolution-how-did-we-get-here/</id>
    <updated>2017-06-30T13:18:17-04:00</updated>
    <published>2016-08-31T19:53:20-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">In a large long-lived git repository there is a lot of history behind the current state of things. git blame lets you scratch the surface, while git log lets you dig deeper. The use of git evolution provides a succient and yet comprhensive approach to understanding the evolution of a range of lines within a git repository.</description>
    <content type="html">&lt;p&gt;As a developer its not uncommon to want a little more context surrounding the code snippet you are dealing with. You might have found yourself in these situations and reached for &lt;code&gt;git blame&lt;/code&gt; to get some initial context in why the code is like it is. This only scratches the surface and you might want a more context which &lt;code&gt;git log&lt;/code&gt; can provide to you. You are mostly interested in how the code evolved to this point, and really want you want is &lt;code&gt;git evolution&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I developed &lt;a href="https://github.com/kevinjalbert/git_evolution"&gt;git_evolution&lt;/a&gt; to solve a personal problem of mine while spelunking in a git repository trying to find more reasons to why the code might have evolved in this way.&lt;/p&gt;

&lt;p&gt;To best describe what and how git evolution can be used the next section (&lt;em&gt;Example Scenario&lt;/em&gt;) comes directly from &lt;code&gt;git_evolution&lt;/code&gt;&amp;rsquo;s &lt;a href="https://github.com/kevinjalbert/git_evolution#example-scenario"&gt;README&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Example Scenario&lt;/h1&gt;

&lt;p&gt;If we were interesting in the source code evolution that lead to &lt;a href="https://github.com/rails/rails/blob/7ba3a48/activesupport/lib/active_support/core_ext/array/access.rb#L70-L75"&gt;rails&amp;rsquo;s Array#forty_two&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git_evolution --range 70:75 ./rails/activesupport/lib/active_support/core_ext/array/access.rb

Commits:
utenmiki &amp;lt;utenmiki@gmail.com&amp;gt; (Thu Oct 31 23:20:15 2013 +0900) - 3f79d8423078f0671c8aa505ae199608d451663d
Add Rdoc document for Array#forty_two

Jeremy Kemper &amp;lt;jeremy@bitsweat.net&amp;gt; (Sat Mar 21 03:26:09 2009 -0700) - 83fd1ae122cf1ee4ea2c52e0bd963462163516ca
Convert array extension modules to class reopens

David Heinemeier Hansson &amp;lt;david@loudthinking.com&amp;gt; (Fri Nov 21 09:06:46 2008 +0100) - e50530ca3ab5db53ebc74314c54b62b91b932389
Reduced the number of literal aliases to the range that has actually seen personal use. With the massive savings in overhead, I was able to fit Array#forty_two

Pratik Naik &amp;lt;pratiknaik@gmail.com&amp;gt; (Sun Oct 5 22:16:26 2008 +0100) - a2932784bb71e72a78c32819ebd7ed2bed551e3e
Merge docrails

Pratik Naik &amp;lt;pratiknaik@gmail.com&amp;gt; (Mon Jul 28 12:26:59 2008 +0100) - 6e754551254a8cc64e034163f5d0dc155b450388
Merge docrails changes

David Heinemeier Hansson &amp;lt;david@loudthinking.com&amp;gt; (Tue Jun 17 13:37:57 2008 -0500) - 22af62cf486721ee2e45bb720c42ac2f4121faf4
Added Array#second through Array#tenth as aliases for Array#[1] through Array#[9] [DHH]

David Heinemeier Hansson &amp;lt;david@loudthinking.com&amp;gt; (Tue Nov 27 19:42:30 2007 +0000) - 4d177ae0d6d9f60c4000f45fb6f6df27317afbff
Added Array#from and Array#to that behaves just from String#from and String#to [DHH]

--------------------------------------------------------------------------------

Ownership (Commits):
David Heinemeier Hansson &amp;lt;david@loudthinking.com&amp;gt; - 3/7 (42.86%)
Pratik Naik &amp;lt;pratiknaik@gmail.com&amp;gt; - 2/7 (28.57%)
Jeremy Kemper &amp;lt;jeremy@bitsweat.net&amp;gt; - 1/7 (14.29%)
utenmiki &amp;lt;utenmiki@gmail.com&amp;gt; - 1/7 (14.29%)

Ownership (Changes):
David Heinemeier Hansson &amp;lt;david@loudthinking.com&amp;gt; - 53/84 (63.1%)
Pratik Naik &amp;lt;pratiknaik@gmail.com&amp;gt; - 20/84 (23.81%)
Jeremy Kemper &amp;lt;jeremy@bitsweat.net&amp;gt; - 9/84 (10.71%)
utenmiki &amp;lt;utenmiki@gmail.com&amp;gt; - 2/84 (2.38%)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;GitEvolution&lt;/code&gt; provides a succinct output of the commits which contains any changes which lead to the current state. Its quick to see that &lt;a href="https://github.com/rails/rails/commit/e50530ca3ab5db53ebc74314c54b62b91b932389"&gt;e50530ca3ab5db53ebc74314c54b62b91b932389&lt;/a&gt; was the introduction point for &lt;code&gt;Array#forty_two&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In addition we have some &lt;em&gt;ownership&lt;/em&gt; information with respect to commits and changes. The ownership information can be used to identify &lt;em&gt;who&lt;/em&gt; to follow up with for additional context. In time new metrics and analysis could be attached to the output (i.e., factoring in time for ownership, types of changes, identifying file modifications such as movement or renames, etc&amp;hellip;)&lt;/p&gt;

&lt;h1&gt;The Other (Hard) Way&lt;/h1&gt;

&lt;p&gt;If we were to identify the commit which introduced &lt;code&gt;Array#forty_two&lt;/code&gt; we have two main options &lt;code&gt;git blame&lt;/code&gt; and &lt;code&gt;git log&lt;/code&gt;:&lt;/p&gt;

&lt;h2&gt;Using &lt;code&gt;git blame&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;I highly advise against this approach as it involves a lot of manual work. You essentially use &lt;code&gt;git blame&lt;/code&gt; to identify the previous commit which effects a line of concern within the area you are looking in.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git blame --follow ./activesupport/lib/active_support/core_ext/array/access.rb

...
83fd1ae1 (Jeremy Kemper            2009-03-21 03:26:09 -0700 70)   # Equal to &amp;lt;tt&amp;gt;self[41]&amp;lt;/tt&amp;gt;. Also known as accessing "the reddit".
3f79d842 (utenmiki                 2013-10-31 23:20:15 +0900 71)   #
3f79d842 (utenmiki                 2013-10-31 23:20:15 +0900 72)   #   (1..42).to_a.forty_two # =&amp;gt; 42
83fd1ae1 (Jeremy Kemper            2009-03-21 03:26:09 -0700 73)   def forty_two
83fd1ae1 (Jeremy Kemper            2009-03-21 03:26:09 -0700 74)     self[41]
4d177ae0 (David Heinemeier Hansson 2007-11-27 19:42:30 +0000 75)   end
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can then use a similar command to blame the parent git revision at that point.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git blame --follow 83fd1ae1^ -- ./activesupport/lib/active_support/core_ext/array/access.rb

...
e50530ca (David Heinemeier Hansson 2008-11-21 09:06:46 +0100 46)         # Equal to &amp;lt;tt&amp;gt;self[41]&amp;lt;/tt&amp;gt;. Also known as accessing "the reddit".
e50530ca (David Heinemeier Hansson 2008-11-21 09:06:46 +0100 47)         def forty_two
e50530ca (David Heinemeier Hansson 2008-11-21 09:06:46 +0100 48)           self[41]
22af62cf (David Heinemeier Hansson 2008-06-17 13:37:57 -0500 49)         end
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All the while you occasionally want to inspect the commit in more detail using &lt;code&gt;git show &amp;lt;commit-sha&amp;gt;&lt;/code&gt;. Eventually you will end up where you want to be.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git show e50530ca

commit e50530ca3ab5db53ebc74314c54b62b91b932389
Author: David Heinemeier Hansson &amp;lt;david@loudthinking.com&amp;gt;
Date:   Fri Nov 21 09:06:46 2008 +0100

    Reduced the number of literal aliases to the range that has actually seen personal use. With the massive savings in overhead, I was able to fit Array#forty_two
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Using &lt;code&gt;git log&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The following &lt;code&gt;git log&lt;/code&gt; command presents the entire file history (26 commits):&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git log --follow ./activesupport/lib/active_support/core_ext/array/access.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This works, but it is a lot more information to sift through.&lt;/p&gt;

&lt;p&gt;A better approach (which is what &lt;code&gt;GitEvolution&lt;/code&gt; uses under the hood) presents the file history for only the concerned portion (7 commits):&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git log -L70,75:./activesupport/lib/active_support/core_ext/array/access.rb --follow ./activesupport/lib/active_support/core_ext/array/access.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output isn&amp;rsquo;t succinct, nor does it have ownership information. The command is also more verbose.&lt;/p&gt;

&lt;h1&gt;Advance Usage&lt;/h1&gt;

&lt;p&gt;I personally use Vim for all my editing needs, especially while editing code. As most of the projects I&amp;rsquo;m working in are version controlled with Git I made a &lt;a href="https://github.com/kevinjalbert/dotfiles/blob/eaca550/vim/vim/functions.vim#L1-L16"&gt;Vim function&lt;/a&gt; that allows me to visually select and call &lt;code&gt;git_evolution&lt;/code&gt; using &lt;code&gt;ge&lt;/code&gt; on the selected lines. This opens the output in a new buffer which I can then look through and yank commit SHAs if needed.&lt;/p&gt;

&lt;h1&gt;The Future&lt;/h1&gt;

&lt;p&gt;Similar to what I mentioned in my &lt;a href="https://kevinjalbert.com/port-mapping-development-servers/"&gt;last post about &lt;code&gt;port_map&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;git_evolution&lt;/code&gt; is a RubyGem, which is effectively tied to a specific Ruby version. When dealing with multiple Ruby version projects using &lt;a href="https://rvm.io/"&gt;rvm&lt;/a&gt;/&lt;a href="http://rbenv.org/"&gt;rbenv&lt;/a&gt; sometimes &lt;code&gt;git_evolution&lt;/code&gt; is not installed. It is a slight detour to install &lt;code&gt;git_evolution&lt;/code&gt; for the current Ruby version when I switch to a new Ruby version. Ideally &lt;code&gt;git_evolution&lt;/code&gt; would not be tied to Ruby, and instead is a transportable executable (for example one written in Bash or Go).&lt;/p&gt;

&lt;p&gt;I do want to expand on the &lt;em&gt;ownership&lt;/em&gt; aspect of &lt;code&gt;git_evolution&lt;/code&gt; as I think it&amp;rsquo;ll help quicker identify &lt;em&gt;who&lt;/em&gt; could be contacted for additional context. Currently it is simply looking at commits and change totals. Ideally there would be a better algorithm to determine ownership of selected lines.&lt;/p&gt;
</content>
  </entry>
</feed>
