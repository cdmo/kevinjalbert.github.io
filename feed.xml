<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kevin Jalbert</title>
  <link href="https://kevinjalbert.com"/>
  <updated>2021-09-28T20:00:00-04:00</updated>
  <author>
    <name>Kevin Jalbert</name>
  </author>
  <id>https://kevinjalbert.com</id>
  <entry>
    <title>Document Storage: Migrating Evernote to Google Drive</title>
    <link rel="alternate" href="https://kevinjalbert.com/document-storage-migrating-evernote-to-google-drive/"/>
    <id>https://kevinjalbert.com/document-storage-migrating-evernote-to-google-drive/</id>
    <updated>2021-09-29T22:31:56-04:00</updated>
    <published>2021-09-28T20:00:00-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">Read about my document storage journey to understand the reasons why I'm moving from Evernote to Google Drive and ditching my Doxie Go for Genius Scan (a mobile scanner application). Included are steps for exporting out of Evernote and into Google Drive.</description>
    <content type="html">&lt;p&gt;I only really embraced a document storage solution when I acquired a &lt;a href="https://www.getdoxie.com/"&gt;Doxie Go&lt;/a&gt; back in 2013. I was able to scan documents with &lt;a href="https://en.wikipedia.org/wiki/Optical_character_recognition"&gt;OCR&lt;/a&gt; so that I could search their contents. I even paired it with an &lt;a href="https://en.wikipedia.org/wiki/Eye-Fi"&gt;Eye-Fi SD card&lt;/a&gt; so that I could upload scans wirelessly to my Macbook Air. It was great. I embraced &lt;a href="https://evernote.com/"&gt;Evernote&lt;/a&gt; as my document storage solution, as it hit everything and was highly recommended.&lt;/p&gt;

&lt;p&gt;The times have changed. My Doxie Go has lost its battery capacity and dies after a few scans (you cannot scan when it&amp;rsquo;s charging). The Eye-Fi company doesn&amp;rsquo;t exist anymore, and my SD card is useless (trust me I tried to make it work). Evernote&amp;rsquo;s software isn&amp;rsquo;t looking so great anymore, and there is wavering hope around the company. On the flip side, mobile phones and their applications have greatly advanced in the last 8 years.&lt;/p&gt;

&lt;p&gt;I decided to switch from using my Doxie with Evernote to using &lt;a href="https://thegrizzlylabs.com/genius-scan/"&gt;Genius Scan&lt;/a&gt; with &lt;a href="https://drive.google.com/"&gt;Google Drive&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Why Genius Scan&lt;/h2&gt;

&lt;p&gt;In my experimentation, Genius Scan performed exceedingly well against others with respect to the quality and speed of scans. In contrast to many other document scanning applications out there, you don&amp;rsquo;t need a subscription to unlock the extra functionality &amp;ndash; it&amp;rsquo;s a one-time purchase of approximately $10. You gain the ability to export automatically to a document storage solution of your choice &amp;ndash; I selected Google Drive.&lt;/p&gt;

&lt;h2&gt;Why Google Drive&lt;/h2&gt;

&lt;p&gt;There are a number of reasons for picking Google Drive over Evernote:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Storage isn&amp;rsquo;t a concern. You get 15 GB for free (which is a lot for documents), or you&amp;rsquo;re likly already paying for additional storage anyways.&lt;/li&gt;
&lt;li&gt;Evernote now requires me to pay ($90/year) for a subscription to search text inside documents&lt;/li&gt;
&lt;li&gt;Evernote has all these other features that it has accumulated over the years that I don&amp;rsquo;t utilize (feature bloat).&lt;/li&gt;
&lt;li&gt;I share the account with my wife and so she&amp;rsquo;ll have easy access as well.&lt;/li&gt;
&lt;li&gt;Google Drive search is fairly powerful (it will search the content even without OCR)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The only issue I have is that the Google Drive search results interface is lacking compared to Evernote. Evernote provides a view containing a snippet of the search results in the context of the file. Evernote also has a preview of the selected note when navigating notes. In Google Drive, you just see the file names of the matches, forcing you to individually preview each file until you find what you need. That being said, the amount of times I&amp;rsquo;ve needed that level of precision in searching is infrequent.&lt;/p&gt;

&lt;h2&gt;Migrating to Google Drive&lt;/h2&gt;

&lt;p&gt;I recently made the migration over to Google Drive &amp;ndash; overall, it wasn&amp;rsquo;t too bad. The following outlines the steps I took:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Select each notebook from Evernote containing documents. I had multiple notebooks which acted as categories (e.g., Receipts, Bills, Taxes, etc&amp;hellip;).&lt;/li&gt;
&lt;li&gt;Right-click and open the export modal. Export using the &amp;lsquo;Multiple web pages (.html)&amp;rsquo; file format.&lt;/li&gt;
&lt;li&gt;Put these in a &lt;code&gt;Notebooks&lt;/code&gt; directory.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Put the following Ruby script (&lt;code&gt;transform.rb&lt;/code&gt;) in the same directory level as &lt;code&gt;Notebooks&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'fileutils'&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'securerandom'&lt;/span&gt;

&lt;span class="no"&gt;Dir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Notebooks/*"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;notebook&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Processing &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;notebook&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

  &lt;span class="no"&gt;Dir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;notebook&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/*"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;note&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="c1"&gt;# Only interested in directories as they hold PDFs, .html files exist here&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;file?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;note&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="no"&gt;FileUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;note&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;next&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"=&amp;gt; Processing &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;note&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

    &lt;span class="c1"&gt;# Getting each file, renaming it and moving it to notebook directory&lt;/span&gt;
    &lt;span class="no"&gt;Dir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;note&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/*"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;file_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;basename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;note&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;chomp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"files"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="no"&gt;SecureRandom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;alphanumeric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;extname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;)].&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;
      &lt;span class="no"&gt;FileUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;mv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;notebook&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;SEPARATOR&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="c1"&gt;# Cleaning up empty note directories&lt;/span&gt;
    &lt;span class="no"&gt;FileUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rmdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;note&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run &lt;code&gt;ruby transform.rb&lt;/code&gt;, which leaves only resources (e.g., PDFs, images) in their respected notebook directory. The resources are also named after the note in Evernote (using a random suffix in case multiple resources existed in a note).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Import the whole &lt;code&gt;Notebooks&lt;/code&gt; directory into Google Drive where you want it.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I&amp;rsquo;ll see how this new document storage solution works long-term, but I have high hopes. An added bonus with the mobile application approach is that it allows me (or my wife!) to scan stuff without needing to be in my home office.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Stub Sleeps in Tests</title>
    <link rel="alternate" href="https://kevinjalbert.com/stub-sleeps-in-tests/"/>
    <id>https://kevinjalbert.com/stub-sleeps-in-tests/</id>
    <updated>2021-08-29T22:27:04-04:00</updated>
    <published>2021-08-28T20:00:00-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">A quick tip - when working with a code base that has sleep/delays in it, where you want to stub them out.</description>
    <content type="html">&lt;p&gt;I&amp;rsquo;m doing another short post here on testing code. I&amp;rsquo;ve observed that sometimes sleeps/delays find their way into production. A quick example of this would be for a retry loop (e.g., HTTP requests). When testing the code concerning these areas, you are taking on the duration of the sleep in your test suite which is slow and undesirable.&lt;/p&gt;

&lt;p&gt;To combat the added delay in sleeps during tests, my recommendation is to stub/mock out the sleep method. Depending on the language, there are many ways to handle this. With Ruby using &lt;a href="https://github.com/seattlerb/minitest"&gt;Minitest&lt;/a&gt; and &lt;a href="https://github.com/freerange/mocha"&gt;Mocha&lt;/a&gt;, you would do the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Class that sleeps for five 1 second iterations, building an array of [0..4]&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SleepyObject&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;do_work&lt;/span&gt;
    &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;times&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;
      &lt;span class="nb"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;results&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# Minitest and Mocha are needed for testing/stubbing&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'minitest/autorun'&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'mocha'&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'mocha/minitest'&lt;/span&gt;

&lt;span class="c1"&gt;# Test class&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SleepyObjectTest&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Minitest&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Test&lt;/span&gt;

  &lt;span class="c1"&gt;# Takes 5 seconds to run&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_with_sleeps&lt;/span&gt;
    &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;SleepyObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;do_work&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;# Takes pretty much 0 seconds to run&lt;/span&gt;
  &lt;span class="c1"&gt;# We are also asserting that five calls to `sleep` do happen&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_without_sleeps&lt;/span&gt;
    &lt;span class="no"&gt;SleepyObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;expects&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:sleep&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;times&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;SleepyObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;do_work&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When we run the above code, we see the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Run options: -v --seed 14433

# Running:

SleepyObjectTest#test_with_sleeps = 5.02 s = .
SleepyObjectTest#test_without_sleeps = 0.00 s = .

Finished in 5.018095s, 0.3986 runs/s, 0.5978 assertions/s.

2 runs, 3 assertions, 0 failures, 0 errors, 0 skips
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The tests using stubs execute quickly, and we still retain the ability to &lt;em&gt;assert&lt;/em&gt; that &lt;em&gt;sleeps&lt;/em&gt; are happening. This is a &lt;em&gt;win-win&lt;/em&gt; in my books.&lt;/p&gt;

&lt;p&gt;It can be a bit difficult to &lt;em&gt;figure out&lt;/em&gt; what tests in your test suite that is affected by sleep durations. As the test creator, you&amp;rsquo;ll likely have a good idea of any sleep/delays in your test execution as you run them in isolation during development. I did find the following &lt;a href="https://dev.to/joeyschoblaska/make-your-specs-faster-with-sleep-study-1ff"&gt;article&lt;/a&gt; that presents a novel approach to identify which tests have sleeps in their execution path.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Rails Testing: Reload the Model</title>
    <link rel="alternate" href="https://kevinjalbert.com/rails-testing-reloading-the-model/"/>
    <id>https://kevinjalbert.com/rails-testing-reloading-the-model/</id>
    <updated>2021-08-29T22:27:04-04:00</updated>
    <published>2021-07-30T20:00:00-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">A beginner in Rails might find themselves testing a model and not seeing the attributes reflecting the changes they would expect to see. Read about why this problem happens and how you can resolve it by reloading the model.</description>
    <content type="html">&lt;p&gt;Throughout my time using Rails, I&amp;rsquo;ve had the pleasure of working with people who are new to Ruby on Rails. This post is a quick one that outlines a testing issue that comes up every now and then.&lt;/p&gt;

&lt;p&gt;To keep things short, let&amp;rsquo;s jump right into the code!&lt;/p&gt;

&lt;h2&gt;The Setup&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Task&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;# Has a bolean database column`archive`&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ArchiverService&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;
    &lt;span class="no"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;update_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;archive: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We have an ActiveRecord model and a service class that updates a value on the model. This is very much a contrived example to illustrate the problem.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"test_helper"&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ArchiverServiceTest&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveSupport&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;TestCase&lt;/span&gt;
  &lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="s2"&gt;"archives task"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;archive: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="no"&gt;ArchiverService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;

    &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;archive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# fails!&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This test fails.&lt;/p&gt;

&lt;h2&gt;Reloading a Stale Model&lt;/h2&gt;

&lt;p&gt;The problem here is that the &lt;code&gt;task&lt;/code&gt; object in the test isn&amp;rsquo;t the same as the one being updated in the &lt;code&gt;ArchiverService&lt;/code&gt;. When a model is instantiated, its attributes are cached. If a value is updated and persisted in the database, the changes aren&amp;rsquo;t propagated to other instances of that model.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The solution here is to add in a &lt;code&gt;task.reload&lt;/code&gt; after the &lt;code&gt;ArchiverService.call&lt;/code&gt;, as we want the task&amp;rsquo;s values to be &lt;em&gt;refreshed&lt;/em&gt; with what the database has at that point&lt;/strong&gt;. If you want to read more into the &lt;code&gt;#reload&lt;/code&gt; method, you can look at its &lt;a href="https://github.com/rails/rails/blob/v6.1.4/activerecord/lib/active_record/persistence.rb#L752-L814"&gt;docs and source&lt;/a&gt;. It&amp;rsquo;s worth noting that the documentation states the following:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Reloads the record from the database.&lt;/p&gt;

&lt;p&gt;&amp;hellip;&lt;/p&gt;

&lt;p&gt;Reloading is commonly used in test suites to test something is actually written to the database, or when some action modifies the corresponding row in the database but not the object in memory&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So be aware of this situation and recall that you do have access to &lt;code&gt;#reload&lt;/code&gt; if you need to freshen up your model&amp;rsquo;s attributes from the database. Rails even provide the ability to &lt;code&gt;#reload_association&lt;/code&gt; if your model has them (&lt;a href="https://guides.rubyonrails.org/v6.1.4/association_basics.html#methods-added-by-belongs-to-association"&gt;see docs here&lt;/a&gt;).&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Embrace Active Support without Rails</title>
    <link rel="alternate" href="https://kevinjalbert.com/embrace-active-support-without-rails/"/>
    <id>https://kevinjalbert.com/embrace-active-support-without-rails/</id>
    <updated>2021-08-29T22:27:04-04:00</updated>
    <published>2021-06-25T20:00:00-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">Read my opinion on using Active Support without Rails in Ruby-only projects. I think the benefits outweigh the cost. Active Support is a Ruby on Rails component that primarily extends the Ruby language providing, a richer experience to developers.</description>
    <content type="html">&lt;h2&gt;What is Active Support&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Active Support is the Ruby on Rails component responsible for providing Ruby language extensions, utilities, and other transversal stuff.&lt;/p&gt;

&lt;p&gt;It offers a richer bottom-line at the language level, targeted both at the development of Rails applications and at the development of Ruby on Rails itself.&lt;/p&gt;

&lt;p&gt;&amp;ndash; &lt;a href="https://guides.rubyonrails.org/active_support_core_extensions.html"&gt;RailsGuides&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As a developer using Ruby, it is highly likely that you are using Rails in some projects. During your journey, you&amp;rsquo;ve likely touched aspects of Active Support without knowing it. Ruby, as a language, allows you to &lt;em&gt;redefine&lt;/em&gt; classes easily, almost to a fault. Active Support does exactly this.&lt;/p&gt;

&lt;p&gt;Active Support does &lt;em&gt;a lot&lt;/em&gt; under the hood by modifying core Ruby classes. These core extensions provide more capabilities through new methods. If you are using Rails, Active Support is already there as a dependency. If you spend enough time on a Rails project, you&amp;rsquo;ll reach for these methods from Active Support.&lt;/p&gt;

&lt;h2&gt;Active Support Without Rails&lt;/h2&gt;

&lt;p&gt;The following are my opinions on when to use Active Support without Rails.&lt;/p&gt;

&lt;h3&gt;Projects&lt;/h3&gt;

&lt;p&gt;In Ruby-only projects, you likely already require some gems, and at this point including Active Support just adds another dependency to the project. With Active Support, your project gains all those convenience methods you are used to.&lt;/p&gt;

&lt;p&gt;The reality of the situation is that you are unlikely to use &lt;em&gt;all&lt;/em&gt; the features of Active Support. Yes, this dependency is a large one, although if you want you can be &lt;a href="https://guides.rubyonrails.org/active_support_core_extensions.html#how-to-load-core-extensions"&gt;selective in loading only parts of Active Support&lt;/a&gt;. If you need to optimize your project (i.e., no dependencies for portability, or optimized code for performance), you might be using the wrong language. Active Support does lazy-load parts of itself, so it might not even be as &lt;em&gt;heavy&lt;/em&gt; as you think.&lt;/p&gt;

&lt;p&gt;In my Ruby projects I dislike reaching for something I&amp;rsquo;d typically use in a Rails project only to find out I don&amp;rsquo;t have access to it (i.e., &lt;code&gt;10.days.ago&lt;/code&gt;). Could I take an approach that doesn&amp;rsquo;t require Active Support? Sure, but at what cost (i.e., time/complexity)? I love Ruby for its expressiveness and ease at &lt;em&gt;getting things done&lt;/em&gt;. Active Support helps me do that better and faster.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Opinion: Embrace Active Support and add it to your project&amp;rsquo;s dependencies&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;Scripts&lt;/h3&gt;

&lt;p&gt;Small Ruby scripts are unique in the sense that they don&amp;rsquo;t always have dependencies. Requiring that first gem in a script can feel &lt;em&gt;wrong&lt;/em&gt;, although in my experience it&amp;rsquo;s worth it. The boost in productivity that a gem provides when you are trying to script something together is immense.&lt;/p&gt;

&lt;p&gt;Dealing with dependencies for scripts is a small inconvenience, as running a script without the required gems usually presents a clear error that is quickly remedied.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Opinion: Embrace Active Support if you already require gems for your script or if you want methods that Active Support offers&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;Gems&lt;/h3&gt;

&lt;p&gt;If you are developing a Ruby gem, it would be best to not &lt;em&gt;force&lt;/em&gt; Active Support as a dependency without good reasons. If you absolutely need it, go for it &amp;ndash; ultimately it&amp;rsquo;s your call as the maintainer. Now if your gem is inherently tied to Rails, then it&amp;rsquo;s all good to include it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Opinion: Avoid Active Support unless you absolutely need parts of it, or if the gem is intended to be used in a Rails project&lt;/strong&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Keep a macOS Application Running using cron</title>
    <link rel="alternate" href="https://kevinjalbert.com/keep-a-macos-application-running-using-cron/"/>
    <id>https://kevinjalbert.com/keep-a-macos-application-running-using-cron/</id>
    <updated>2021-08-29T22:27:04-04:00</updated>
    <published>2021-05-27T20:00:00-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">Read how I use cron to keep the RescueTime Application running. I was frustrated at RescueTime crashing and not recording data for a whole week.</description>
    <content type="html">&lt;p&gt;I have used &lt;a href="https://www.rescuetime.com/ref/31263"&gt;RescueTime (Referral Link)&lt;/a&gt; for many years at this point. It always disappoints me when I get the email saying that no data was recorded in RescueTime for the last week (see image above article title). For reasons unannounced to me, the macOS menu bar application had stopped running. I use the &lt;a href="https://www.macbartender.com/"&gt;Bartender for macOS&lt;/a&gt; to hide certain menu bar applications (as they offer little visual value) &amp;ndash; RescueTime is hidden from my view and I never noticed it wasn&amp;rsquo;t running.&lt;/p&gt;

&lt;p&gt;I needed a way to ensure that the application was kept running if it crashed.&lt;/p&gt;

&lt;h2&gt;Launch Application in Background using &lt;code&gt;cron&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;I know of &lt;code&gt;cron&lt;/code&gt; and how it can run scripts periodically &amp;ndash; I figured this would be the tool to save me here.&lt;/p&gt;

&lt;p&gt;I quickly put together the following (add this using &lt;code&gt;crontab -e&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;*/5 * * * * open --hide --background /Applications/RescueTime.app
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using &lt;a href="https://crontab.guru/#*/5_*_*_*_*"&gt;crontab.guru&lt;/a&gt; we can see that this will run the &lt;code&gt;open&lt;/code&gt; for ResuceTime command every 5 minutes. The &lt;code&gt;--hide&lt;/code&gt; and &lt;code&gt;--background&lt;/code&gt; ensure that the application doesn&amp;rsquo;t open in an obtrusive manner (i.e., think applications with a GUI).&lt;/p&gt;

&lt;p&gt;This worked for me &amp;ndash; it opened RescueTime if it was closed out. I even tested this with other applications and it &lt;em&gt;mostly&lt;/em&gt; worked as expected. The &lt;em&gt;hide and background&lt;/em&gt; flags didn&amp;rsquo;t work for some applications (e.g., Evernote always appears in the forefront for whatever reason).&lt;/p&gt;

&lt;p&gt;Done deal then right? Wrong. I noticed every now and then a keystroke or two wouldn&amp;rsquo;t register. When I looked at the time it was always on the minute the &lt;code&gt;cron&lt;/code&gt; would trigger&amp;hellip; If I had to take a guess, the &lt;code&gt;open&lt;/code&gt; was causing focus to switch briefly and would interrupt keystrokes on the current application I was in.&lt;/p&gt;

&lt;p&gt;I could decrease the frequency that the command would run or&amp;hellip;&lt;/p&gt;

&lt;h2&gt;Only &lt;code&gt;open&lt;/code&gt; if Application isn&amp;rsquo;t Running&lt;/h2&gt;

&lt;p&gt;My next approach was to only &lt;em&gt;open&lt;/em&gt; the application if it wasn&amp;rsquo;t already running. This will prevent the &lt;code&gt;open&lt;/code&gt; from triggering multiple times during the day.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Scroll to see full command (it is one line due to fitting in the crontab)
*/5 * * * * app=Rescuetime; ps aux | grep -v grep | grep -ci $app &amp;gt; /dev/null || open --hide --background /Applications/$app.app
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we break this down:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;app=Rescuetime;&lt;/code&gt; sets a variable of what application we&amp;rsquo;re trying to keep open.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ps aux | grep -v grep | grep -ci $app &amp;gt; /dev/null&lt;/code&gt; lists all running processes, excluding the &lt;code&gt;grep&lt;/code&gt; process, and finally counting the found lines while &lt;code&gt;grep&lt;/code&gt;ing for the application&amp;rsquo;s name. This ends up being a 0 or 1. The STDOUT output is directed to the void so that it doesn&amp;rsquo;t create new &lt;code&gt;mail&lt;/code&gt; entries.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;||&lt;/code&gt; will conditionally run the next statement if the previous was falsey (i.e., no application was found running)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;open --hide --background /Applications/$app.app&lt;/code&gt; opens the specified application&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now this works as expected! I no longer have to worry about RescueTime not running. I might do this for other menubar applications that I like to have active, but are hidden.&lt;/p&gt;

&lt;p&gt;I haven&amp;rsquo;t tried this on Linux but I suspect you could do something similar (assuming there is an equivalent to &lt;code&gt;open&lt;/code&gt;).&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>AppleScript that Mirrors iPhone to QuickTime</title>
    <link rel="alternate" href="https://kevinjalbert.com/applescript-that-mirrors-iphone-to-quicktime/"/>
    <id>https://kevinjalbert.com/applescript-that-mirrors-iphone-to-quicktime/</id>
    <updated>2021-08-29T22:27:04-04:00</updated>
    <published>2021-04-29T20:00:00-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">I automated seven manual steps to mirror my iPhone to QuickTime using AppleScript. Read about some of the challenges I encountered and see the finalized script being trigged by Alfred.</description>
    <content type="html">&lt;p&gt;Like many, I&amp;rsquo;m guilty of playing mobile games on my iPhone. For the games that have controller support, I&amp;rsquo;ll stream the video on a larger screen. As mentioned in my &lt;a href="/how-i-keep-active-at-home"&gt;previous article&lt;/a&gt;, I&amp;rsquo;ll sometimes play on my exercise bike. In this situation, I&amp;rsquo;ll &lt;em&gt;mirror&lt;/em&gt; my iOS device through QuickTime so that I can play on a larger screen with a controller.&lt;/p&gt;

&lt;h1&gt;Manual Steps&lt;/h1&gt;

&lt;p&gt;There are a number of steps that I have to complete to mirror my iPhone to QuickTime:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Enable &lt;a href="https://keepingyouawake.app/"&gt;KeepingYouAwake&lt;/a&gt; (so monitor doesn&amp;rsquo;t go to sleep with no inputs)&lt;/li&gt;
&lt;li&gt;Open QuickTime&lt;/li&gt;
&lt;li&gt;Make a new &lt;em&gt;Movie Recording&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Select my iPhone for video input&lt;/li&gt;
&lt;li&gt;Select my iPhone for audio input&lt;/li&gt;
&lt;li&gt;Drag the volume slider to 100%.&lt;/li&gt;
&lt;li&gt;Maximize Quicktime window&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;Sweet Automation&lt;/h1&gt;

&lt;p&gt;This GIF demonstrates the automation that covers all seven manual steps. I launch it using &lt;a href="https://www.alfredapp.com/"&gt;Alfred&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Mirror ios alfred" width="854" height="591" src="/images/2021-04-30-applescript-that-mirrors-iphone-to-quicktime/mirror-ios-alfred.gif" /&gt;&lt;/p&gt;

&lt;h1&gt;The Code&lt;/h1&gt;

&lt;p&gt;I may be biased, but the source code is organized quite well in my opinion. The first eight lines cover all necessary customization needs as they are just function calls. If you need to, you can always dive into the functions themselves. The following is the code hosted on a &lt;a href="https://gist.github.com/kevinjalbert/d7661a6a34c1d66dccf701f64eb09be4"&gt;Public Gist&lt;/a&gt;.&lt;/p&gt;

&lt;script src="https://gist.github.com/kevinjalbert/d7661a6a34c1d66dccf701f64eb09be4.js"&gt;&lt;/script&gt;

&lt;h1&gt;Challenges&lt;/h1&gt;

&lt;h2&gt;Selecting a video input&lt;/h2&gt;

&lt;p&gt;I had to select my iPhone for the video/audio inputs in QuickTime using AppleScript. A quick search turned up this &lt;a href="https://stackoverflow.com/q/45228743/583592"&gt;Stack Overflow question&lt;/a&gt;. It turns out that you &lt;em&gt;should&lt;/em&gt; be able to do the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight applescript"&gt;&lt;code&gt;&lt;span class="k"&gt;tell&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"QuickTime Player"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;newMovieRecording&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;movie&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;recording&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="k"&gt;tell&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;newMovieRecording&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;current&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;camera&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;newMovieRecording&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Kevin's iPhone"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;current&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;microphone&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;newMovieRecording&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Kevin's iPhone"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;tell&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;tell&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unfortunately, it doesn&amp;rsquo;t work as you get hit with &lt;code&gt;Can’t make &amp;quot;Kevin&amp;#39;s iPhone&amp;quot; into type video recording device&lt;/code&gt;. This would have made things &lt;em&gt;much easier&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Instead, we have to click the button to open the inputs list and then make the selections via AppleScript. This wasn&amp;rsquo;t too bad initially, as it was just iterating the list of menu items and clicking the one which matched my device&amp;rsquo;s name.&lt;/p&gt;

&lt;h2&gt;Same name for audio/video inputs&lt;/h2&gt;

&lt;p&gt;After I was able to select the video input, the next problem is selecting the audio input. The problem now is that the audio and video input share the same name and are within the same list. I would have to &lt;em&gt;skip&lt;/em&gt; the first one (video input) to select the audio input. This wasn&amp;rsquo;t too hard but was just another hurdle to get over. Ideally, the list of inputs would have been separated by video/audio, or somehow have a different key to reference them by.&lt;/p&gt;

&lt;h2&gt;Inputs menu was slow to close&lt;/h2&gt;

&lt;p&gt;I had noticed earlier that when the inputs menu was opened it would stay open for 7-8 seconds before making the menu item selection. I wasn&amp;rsquo;t too concerned at the time, but after the whole automation was done it took just under 20 seconds to mirror my device.&lt;/p&gt;

&lt;p&gt;It took a lot of digging but I found a &lt;a href="https://apple.stackexchange.com/a/400163/228446"&gt;Stack Overflow answer&lt;/a&gt; that provided the solution.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight applescript"&gt;&lt;code&gt;&lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="nv"&gt;openInputMenu&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="k"&gt;ignoring &lt;/span&gt;&lt;span class="nb"&gt;application responses&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="k"&gt;tell&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"System Events"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;tell&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;process&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"QuickTime Player"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nv"&gt;click&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;button&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="na"&gt;window&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nb"&gt;delay&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;tell&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;ignoring&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nb"&gt;do shell script&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"killall 'System Events'"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;openDeviceMenu&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This function for opening the menu is explicitly telling it to ignore the application responses (i.e., don&amp;rsquo;t wait for feedback). A manual delay of a second is injected to give time for the menu to open up. It also kills the &lt;code&gt;System Events&lt;/code&gt;, which ends up forcing the script to continue execution to future actions. I&amp;rsquo;ll be honest, I&amp;rsquo;m not 100% on the specifics but it worked &amp;ndash; the menu opens and the selections are made in just over a second now.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>How I Keep Active At Home</title>
    <link rel="alternate" href="https://kevinjalbert.com/how-i-keep-active-at-home/"/>
    <id>https://kevinjalbert.com/how-i-keep-active-at-home/</id>
    <updated>2021-08-29T22:27:04-04:00</updated>
    <published>2021-03-28T20:00:00-04:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">If you're not one to exercise but you like to play games or watch shows/movies, make it a point to not sit still. Get a stationary bike, an inexpensive treadmill, or other types of exercise equipment and bundle what you want to do with physical activity.</description>
    <content type="html">&lt;p&gt;At this point in my life, I live a pretty sedentary lifestyle. I&amp;rsquo;ve been working remotely for just over two years and so I&amp;rsquo;ve lost the &lt;em&gt;walk&lt;/em&gt; my old commute would provide me. The commute walk amounted to about 30 minutes of brisk walking each day. I&amp;rsquo;m not one to go to a gym for a workout, and I&amp;rsquo;m satisfied with at-home exercises. I have two young kids and it can be challenging to find time to exercise.&lt;/p&gt;

&lt;p&gt;I picked up an inexpensive folding &lt;a href="https://www.amazon.ca/gp/product/B007595TKU"&gt;exercise bike&lt;/a&gt; to keep in my office a few years back to help with at-home exercising (cardio). I didn&amp;rsquo;t use it all that much until I started working remotely. The bike helped keep my Apple Watch &lt;em&gt;rings&lt;/em&gt; happy.&lt;/p&gt;

&lt;p&gt;I had also discovered the joy of playing video games while cycling. As the exercise bike was light enough, I could drag it outside my office to where the video game consoles were. I also would sometimes just raise my desk into its standing position and play something on Steam.&lt;/p&gt;

&lt;p&gt;I mostly play Action/Adventure and RPG games and these tend to work out well for me while cycling. Playing video games while biking can be a bit challenging at times, depending on what the game&amp;rsquo;s task is. I sometimes find myself slowing down for &lt;em&gt;tricky&lt;/em&gt; platforming, even completely stopping to complete a difficult boss battle.&lt;/p&gt;

&lt;p&gt;In addition to playing video games, I will mix it up by watching videos. I generally stay to YouTube in which I&amp;rsquo;ll watch some videos on technical content (i.e., conference talks), or videos on random stuff. I have, on occasion, exercised through a movie, however that usually means splitting the &lt;em&gt;movie experience&lt;/em&gt; over multiple sessions.&lt;/p&gt;

&lt;p&gt;I normally end up doing 30-45 minutes of cycling a day (depending on how sad my Apple rings are at the end of the day) while watching/playing something, and it is enough to work up a bit of sweat. I aim to keep my pace within a set range - nothing too intense, just enough to get the heart pumping faster than normal.&lt;/p&gt;

&lt;p&gt;I recently purchased a &lt;a href="https://www.amazon.ca/gp/product/B08423CNCR"&gt;treadmill&lt;/a&gt; as well that I&amp;rsquo;ve tried gaming with. I personally found it much harder than being on a stationary bicycle. You cannot easily slow down for those &lt;em&gt;harder&lt;/em&gt; moments in a game (think flying off the back of the treadmill), and I found that my stride was a lot more clumsy. Watching a video while on a treadmill is better though, as you don&amp;rsquo;t have to work the controller and perform input commands.&lt;/p&gt;

&lt;p&gt;This approach works for me and allows me to combine two things together - I can exercise and play at the same time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; If you&amp;rsquo;re not one to exercise but you like to play games or watch shows/movies, make it a point to not sit still. Get a stationary bike, an inexpensive treadmill, or other types of exercise equipment and bundle what you want to do with physical activity.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Wrapping Shell Commands and Keep the Original Name</title>
    <link rel="alternate" href="https://kevinjalbert.com/wrapping-shell-commands-and-keep-the-original-name/"/>
    <id>https://kevinjalbert.com/wrapping-shell-commands-and-keep-the-original-name/</id>
    <updated>2021-08-29T22:27:04-04:00</updated>
    <published>2021-02-26T19:00:00-05:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">In this post, I present two ways to wrap a shell command and keep its original name. This allows you to run additional statements before and after the execution of a command that you don't own.</description>
    <content type="html">&lt;p&gt;I wanted to wrap a shell command (that I had no ownership of) so that I could execute additional statements around the original command. In the following sections, I present two scenarios for wrapping shell commands.&lt;/p&gt;

&lt;p&gt;I do want to say there is a possibility that the wrapped command &lt;em&gt;could&lt;/em&gt; potentially cause some issues down the road, however, I have not encountered any as of yet with my limited testing.&lt;/p&gt;

&lt;h1&gt;Wrapping an Executable&lt;/h1&gt;

&lt;p&gt;You can create a new function with the name of the executable that you wish to wrap. This works because the function lookup occurs before the executable lookup on your PATH.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# In .zshrc or .bashrc&lt;/span&gt;
ping&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"before"&lt;/span&gt;

  /sbin/ping &lt;span class="nv"&gt;$@&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;exit_code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;

  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"after"&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$exit_code&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The function itself uses the original executable (&lt;code&gt;/sbin/ping&lt;/code&gt;) by specifying the full-path along with the original parameters (via &lt;code&gt;$@&lt;/code&gt;). We grab the &lt;em&gt;exit code&lt;/em&gt; (via &lt;code&gt;$?&lt;/code&gt;) and store it to be returned at the ending. This ensures that the new function still operates as it did before.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;❯ ping google.com &lt;span class="nt"&gt;-c&lt;/span&gt; 1
before
PING google.com &lt;span class="o"&gt;(&lt;/span&gt;172.217.0.238&lt;span class="o"&gt;)&lt;/span&gt;: 56 data bytes
64 bytes from 172.217.0.238: &lt;span class="nv"&gt;icmp_seq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0 &lt;span class="nv"&gt;ttl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;115 &lt;span class="nb"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;25.484 ms

&lt;span class="nt"&gt;---&lt;/span&gt; google.com ping statistics &lt;span class="nt"&gt;---&lt;/span&gt;
1 packets transmitted, 1 packets received, 0.0% packet loss
round-trip min/avg/max/stddev &lt;span class="o"&gt;=&lt;/span&gt; 25.484/25.484/25.484/0.000 ms
after
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can see that that the &lt;code&gt;ping&lt;/code&gt; command still works as expected, but we also now have additional statements around it.&lt;/p&gt;

&lt;h1&gt;Wrapping a Function&lt;/h1&gt;

&lt;p&gt;The approaches for dealing with a function were mostly borrowed from this &lt;a href="https://unix.stackexchange.com/questions/102595/is-there-a-hook-like-system-for-shell/102626#102626"&gt;Unix StackExchange answer&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Not a function I have defined (i.e., defined in a library I sourced)&lt;/span&gt;
&lt;span class="k"&gt;function &lt;/span&gt;example&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"inside example function (&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;)"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# In .zshrc or .bashrc&lt;/span&gt;
&lt;span class="nb"&gt;eval &lt;/span&gt;_&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;declare&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; example&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
example&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"before function"&lt;/span&gt;

  _example &lt;span class="nv"&gt;$@&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;exit_code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;

  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"after function"&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$exit_code&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;eval&lt;/code&gt; is essentially renaming the original function (&lt;code&gt;example&lt;/code&gt;) to have a leading underscore (&lt;code&gt;_example)&lt;/code&gt;. A new function is then defined that overrides &lt;code&gt;example&lt;/code&gt;, and actually uses the original&amp;rsquo;s function (now called &lt;code&gt;_example&lt;/code&gt;). You define additional statements before and after the wrapped function, in a similar fashion to how it was handled with wrapping an executable. The exit code is also preserved from the wrapped function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;❯ example 5
before
inside example &lt;span class="k"&gt;function &lt;/span&gt;5
after
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One downside to the above approach is that the &lt;em&gt;old&lt;/em&gt; function is still present (&lt;code&gt;_example&lt;/code&gt;). While the following only works in ZSH, it is possible to directly override the original function by using the original&amp;rsquo;s definition when creating the new function. To note, I do find the former approach simpler.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# .zshrc&lt;/span&gt;
functions[example]&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'
  (){
    echo "before"

    '&lt;/span&gt;&lt;span class="nv"&gt;$functions&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;example]&lt;span class="s1"&gt;';
    } "$@";
  local exit_code=$?

  echo "after"

  return $exit_code'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Reflecting on Five Years of Monthly Blogging</title>
    <link rel="alternate" href="https://kevinjalbert.com/reflecting-on-five-years-of-monthly-blogging/"/>
    <id>https://kevinjalbert.com/reflecting-on-five-years-of-monthly-blogging/</id>
    <updated>2021-08-29T22:27:04-04:00</updated>
    <published>2021-01-29T19:00:00-05:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">In 2016, I made a New Year's resolution to blog about something of substance every month. In this post, I'll reflect on this five-year journey.</description>
    <content type="html">&lt;p&gt;Just over five years ago, I decided to dive into the technical blogging sphere. Since then, I have consistently produced a blog post every month. There are a couple of reasons why I blog and why I wanted to keep the monthly cadence:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sharing Knowledge&lt;/li&gt;
&lt;li&gt;Improving my Writing&lt;/li&gt;
&lt;li&gt;Online Presence&lt;/li&gt;
&lt;li&gt;Recognition&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Over the last five years, I&amp;rsquo;ve:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Published 63 blog posts.&lt;/li&gt;
&lt;li&gt;Wrote 53,017 words (includes a bit of markup here and there).&lt;/li&gt;
&lt;li&gt;Created content that would take 263 minutes to read (assuming 180 words per minute).&lt;/li&gt;
&lt;li&gt;Reached 78,121 people with my writing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this post, I want to reflect on this journey &amp;ndash; goals, challenges, rewards.&lt;/p&gt;

&lt;h1&gt;Challenges with Blogging&lt;/h1&gt;

&lt;h2&gt;Time Commitment&lt;/h2&gt;

&lt;p&gt;This is my biggest struggle with blogging. I procrastinate until the last possible moment and usually post within the last few days of the month.&lt;/p&gt;

&lt;p&gt;The time commitment for each blog post varies depending on its content. The technical ones normally require a lot of upfront work (building the project and writing the code), while the non-technical posts are typically shorter to write.&lt;/p&gt;

&lt;p&gt;Overall, I try to work on the posts in the evenings, but it sometimes bleeds into the weekend. Having a family makes it a bit challenging, but not impossible as my wife is a rockstar. A post can be &lt;em&gt;chipped away&lt;/em&gt; at instead of just writing the whole thing in one go, which is something I want to do more consistently.&lt;/p&gt;

&lt;h2&gt;Blogging Platform&lt;/h2&gt;

&lt;p&gt;I built my blog using &lt;a href="https://middlemanapp.com/"&gt;Middleman&lt;/a&gt;. If you&amp;rsquo;re interested, you can look at the &lt;a href="https://github.com/kevinjalbert/kevinjalbert.github.io"&gt;GitHub repository for the website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Early on, I put a decent amount of work into making the site. It still serves its purpose but isn&amp;rsquo;t aging well. I almost always hit some local development issue when I spin it up as the technology stack/dependencies are old.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m torn &amp;ndash; I want a simple platform for writing, but I want customization capabilities. I&amp;rsquo;ll likely move to a new platform in the future, but it&amp;rsquo;s such a daunting task. I&amp;rsquo;ll also plan to investigate using an off-the-shelf solution for blogging. The idea is to spend less time on the platform and more time on creating content.&lt;/p&gt;

&lt;h2&gt;Driving Traffic&lt;/h2&gt;

&lt;p&gt;Getting traffic to my website is something I don&amp;rsquo;t really enjoy, and for the most part, I really depend on organic traffic and just the general SEO (Search Engine Optimization) that my website provides.&lt;/p&gt;

&lt;p&gt;At one point, I decided to add a newsletter (which has just surpassed 100 subscribers). I&amp;rsquo;m currently using &lt;a href="https://mailchimp.com/"&gt;Mailchimp&lt;/a&gt; as it has an option to consume an RSS feed that pushes emails out to subscribers.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve also done some posting here and there on &lt;a href="https://www.reddit.com/"&gt;Reddit&lt;/a&gt;. When the subreddit matches the blog post topic it can drive some traffic. I saw this best when I was writing Notion related posts.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve cross-posted a few times on &lt;a href="https://dev.to/kevinjalbert"&gt;Dev.to&lt;/a&gt; and &lt;a href="https://medium.com/@kevinjalbert"&gt;Medium&lt;/a&gt;, but haven&amp;rsquo;t done so in a while. I&amp;rsquo;m still not 100% sure about the measurable benefits of cross-posting and whether it&amp;rsquo;s worth the time.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve occasionally promoted my posts on social media. Similar to the above point, do the benefits outweigh the time invested. I have seen some traction when tagging companies or topics to widen the reach.&lt;/p&gt;

&lt;h1&gt;Rewards of Blogging&lt;/h1&gt;

&lt;h2&gt;Reaching Many&lt;/h2&gt;

&lt;p&gt;The following image is a snapshot of the five years in Google Analytics. I take pride that so many people have seen my content. The growth is a nice nod as well in keeping the monthly cadence up.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Blog stats" width="1912" height="1318" src="/images/2021-01-30-reflecting-on-five-years-of-monthly-blogging/blog-stats.png" /&gt;&lt;/p&gt;

&lt;h2&gt;Following Referrals&lt;/h2&gt;

&lt;p&gt;It is nice to see &lt;em&gt;where&lt;/em&gt; my content is reaching, and the following image shows how users are finding my content from a referral perspective. When drilling into specifics, it&amp;rsquo;s rewarding to see one of my blog posts ending up in a &lt;a href="https://github.com/chatwoot/chatwoot/pull/1134#issue-466028793"&gt;GitHub issue&lt;/a&gt;, &lt;a href="https://stackoverflow.com/questions/7298088/def-block-in-rake-task"&gt;StackOverflow answer&lt;/a&gt;, or &lt;a href="https://tshaped.io/zapier-and-notion/"&gt;blog post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Blog referrals" width="1958" height="1728" src="/images/2021-01-30-reflecting-on-five-years-of-monthly-blogging/blog-referrals.png" /&gt;&lt;/p&gt;

&lt;h2&gt;Ability to Refer to own Posts&lt;/h2&gt;

&lt;p&gt;At times during my work, I am able to refer a colleague to a post of my own. I&amp;rsquo;ve had colleagues mention that they had found my posts when searching for a topic as well. I&amp;rsquo;ve even caught myself stumbling upon my own post when Googling.&lt;/p&gt;

&lt;p&gt;By writing down some information as a post, I don&amp;rsquo;t have to reiterate it again if it is relevant &amp;ndash; I can simply link to it.&lt;/p&gt;

&lt;h1&gt;The Future&lt;/h1&gt;

&lt;p&gt;I see myself continuing with my monthly blog post for the foreseeable future. It&amp;rsquo;s worth my time investment.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve recently made posts that have a YouTube video embedded in them. Normally these are for demos from a side project. I&amp;rsquo;ll likely continue these tactics, and experiment how I can incorporate them into a variety of other post topics. &lt;a href="https://www.youtube.com/channel/UCFWPd8rky_tD4B4Qqq99i4Q"&gt;My YouTube channel&lt;/a&gt; is very much in its infancy, and the quality of the videos could use some improvement.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Youtube stats" width="1384" height="874" src="/images/2021-01-30-reflecting-on-five-years-of-monthly-blogging/youtube-stats.png" /&gt;&lt;/p&gt;

&lt;p&gt;As mentioned in the challenges section, I have dabbled in other services and platforms to broadcast my content. I would like to further explore this as it has the potential to drive more traffic to my content and improve the SEO.&lt;/p&gt;

&lt;p&gt;My current blogging set up is aging, and I would really like to improve it. I plan to look into using a more modern &lt;a href="https://jamstack.org/"&gt;Jamstack&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you for reading my content over the past five years. I look forward to creating new content that sparks interest.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Using URL Scheme Links in Notion</title>
    <link rel="alternate" href="https://kevinjalbert.com/using-url-scheme-links-in-notion/"/>
    <id>https://kevinjalbert.com/using-url-scheme-links-in-notion/</id>
    <updated>2021-08-29T22:27:04-04:00</updated>
    <published>2020-12-21T19:00:00-05:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">URL Schemes provide powerful ways to integrate applications together in the Apple Ecosystem. Notion, unfortunately, doesn't allow these URL Scheme links, as they are not 'valid' URLs. We can work around this by using a URL shortener to do some redirection.</description>
    <content type="html">&lt;h1&gt;Context &amp;ndash; the Integrations from Notion&lt;/h1&gt;

&lt;p&gt;I want to have the ability to link from &lt;a href="https://www.notion.so/?r=6b8d609eb50943419db4d87c67fa558e"&gt;Notion [Referral]&lt;/a&gt; to other applications in the Apple ecosystem (e.g., &lt;a href="https://culturedcode.com/things/"&gt;Things&lt;/a&gt;). If the application itself doesn&amp;rsquo;t offer the integration, you can usually &lt;em&gt;hack&lt;/em&gt; something together using &lt;em&gt;URL Scheme links&lt;/em&gt; (also called &lt;a href="https://support.apple.com/en-ca/guide/shortcuts/apdcd7f20a6f/ios"&gt;&lt;em&gt;x-callback-url&lt;/em&gt;&lt;/a&gt;), which are defined by an application. For example, Things has an &lt;a href="https://culturedcode.com/things/support/articles/2803573/"&gt;excellent article&lt;/a&gt; on how you can use URL Scheme links to interface with it.&lt;/p&gt;

&lt;h1&gt;Problem &amp;ndash; the Invalid URL&lt;/h1&gt;

&lt;p&gt;Unfortunately, Notion doesn&amp;rsquo;t recognize URL Scheme links (e.g., show &lt;em&gt;today&lt;/em&gt; in Things using &lt;code&gt;things:///show?id=today&lt;/code&gt;) as valid URLs. Even if you try to edit an existing URL in Notion, it won&amp;rsquo;t work.&lt;/p&gt;

&lt;p&gt;This has come up as an issue in the &lt;a href="https://www.reddit.com/r/Notion"&gt;Notion subreddit&lt;/a&gt; &lt;a href="https://www.reddit.com/r/Notion/comments/azfnef/urlscheme_plz/"&gt;numerous&lt;/a&gt; &lt;a href="https://www.reddit.com/r/Notion/comments/gcx4nw/links_to_other_apps_xcallbackurl/"&gt;times&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Solution &amp;ndash; the URL Shortner&lt;/h1&gt;

&lt;p&gt;By using a URL shortener service (in this case &lt;a href="https://tinyurl.com/"&gt;TinyURL&lt;/a&gt;), we can create valid URLs that Notion will let us use. These URLs will open the browser and the redirection will then trigger the URL Scheme.&lt;/p&gt;

&lt;p&gt;For a full demo of how this all works, you can watch the following short video I recorded.&lt;/p&gt;

&lt;iframe class="youtube-embed" src="https://www.youtube.com/embed/cQvTnq9m_gg" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;To make the generation of these TinyURLs easier, I created an &lt;a href="https://support.apple.com/en-ca/guide/shortcuts/welcome/ios"&gt;iOS Shortcut&lt;/a&gt; that simplifies it by using the TinyURL&amp;rsquo;s API. You can grab the shortcut &lt;a href="https://www.icloud.com/shortcuts/ab01776c15a442938fe18f1e5f786586"&gt;here&lt;/a&gt;, or just recreate it yourself using the following template:&lt;/p&gt;

&lt;div style="display: flex"&gt;
  &lt;img src="/images/2020-12-22-using-url-scheme-links-in-notion/shortcut.jpeg" style="width: 49%; height: 100%"/&gt;
&lt;/div&gt;

&lt;h1&gt;Future &amp;ndash; the Endless Possibilities&lt;/h1&gt;

&lt;p&gt;I do hope that Notion eventually &lt;em&gt;allows&lt;/em&gt; for URL Scheme links to be used without any URL redirection needed. For the time being, however, this workaround does the trick.&lt;/p&gt;

&lt;p&gt;With iOS Shortcuts, there are countless possibilities available to you. You can initiate &lt;em&gt;anything&lt;/em&gt; from a URL link in Notion now.&lt;/p&gt;

&lt;p&gt;Imagine using this technique in Notion databases &amp;ndash; having a URL column that does something on your device when you open it.&lt;/p&gt;

&lt;p&gt;Creating a crude integration starting from Notion leading into another iOS Applications is entirely doable, for example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open Things to specific project pages&lt;/li&gt;
&lt;li&gt;Link to an external artifact (e.g., Email from &lt;a href="https://sparkmailapp.com/"&gt;Spark&lt;/a&gt;, Note from &lt;a href="https://bear.app/"&gt;Bear&lt;/a&gt;, etc&amp;hellip;)&lt;/li&gt;
&lt;li&gt;A &lt;a href="/daily-review-using-ios-shortcuts-and-scriptable"&gt;Shortcut that kicks off a daily review&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A Shortcut that fires off an HTTP request that triggers an external API.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each application provides its own URL Scheme, although this &lt;a href="http://x-callback-url.com/apps/"&gt;site&lt;/a&gt; does a decent job cataloging URL Schemes of popular applications.&lt;/p&gt;

&lt;p&gt;The possibilities are truly endless.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Custom Notion iOS Widget</title>
    <link rel="alternate" href="https://kevinjalbert.com/custom-notion-ios-widget/"/>
    <id>https://kevinjalbert.com/custom-notion-ios-widget/</id>
    <updated>2021-08-29T22:27:04-04:00</updated>
    <published>2020-11-27T19:00:00-05:00</published>
    <author>
      <name>Kevin Jalbert</name>
    </author>
    <description type="html">Notion has recently released iOS widgets, however, they are limited in functionality. In this article, I present my custom Notion iOS widget that has a unique set of features. This widget is built using iOS Shortcuts, the Scriptable application, and a notion-py server.</description>
    <content type="html">&lt;h1&gt;The Offical Notion Widget&lt;/h1&gt;

&lt;p&gt;On &lt;a href="https://www.notion.so/What-s-New-157765353f2c4705bd45474e5ba8b46c#a2dc9af353a746cabaf436fdfaeca4a7"&gt;November 22 of 2020, Notion released their iOS widgets&lt;/a&gt;. This was a great step forward for the &lt;a href="https://apps.apple.com/app/notion-notes-tasks-wikis/id1232780281"&gt;Notion iOS application&lt;/a&gt; as iOS 14 had just released support for widgets in September.&lt;/p&gt;

&lt;p&gt;They offered the following three widgets (as quoted from their widget descriptions):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Page: Get quick access to one of your Notion pages&lt;/li&gt;
&lt;li&gt;Favorites: Get quick access to your Notion favorites&lt;/li&gt;
&lt;li&gt;Recents: Get quick access to recently viewed pages in Notion&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;My Unofficial Notion Widget&lt;/h1&gt;

&lt;p&gt;I&amp;rsquo;ve been working on my own custom Notion iOS widget since October before it was known that official widgets were coming out. I was pleasantly surprised that their widgets haven&amp;rsquo;t made my custom widget obsolete, as the functionality is unique.&lt;/p&gt;

&lt;p&gt;The following video provides a demo of my widget in action, as well as explaining a bit about how it was made.&lt;/p&gt;

&lt;iframe class="youtube-embed" src="https://www.youtube.com/embed/atq6u7Le1JE" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;The following technologies were used to make this all possible:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;API server using &lt;a href="https://github.com/jamalex/notion-py"&gt;&lt;code&gt;notion-py&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://support.apple.com/en-ca/guide/shortcuts/welcome/ios"&gt;iOS Shortcuts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scriptable.app/"&gt;Scriptable&lt;/a&gt; iOS application&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are more interested in the technicals or would like to set up your own widget, you can look at the &lt;a href="https://github.com/kevinjalbert/notion-toolbox/tree/master/ios_widget"&gt;&lt;code&gt;ios_widget&lt;/code&gt; tool&lt;/a&gt; within my &lt;a href="https://github.com/kevinjalbert/notion-toolbox"&gt;&lt;code&gt;notion-toolbox&lt;/code&gt; GitHub Repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s worth noting that there are plenty of rough edges in this implementation as of its initial release, and it does require a lot of setup investment. In addition, if/when Notion decides to up their widget game, my custom solution might become obsolete. There are also concerns surrounding the upcoming offical Notion API, as I&amp;rsquo;m currently using the unofficial one (which can, in theory, break without notice). I&amp;rsquo;ll be curious how I can adapt my widget to use the official API in the future.&lt;/p&gt;
</content>
  </entry>
</feed>
